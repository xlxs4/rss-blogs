<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-03-10T00:32:05.991Z</id>
    <title>A curated list of ramblings</title>
    <updated>2023-03-10T00:32:05.992Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Deus Ex Bing]]></title>
        <id>https://mikeinnes.io/2023/02/18/bing.html</id>
        <link href="https://mikeinnes.io/2023/02/18/bing.html"/>
        <updated>2023-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Conversations with ChatGPT, a recently released chatbot, reportedly cost its inventors at OpenAI a few cents each. By Internet standards this is shockingly expensive. Though it’s touted as the future of the search engine, any company scaling the technology up to the world’s 10 billion or so daily queries will face suffocating costs. The milestone for Artificial Intelligence may be that it’s now about as expensive as the real thing: Amazon’s mechanical turk service (which Jeff Bezos called “artificial artificial intelligence”) also pays its human labourers a few cents per question-response task.]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[whippet: towards a new local maximum]]></title>
        <id>https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum</id>
        <link href="https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum"/>
        <updated>2023-02-07T13:14:37.000Z</updated>
        <summary type="html"><![CDATA[Friends, you might have noted, but over the last year or so I really
caught the GC bug.  Today's post sums up that year, in the form of a
talk I gave yesterday at FOSDEM.  It's long!  If you prefer video, you
can have a look instead to the .at the FOSDEM event
page
So the context for the whole effort is that Guile has this part of its
implementation which is in C.  It also exposes a lot of that
implementation to users as an API.
So what contraints does this kind of API impose on the garbage
collector?
Let's start by considering the simple  call above.  In a
garbage-collected environment, the GC is responsible for reclaiming
unused memory.  How does the GC know that the result of a 
call is in use?consscm_cons
Generally speaking there are two main strategies for automatic memory
management.…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[three approaches to heap sizing]]></title>
        <id>https://wingolog.org/archives/2023/01/27/three-approaches-to-heap-sizing</id>
        <link href="https://wingolog.org/archives/2023/01/27/three-approaches-to-heap-sizing"/>
        <updated>2023-01-27T21:45:03.000Z</updated>
        <summary type="html"><![CDATA[How much memory should a program get?  Tonight, a quick note on sizing
for garbage-collected heaps.  There are a few possible answers,
depending on what your goals are for the system.
Sometimes you build a system and you want to study it: to identify its
principal components and see how they work together, or to isolate the
effect of altering a single component.  In that case, what you want is a
fixed heap size.  You run your program a few times and determine a heap
size that is sufficient for your problem, and then in future run the
program with that new fixed heap size.  This allows you to concentrate
on the other components of the system.
A good approach to choosing the fixed heap size for a program is to
determine the minimum heap size a program can have by bisection, then
multiplying …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[parallel ephemeron tracing]]></title>
        <id>https://wingolog.org/archives/2023/01/24/parallel-ephemeron-tracing</id>
        <link href="https://wingolog.org/archives/2023/01/24/parallel-ephemeron-tracing"/>
        <updated>2023-01-24T10:48:49.000Z</updated>
        <summary type="html"><![CDATA[Hello all, and happy new year.  Today's note continues the .series on
implementing ephemerons in a garbage
collector
In our  we
looked at a serial algorithm to trace ephemerons.  However, production
garbage collectors are parallel: during collection, they trace
the object graph using multiple worker threads.  Our problem is to
extend the ephemeron-tracing algorithm with support for multiple tracing
threads, without introducing stalls or serial bottlenecks.last
dispatch
Recall that we ended up having to define a table of pending ephemerons:
This table holds  ephemerons that have been visited by the
graph tracer but whose keys haven't been found yet, as well as a
singly-linked list of  ephemerons that are waiting to have
their values traced.  As a global data structure, the pending ephemeron…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ephemeral success]]></title>
        <id>https://wingolog.org/archives/2022/12/15/ephemeral-success</id>
        <link href="https://wingolog.org/archives/2022/12/15/ephemeral-success"/>
        <updated>2022-12-15T21:21:05.000Z</updated>
        <summary type="html"><![CDATA[Good evening, patient hackers :)  Today finishes off my .series on
implementing ephemerons in a garbage
collector
Last time, we had a working solution for ephemerons, but it involved
recursively visiting any pending ephemerons from within the 
routine—the bit of a semi-space collector that is called when
traversing the object graph and we see an object that we hadn't seen
yet.  This recursive visit could itself recurse, and so we could
overflow the control stack.copy
The solution, of course, is "don't do that": instead of visiting
recursively, enqueue the ephemeron for visiting later.  Iterate, don't
recurse.  But here we run into a funny problem: how do we add an
ephemeron to a queue or worklist?  It's such a pedestrian question
("just... enqueue it?") but I think it illustrates some of t…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[i'm throwing ephemeron party & you're invited]]></title>
        <id>https://wingolog.org/archives/2022/12/12/im-throwing-ephemeron-party-youre-invited</id>
        <link href="https://wingolog.org/archives/2022/12/12/im-throwing-ephemeron-party-youre-invited"/>
        <updated>2022-12-12T14:02:41.000Z</updated>
        <summary type="html"><![CDATA[Good day, hackfolk.  Today's note tries to extend our semi-space
collector with support for ephemerons.  Spoiler alert: we fail in a
subtle and interesting way.  See if you can spot it before the end :)
Recall that, as we concluded in ,
a memory manager needs to incorporate ephemerons as a core part of the
tracing algorithm.  Ephemerons are not macro-expressible in terms of
object trace functions.an earlier
article
Instead, to support ephemerons we need to augment our core trace
routine.  When we see an ephemeron , we need to check if the key 
is already visited (and therefore live); if so, we trace the value 
directly, and we're done.  Otherwise, we add  to a global table of
pending ephemerons , indexed under .  Finally whenever we trace a
new object , ephemerons included, we look up  in …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[we iterate so that you can recurse]]></title>
        <id>https://wingolog.org/archives/2022/12/11/we-iterate-so-that-you-can-recurse</id>
        <link href="https://wingolog.org/archives/2022/12/11/we-iterate-so-that-you-can-recurse"/>
        <updated>2022-12-11T21:19:20.000Z</updated>
        <summary type="html"><![CDATA[Sometimes when you see an elegant algorithm, you think "looks great, I
just need it to also do X".  Perhaps you are able to build X directly
out of what the algorithm gives you; fantastic.  Or, perhaps you can
alter the algorithm a bit, and it works just as well while also doing X.
Sometimes, though, you alter the algorithm and things go pear-shaped.
Tonight's little note builds on 
and discusses an worse alternative to the Cheney scanning algorithm.yesterday's semi-space collector
article
To recall, we had this  function that takes a edge in the
object graph, as the address of a field in memory containing a .  If the edge points to an object that was already copied,
 updates it to the forwarded address.  Otherwise it copies the object,
thus computing the new address, and then updates the …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[a simple semi-space collector]]></title>
        <id>https://wingolog.org/archives/2022/12/10/a-simple-semi-space-collector</id>
        <link href="https://wingolog.org/archives/2022/12/10/a-simple-semi-space-collector"/>
        <updated>2022-12-10T20:50:28.000Z</updated>
        <summary type="html"><![CDATA[Good day, hackfolk.  Today's article is about semi-space collectors.
Many of you know what these are, but perhaps not so many have
seen an annotated implementation, so let's do that.
Just to recap, the big picture here is that a semi-space collector
divides a chunk of memory into two equal halves or spaces, called the
 and the .  Allocation proceeds linearly across
tospace, from one end to the other.  When the tospace is full, we 
the spaces: the tospace becomes the fromspace, and the fromspace becomes
the tospace.  The collector copies out all live data  the
fromspace  the tospace (hence the names), starting from some set of
root objects.  Once the copy is done, allocation then proceeds in the
new tospace.fromspacetospaceflipfromto
In practice when you build a GC, it's parameterized in a …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[are ephemerons primitive?]]></title>
        <id>https://wingolog.org/archives/2022/11/28/are-ephemerons-primitive</id>
        <link href="https://wingolog.org/archives/2022/11/28/are-ephemerons-primitive"/>
        <updated>2022-11-28T21:11:30.000Z</updated>
        <summary type="html"><![CDATA[Good evening :)  A quick note, tonight: I've long thought that

are primitive and can't be implemented with mark functions and/or
finalizers, but today I think I have a counterexample.ephemerons
For context, one of the goals of the  is to replace
's current use of the .  Of course, changing a
garbage collector for a production language runtime is risky, and for Guile one of the mitigation
strategies for this work is that the new collector is behind an abstract API
whose implementation can be chosen at compile-time, without requiring
changes to user code.  That way we can first switch to
BDW-implementing-the-new-GC-API, then switch the implementation behind
that API to something else.GC implementation I have been
working on onGuileBoehm-Demers-Weiser (BDW) conservative
collector
Abstracting…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Integrating equation solvers with probabilistic programming through differentiable programming]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1705</id>
        <link href="http://www.stochasticlifestyle.com/integrating-equation-solvers-with-probabilistic-programming-through-differentiable-programming/"/>
        <updated>2022-11-24T01:04:59.000Z</updated>
        <summary type="html"><![CDATA[Part of the COMPUTATIONAL ABSTRACTIONS FOR PROBABILISTIC AND DIFFERENTIABLE PROGRAMMING WORKSHOP
Abstract: Many probabilistic programming languages (PPLs) attempt to integrate with equation solvers (differential equations, nonlinear equations, partial differential equations, etc.) from the inside, i.e. the developers of the PPLs like Stan provide differential equation solver choices as part of the suite. However, as equation solvers are an entire discipline to themselves with many active development communities and subfields, this places an immense burden on PPL developers to keep up with the changing landscape of tens of thousands of independent researchers. In this talk we will explore how Julia PPLs such as Turing.jl support of equation solvers from the outside, i.e. how the tools of differentiable programming allows equation solver libraries to be compatible with PPLs  ... READ MORE
The post Integrating equation solvers with probabilistic programming through differentiable programming appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[in no particular order]]></title>
        <id>https://jao.io/blog/in-no-particular-order.html</id>
        <link href="https://jao.io/blog/in-no-particular-order.html"/>
        <updated>2022-11-21T05:05:00.000Z</updated>
        <summary type="html"><![CDATA[Interesting bits elsewhere:



The influence of Self
10 quick Mastodon tips
Writing with LaTeX
Trying out Mathstodon
Older entries



Tags: sundry]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ephemerons and finalizers]]></title>
        <id>https://wingolog.org/archives/2022/10/31/ephemerons-and-finalizers</id>
        <link href="https://wingolog.org/archives/2022/10/31/ephemerons-and-finalizers"/>
        <updated>2022-10-31T12:21:23.000Z</updated>
        <summary type="html"><![CDATA[Good day, hackfolk.  Today we continue the series on garbage collection
with some notes on ephemerons and finalizers.
conjunctions and disjunctions
First described in a , which
attributes the invention to George Bosworth, ephemerons are a kind of
weak key-value association.1997 paper by Barry
Hayes
Thinking about the problem abstractly, consider that the garbage
collector's job is to keep live objects and recycle memory for dead
objects, making that memory available for future allocations.  Formally
speaking, we can say:
This circular definition uses the word , indicating a disjunction:
a single incoming reference from a live object is sufficient to mark a
referent object as live.any
Ephemerons augment this definition with a conjunction: 
This is a more annoying property for a garbage coll…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[the cambridge centenary ulysess]]></title>
        <id>https://jao.io/blog/the-cambridge-centenary-ulysess.html</id>
        <link href="https://jao.io/blog/the-cambridge-centenary-ulysess.html"/>
        <updated>2022-10-30T01:50:00.000Z</updated>
        <summary type="html"><![CDATA[Physically, this book is obnoxious: huge, wasted margins frame a reproduction
of the original text that painstakingly tries to look as shabby as it was,
including faded letters and all its typos, and its size and weight border on
the unmanageable.  Ah, but the contents is really good: on the one hand
there's of course Joyce's text itself (after twenty years since the last time,
my English, with the help of the annotations, was closer to be up to the task,
and enjoy it even when it wasn't), and next to it the essays introducing every
chapter, which i found (with an exception or two) very informative and,
sometimes, even illuminating.  I was also delighted to confirm that the
parallels with Homer's work are a strecht to say the least: i quickly read The
Odyssey in preparation and found it, again, boring at best and disheartening
in its depiction of the society of the time (not that Joyce's Dublin was
without its blemishes, but you hopefully get my point).



So, just get an electronic version and enjoy!

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[visual differential geometry and forms]]></title>
        <id>https://jao.io/blog/visual-differential-geometry-and-forms.html</id>
        <link href="https://jao.io/blog/visual-differential-geometry-and-forms.html"/>
        <updated>2022-10-30T00:30:00.000Z</updated>
        <summary type="html"><![CDATA[This is a beautiful book.  Crystal-clear and insightful explanations, with the
right amount of historical background and quite original outlook (without
going overboard).  I can only echo what other quoted reviewers have said: i
wish i had had this book when i was studying these matters in earnest, i'm
pretty sure i've understood some fine points for the first time only now!  I'd
also perhaps make an exception on the last part (or act, as Needham calls
them) on differential forms, which feels at times a bit rushed and in need of
some editing, and it'd had been wonderful if the manufacture of the book were
up to its contents: most images and photographs look really, really cheap, and
there are more typos than granted, which is a pity (as to other figures,
they're decent, although it must be said that Needham is not Penrose, but then
who is?).

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[the sticky mark-bit algorithm]]></title>
        <id>https://wingolog.org/archives/2022/10/22/the-sticky-mark-bit-algorithm</id>
        <link href="https://wingolog.org/archives/2022/10/22/the-sticky-mark-bit-algorithm"/>
        <updated>2022-10-22T08:42:07.000Z</updated>
        <summary type="html"><![CDATA[Good day, hackfolk!
A funny post today; I gave an internal presentation at work recently
describing the so-called "sticky mark bit" algorithm.  I figured I might
as well post it here, as a gift to you from your local garbage human.
Before diving in though, we start with some broad context about
.  The term mostly means "garbage
collection" these days, but really it describes a component of a system
that provides fresh memory for new objects and  reclaims memory for objects that won't be needed in the program's future.  This stands in
contrast to , which relies on the programmer
to  their objects.automatic memory managementautomaticallymanual memory managementfree
Of course, automatic memory management ensures some valuable system-wide
properties, like lack of .  But also by
enlarging the s…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better?]]></title>
        <id>http://www.stochasticlifestyle.com/?p=1681</id>
        <link href="http://www.stochasticlifestyle.com/direct-automatic-differentiation-of-solvers-vs-analytical-adjoints-which-is-better/"/>
        <updated>2022-10-11T07:09:53.000Z</updated>
        <summary type="html"><![CDATA[Automatic differentiation of a “solver” is a subject with many details for doing it in the most  effective form. For this reason, there are a lot of talks and courses that go into lots of depth on the topic. I recently gave a talk on some of the latest stuff in differentiable simulation with the American Statistical Association, and have some detailed notes on such adjoint derivations as part of the 18.337 Parallel Computing and Scientific Machine Learning graduate course at MIT. And there are entire organizations like my SciML Open Source Software Organization which work day-in and day-out on the development of new differentiable solvers.
I’ll give a brief summary of all my materials here below.
Continuous vs Discrete Differentiation of Solvers
AD of a solver can be done in essentially two different ways: either directly performing automatic  ... READ MORE
The post Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better? appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately?]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1670</id>
        <link href="http://www.stochasticlifestyle.com/is-differentiable-programming-actually-necessary-cant-you-just-train-separately/"/>
        <updated>2022-10-04T07:38:56.000Z</updated>
        <summary type="html"><![CDATA[Is differentiable programming actually necessary, or can you just train the neural network in isolation against data and then stick the trained neural network into the simulation? We looked at this problem in detail in our new manuscript titled Capturing missing physics in climate model parameterizations using neural differential equations.
The goal of this project is to understand temperature mixing in large eddy simulations, essentially columns of water in the ocean. I.e., can we take a “true” 3D Navier-Stokes and use that to build very quick and accurate models for how heat flows up and down in the water?

This isn’t a new problem: climate scientists  ... READ MORE
The post Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately? appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Julia 1.8 Highlights]]></title>
        <id>https://julialang.org/blog/2022/08/julia-1.8-highlights/</id>
        <link href="https://julialang.org/blog/2022/08/julia-1.8-highlights/"/>
        <updated>2022-08-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlights of the Julia 1.8 release.
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JuliaCon 2022 Highlights]]></title>
        <id>https://julialang.org/blog/2022/08/juliacon-highlights-2022/</id>
        <link href="https://julialang.org/blog/2022/08/juliacon-highlights-2022/"/>
        <updated>2022-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[JuliaCon 2022 Highlights
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[inline snippets and grouping in consult-recoll]]></title>
        <id>https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html</id>
        <link href="https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html"/>
        <updated>2022-08-04T17:29:00.000Z</updated>
        <summary type="html"><![CDATA[I've just released a new version of consult-recoll, which implements a couple
of features that i am really liking, namely, grouping of search results by
mime type:









and inline snippets:









Happy searches!



Tags: emacs programming]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[parisian lives]]></title>
        <id>https://jao.io/blog/parisian-lives.html</id>
        <link href="https://jao.io/blog/parisian-lives.html"/>
        <updated>2022-07-31T03:42:00.000Z</updated>
        <summary type="html"><![CDATA[A very interesting view of how a biographer started her career in the
seventies, with two heavy-weights, Beckett and de Beauvoir.  Bair calls the
book a bio-memoir, and it's indeed quite deserving of a name of its own for
its genre.  One learns of the struggle it was not only to be a biographer of
famous writers still living (and her fascinating relationship with them) but
also to be a successful woman in the seventies.  And there are lots of
interesting details about her writing process, and its all too human side.
Very well written all around, it really whets your appetite: i've already
ordered her Beckett bio!

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quick intro to the new effect analysis of Julia compiler]]></title>
        <id>https://aviatesk.github.io/posts/effects-analysis/index.html</id>
        <link href="https://aviatesk.github.io/posts/effects-analysis/index.html"/>
        <updated>2022-07-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Quick intro to the new effect analysis of Julia compiler]]></summary>
        <author>
            <name>Shuhei Kadowaki&amp;#39;s homepage</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[consult recoll with live preview]]></title>
        <id>https://jao.io/blog/consult-recoll-with-live-preview.html</id>
        <link href="https://jao.io/blog/consult-recoll-with-live-preview.html"/>
        <updated>2022-07-22T18:08:00.000Z</updated>
        <summary type="html"><![CDATA[Lately, i've gravitated towards recoll as a unified search engine for all my
local data, including org and text notes, documents in PDF or similar formats,
HTML files, and local email. As a result, my little consult-recoll package has
gone up a few notches up in my list.  i've just released version 0.5,
featuring live previews.












Recoll is a local search engine that knows how to index a wide variety of file
formats.  It also offers a sophisticated query language, and, for some
document kinds, snippets of the text of the document that actually match your
query: that's always been one of my favourite features, and wanted to bring it
to emacs.



i found consult's live previews a very nice venue to bring snippets into
emacs, via a new version of consult-recoll, and there you go, jus…]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Accurate and Efficient Physics-Informed Learning Through Differentiable Simulation (ASA Seminar Talk)]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1659</id>
        <link href="http://www.stochasticlifestyle.com/accurate-and-efficient-physics-informed-learning-through-differentiable-simulation-asa-seminar-talk/"/>
        <updated>2022-07-14T09:58:09.000Z</updated>
        <summary type="html"><![CDATA[Abstract: Scientific machine learning (SciML) methods allow for the automatic discovery of mechanistic models by infusing neural network training into the simulation process. In this talk we will start by showcasing some of the ways that SciML is being used, from discovery of extrapolatory epidemic models to nonlinear mixed effects models in pharmacology. From there, we will discuss some of the increasingly advanced computational techniques behind the training process, focusing on the numerical issues involved in handling differentiation of highly stiff and chaotic systems. The viewers will leave with an understanding of how compiler techniques are being infused into the simulation stack to increasingly automate the process of developing mechanistic models
Bio: Dr. Chris Rackauckas is the Director of Scientific Research at Pumas-AI, the Director of  ... READ MORE
The post Accurate and Efficient Physics-Informed Learning Through Differentiable Simulation (ASA Seminar Talk) appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clocktower IQ]]></title>
        <id>https://mikeinnes.io/2022/06/29/clocktower.html</id>
        <link href="https://mikeinnes.io/2022/06/29/clocktower.html"/>
        <updated>2022-06-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Three years and two months after it launched on Kickstarter, copies of social deduction game Blood on the Clocktower are finally arriving in the UK. During the long wait eager players have been able to backstab each other using print-and-play copies and the online helper (particularly welcome during lockdowns). But it’s nice to have the real thing in our hands. I’m here to commemorate the occassion with statistics, and in particular to show the ranking system I’m using to see how well my players are doing – just for fun, of course.]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Keynote: New Horizons in Modeling and Simulation with Julia (Modelica Conference 2021)]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1655</id>
        <link href="http://www.stochasticlifestyle.com/keynote-new-horizons-in-modeling-and-simulation-with-julia-modelica-conference-2021/"/>
        <updated>2022-06-25T18:11:28.000Z</updated>
        <summary type="html"><![CDATA[Keynote Address: New Horizons in Modeling and Simulation in Julia
Presenters: Viral Shah (Julia Computing, CEO and Co-Founder), Chris Rackauckas (Julia Computing, Director of Modeling and Simulation and Christopher Laughman (Mitsubishi Electric Research Laboratories, Principal Member Research Staff)
Abstract: As modeling has become more ubiquitous, our models keep growing. The time to build models, verify their behavior, and simulate them is increasing exponentially as we seek more precise predictions. How will our tools change to accommodate the future? Julia’s language design has led to new opportunities. The combination of multiple dispatch, staged compilation, and Julia’s composable libraries have made it possible to build a next generation symbolic-numeric framework. Julia’s abstract interpretation framework enables capabilities such as automatic differentiation, automatic surrogate generation, symbolic tracing, uncertainty propagation, and automatic  ... READ MORE
The post Keynote: New Horizons in Modeling and Simulation with Julia (Modelica Conference 2021) appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Imperative Syntax, Functional Semantics]]></title>
        <id>https://mikeinnes.io/2022/06/24/swap.html</id>
        <link href="https://mikeinnes.io/2022/06/24/swap.html"/>
        <updated>2022-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I just put up a draft paper with a proposal for mixing imperative and functional styles of programming. The gist of it is that we can write code like this:]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[klara and the sun]]></title>
        <id>https://jao.io/blog/klara-and-the-sun.html</id>
        <link href="https://jao.io/blog/klara-and-the-sun.html"/>
        <updated>2022-06-19T17:36:00.000Z</updated>
        <summary type="html"><![CDATA[A nicely written (as always with Ishiguro) history of Stevens turned into an
artificially intelligent being, in a near future reminiscent of Never let me
go.  In other words, i found this novel heavily inspired in previous works of
the author, which i admittedly find better than this one, but that doesn't
mean the book doesn't throw at you a bunch of provocative musings or lacks a
tranquil beauty that makes it absolutely worth reading.

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[simple note taking]]></title>
        <id>https://jao.io/blog/simple-note-taking.html</id>
        <link href="https://jao.io/blog/simple-note-taking.html"/>
        <updated>2022-06-19T03:36:00.000Z</updated>
        <summary type="html"><![CDATA[I was just watching Prot's explanation of his new package denote, a very
elegant note-taking system with a stress on simplicity and, as the author puts
it, low-tech requirements.  Now, those are excellent qualities in my book, and
i think i'd quickly become a denote user if it weren't for the fact that i
already have a homegrown set of utilities following a similar philosophy.
Inevitably, they differ in some details, as is to be expected from software
that has grown with me, as Prot's with him, during more than a decade, but
they are similar in important ways.



I've had in mind writing a brief note on my notes utilities for a while, so i
guess this is a good time for it: i can, after showing you mine, point you to
a polished package following a similar philosophy and sidestep any temptat…]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My first macro in Julia]]></title>
        <id>http://giordano.github.io/blog/2022-06-18-first-macro/</id>
        <link href="http://giordano.github.io/blog/2022-06-18-first-macro/"/>
        <updated>2022-06-17T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[This post isn’t about the first macro I wrote in the Julia programming language, but it can be about your first macro. Frequently Asked Questions Question: What are macros in Julia? Answer: Macros are sort of functions which take as input unevaluated expressions (Expr) and return as output another expression,...]]></summary>
        <author>
            <name>Mosè Giordano</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deprecating in Julia]]></title>
        <id>https://invenia.github.io/blog/2022/06/17/deprecating-in-julia/</id>
        <link href="https://invenia.github.io/blog/2022/06/17/deprecating-in-julia/"/>
        <updated>2022-06-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In software development, the term “deprecated” refers to functionality that is still usable, but is obsolete and about to be replaced or removed in a future version of the software. This blog post will explain why deprecating functionality is a good idea, and will discuss available mechanisms for deprecating functionality in the Julia language.]]></summary>
        <author>
            <name>Invenia Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[slimmer emacs with kitty]]></title>
        <id>https://jao.io/blog/slimmer-emacs-with-kitty.html</id>
        <link href="https://jao.io/blog/slimmer-emacs-with-kitty.html"/>
        <updated>2022-06-08T17:53:00.000Z</updated>
        <summary type="html"><![CDATA[A problem of using Emacs as my operating system is that any otherwise
minor friction with its interface quickly becomes an irritant, and i
thus find myself needed a truly smooth emacs-human interaction; or, to
be more precise emacs-jao interaction: my must needs are going to be,
sometimes, triffles to you, and the other way round.



During the last year, a perceived sluggishness in Emacs's X11 display
performance, together with a very noticeably increased RAM consumption
have become one of those irritants, and i decided that enough is
enough, and moved (for the time being at least) from exwm to,
essentially, using xmonad and kitty as my Emacs's display engine.











For several years now, i've been using exwm as my main desktop, and
been quite happy with it.  One of the reasons is th…]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[el infinito en un junco]]></title>
        <id>https://jao.io/blog/el-infinito-en-un-junco.html</id>
        <link href="https://jao.io/blog/el-infinito-en-un-junco.html"/>
        <updated>2022-05-28T23:39:00.000Z</updated>
        <summary type="html"><![CDATA[If you can read Spanish, i wouldn't miss the opportunity to read this
beautfiul essay in the original: Irene Vallejo's prose is clear,
elegant and very beautiful.  It's a delight (and a relief) to read.
And, if you can't read Spanish but have a translation handy, i
wouldn't miss the opportunity to read it either, for a very
entertaining account of the history of ancient books sprinkled with
lots of interesting (to me, at least!) bits about the Greek and Roman
worlds.  The book is morever wrapped in a subdued and sober optimism
that i've found reinvigorating and sorely needed in these times, when
one often feels like running on empty.  Heartily recommended!

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
</feed>
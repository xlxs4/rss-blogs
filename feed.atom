<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-02-22T00:01:36.606Z</id>
    <title>A curated list of ramblings</title>
    <updated>2024-02-22T00:01:36.606Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Parallel garbage collection for SBCL]]></title>
        <id>https://zenodo.org/record/7816398</id>
        <link href="https://zenodo.org/record/7816398"/>
        <updated>2024-02-22T00:01:36.572Z</updated>
        <summary type="html"><![CDATA[The design and implementation of a non-moving parallel generational garbage collector for SBCL.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The poverty of "post-open" source]]></title>
        <id>https://applied-langua.ge/posts/the-poverty-of-post-open-source.html</id>
        <link href="https://applied-langua.ge/posts/the-poverty-of-post-open-source.html"/>
        <updated>2024-02-22T00:01:34.618Z</updated>
        <summary type="html"><![CDATA[Post-open source falls short on what improvements it was supposed to make. It prefigures a boring future, mostly because it carries on productivist logic, and makes programming even more of a difficult and esoteric tool. Capitalism isn't the only problem threatening peer production; it is rather threatened by more general principles, which even radicals can believe.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I don't want to go to Chel-C]]></title>
        <id>https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html</id>
        <link href="https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html"/>
        <updated>2024-02-22T00:01:34.504Z</updated>
        <summary type="html"><![CDATA[When "simple" programming languages aren't.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Lisp Curse Redemption Arc]]></title>
        <id>https://applied-langua.ge/posts/lisp-curse-redemption-arc.html</id>
        <link href="https://applied-langua.ge/posts/lisp-curse-redemption-arc.html"/>
        <updated>2024-02-22T00:01:34.414Z</updated>
        <summary type="html"><![CDATA[Pondering marketing strategies, and how we aren't supposed to be productive in Common Lisp.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The one-more-re-nightmare compiler]]></title>
        <id>https://applied-langua.ge/posts/omrn-compiler.html</id>
        <link href="https://applied-langua.ge/posts/omrn-compiler.html"/>
        <updated>2024-02-22T00:01:34.411Z</updated>
        <summary type="html"><![CDATA[A pile of regular expression derivatives, myths about Ediware, SIMD instruction selection and using the Common Lisp compiler as a backend for a regular expression compiler.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zero Feet: a proposal for a systems-free Lisp]]></title>
        <id>https://applied-langua.ge/posts/zero-feet.html</id>
        <link href="https://applied-langua.ge/posts/zero-feet.html"/>
        <updated>2024-02-22T00:01:34.401Z</updated>
        <summary type="html"><![CDATA[A systems language is a collection of things that don't fit into a modular language. There shouldn't be one.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The next 700 virtual machines]]></title>
        <id>https://applied-langua.ge/posts/the-next-700-virtual-machines.html</id>
        <link href="https://applied-langua.ge/posts/the-next-700-virtual-machines.html"/>
        <updated>2024-02-22T00:01:34.332Z</updated>
        <summary type="html"><![CDATA[Virtual machine will eat themselves, by being similar enough that most can subsume each other. This can be furthered by making it easier to target abstract machines, and using object capabilities to allow cohabitation of languages and incremental extension to languages.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Please test the parallel mark-region collector for SBCL]]></title>
        <id>https://applied-langua.ge/~hayley/pmrgc.html</id>
        <link href="https://applied-langua.ge/~hayley/pmrgc.html"/>
        <updated>2024-02-22T00:01:34.244Z</updated>
        <summary type="html"><![CDATA[How to build the new parallel GC for SBCL, and how to tell if it's working.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Paolo Amoroso: Importing Common Lisp Files in Medley with TextModules]]></title>
        <id>https://journal.paoloamoroso.com/importing-common-lisp-files-in-medley-with-textmodules?pk_campaign=rss-feed</id>
        <link href="https://journal.paoloamoroso.com/importing-common-lisp-files-in-medley-with-textmodules?pk_campaign=rss-feed"/>
        <updated>2024-02-18T11:44:04.000Z</updated>
        <summary type="html"><![CDATA[Medley is a residential environment for Interlisp and Common Lisp development.
With some effort it's possible to use Medley as a traditional file based Common Lisp environment. But in specific cases a better approach is to bring in Medley's residential environment Common Lisp sources created in file based environments.
In this post I explain the latter, i.e. how to use TextModules to import Common Lisp files into the residential environment. I go over the steps for converting an example program, the database of CD music tracks in Chapter 3 Practical: A Simple Database of Peter Seibel's book Practical Common Lisp.
Motivation
Using the tools and facilities of the residential environment, such as the File Manager, is the normal way of developing new Lisp programs. To run existing Common Lisp …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[guix on the framework 13 amd]]></title>
        <id>https://wingolog.org/archives/2024/02/16/guix-on-the-framework-13-amd</id>
        <link href="https://wingolog.org/archives/2024/02/16/guix-on-the-framework-13-amd"/>
        <updated>2024-02-16T10:23:43.000Z</updated>
        <summary type="html"><![CDATA[I got a new laptop!  It’s a : 8 cores, 2 threads per core, 64 GB RAM, 3:2 2256×1504 matte screen.  It kicks my 5-year-old Dell XPS 13 in the pants, and I am so relieved to be back to a matte screen.  I just got it up and running with , which though easier than past installation experiences was not without some wrinkles, so here I wanted to share a recipe for what worked for me.Framework 13 AMDGuix
(I swear this isn’t going to become a product review blog, but when I went to post something like this on the   I got an error saying that new users could only post 2 links.  I understand how we got here but hoo, that is a garbage experience!)Framework forum
Upstream Guix works on the Framework 13 AMD, but only with software rendering and no wifi, and I wasn’t able to install from upstream media.…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Revisiting Mastodon]]></title>
        <id>https://batsov.com/articles/2024/02/16/revisiting-mastodon/</id>
        <link href="https://batsov.com/articles/2024/02/16/revisiting-mastodon/"/>
        <updated>2024-02-16T08:15:00.000Z</updated>
        <summary type="html"><![CDATA[After my recent article on Bluesky something rather unexpected happened. I noticed a link to an interesting post on Mastodon and when I signed in to check it out, I was surprised to see that my feed there was pretty active. There were many familiar people (mostly from the Emacs, Clojure and Ruby communities) and some pretty nice conversations going on. That got me thinking if I should revisit it.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[family bike transportation]]></title>
        <id>https://wingolog.org/archives/2024/02/14/family-bike-transportation</id>
        <link href="https://wingolog.org/archives/2024/02/14/family-bike-transportation"/>
        <updated>2024-02-14T21:49:24.000Z</updated>
        <summary type="html"><![CDATA[Good evening!  Tonight I have a brief and unusual post, which is a product review of an electric cargo bike and its accessories for transporting kids.  Let’s see if I can get this finished while I wait for my new laptop to finish installing.
So, I have three young kids (5yo, 3yo, 1yo), and I need to get them places.  Before the 3rd was born I would use a bike trailer (, bought when there was just one kid) and a bike seat (, attached on seat-post).  That was fine, though sometimes the thought of lugging their ever-increasing kilograms somewhere would give me pause.  Then when the third kid arrived, hoo boy; I got a front-mount , to see if I could do three kids on one me-powered bike, but that was too tight to manage; not enough space to kick my leg over when getting on.Thule Chariot Lite si…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vindarel: Celebrating 1001 learners on my Common Lisp course &#129395;]]></title>
        <id>https://lisp-journey.gitlab.io/blog/celebrating-1001-learners-on-my-common-lisp-course/</id>
        <link href="https://lisp-journey.gitlab.io/blog/celebrating-1001-learners-on-my-common-lisp-course/"/>
        <updated>2024-02-14T16:05:44.000Z</updated>
        <summary type="html"><![CDATA[I just got 1001 learners on my Common Lisp
course
on Udemy. Thanks everybody for your support, here or elsewhere!
Starting with CL was honestly not easy. The first thing I did was
writing the “data structures” page on the Cookbook, bewildered that it
didn’t exist yet. A few years and a few projects later, this course
allows me to share more, learn more, have fun, and have some rewards
to keep the motivation up.

I know the course isn’t complete by any means, I want to add many
chapters, both advanced topics but easier material for newcomers as
well (beware, my course isn’t for total beginners in a Lisp
language). The next one, and soon©, will be all about CLOS. In the
meantime, I don’t abandon you, I enhance the Cookbook, I publish some
videos on Youtube (last one: web development in Common Lisp, part 1
and part 2), I work on
starter kits or on newcomer-friendly libraries ;)
Thanks again,
don’t hesitate to share the link with a friend or a colleague ;)
Here’s a link with a coupon until March, 13th 2024. (student? Get in touch for a free link)
more information on Github]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Symbolic-Numerics: how compiler smarts can help improve the performance of numerical methods (nonlinear solvers in Julia)]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1758</id>
        <link href="https://www.stochasticlifestyle.com/symbolic-numerics-how-compiler-smarts-can-help-improve-the-performance-of-numerical-methods-nonlinear-solvers-in-julia/"/>
        <updated>2024-02-13T10:06:17.000Z</updated>
        <summary type="html"><![CDATA[Many problems can be reduced down to solving f(x)=0, maybe even more than you think! Solving a stiff differential equation? Finding out where the ball hits the ground? Solving an inverse problem to find the parameters to fit a model? In this talk we’ll showcase how SciML’s NonlinearSolve.jl is a general system for solving nonlinear equations and demonstrate its ability to efficiently handle these kinds of problems with high stability and performance. We will focus on how compilers are being integrated into the numerical stack so that many of the things that were manual before, such as defining sparsity patterns, Jacobians, and adjoints, are all automated out-of-the-box making it greatly outperform purely numerical codes like SciPy or NLsolve.jl.
PyData Global 2023
The post Symbolic-Numerics: how compiler smarts can help improve the performance of numerical methods (nonlinear solvers in Julia) appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bluesky]]></title>
        <id>https://batsov.com/articles/2024/02/12/bluesky/</id>
        <link href="https://batsov.com/articles/2024/02/12/bluesky/"/>
        <updated>2024-02-12T20:33:00.000Z</updated>
        <summary type="html"><![CDATA[Remember me trying out Mastodon a while ago? Well, it didn’t stick. For various reasons.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Curbing My Email Mania]]></title>
        <id>https://batsov.com/articles/2024/02/12/curbing-my-email-mania/</id>
        <link href="https://batsov.com/articles/2024/02/12/curbing-my-email-mania/"/>
        <updated>2024-02-12T20:18:00.000Z</updated>
        <summary type="html"><![CDATA[In the end, there can be only one. – Highlander]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Semantic Versioning (Semver) is flawed, and Downgrade CI is required to fix it]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1751</id>
        <link href="https://www.stochasticlifestyle.com/semantic-versioning-semver-is-flawed-and-downgrade-ci-is-required-to-fix-it/"/>
        <updated>2024-02-11T12:44:34.000Z</updated>
        <summary type="html"><![CDATA[Semantic versioning is great. If you don’t know what it is, it’s just a versioning scheme for software that goes MAJOR.MINOR.PATCH, where
MAJOR version when you make incompatible API changes
MINOR version when you add functionality in a backward compatible manner
PATCH version when you make backward compatible bug fixes
That’s all it is, but it’s a pretty good system. If you see someone has updated their package from v3.2.0 to v3.2.1, then you know that you can just take that update because it’s just a patch, it won’t break your code. You can easily accept patch updates. Meanwhile, if you see they released v3.3.0, then you know that some new features were added, but it’s safe for you to update. This allows you to be compatible with v3.3.0 so that if a different package requires it, great you can both use it!  ... READ MORE
The post Semantic Versioning (Semver) is flawed, and Downgrade CI is required to fix it appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joe Marshall: Bilinear Fractional Transformations]]></title>
        <id>http://funcall.blogspot.com/2024/02/bilinear-fractional-transformations.html</id>
        <link href="http://funcall.blogspot.com/2024/02/bilinear-fractional-transformations.html"/>
        <updated>2024-02-10T16:40:00.000Z</updated>
        <summary type="html"><![CDATA[A bilinear fractional transformation (BiLFT) is a
  two-argument function of the form
(lambda (x y)
  (/ (+ (* A x y) (* B x) (* C y) D)
     (+ (* E x y) (* F x) (* G y) H)))
BiLFTs do not form a group
  under functional composition with LFTs, but they have this
  interesting property:  if you hold either input to the BiLFT constant,
  the BiLFT becomes a LFT on the other input.  So if we consider just
  one of the inputs at a time (or the output), we can apply some
  group-like operations.
You can compose LFTs with BiLFTs in three ways.  First,
  you can run the output of a BiLFT into the input of a LFT.  Second
  and third, you can run the output of a LFT into the either the x or
  y input of a BiLFT.  Composing a LFT with a BiLFT in any of these
  ways produces another BiLFT, so there …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Paolo Amoroso: Managing pure Common Lisp files on Medley]]></title>
        <id>https://journal.paoloamoroso.com/managing-pure-common-lisp-files-on-medley?pk_campaign=rss-feed</id>
        <link href="https://journal.paoloamoroso.com/managing-pure-common-lisp-files-on-medley?pk_campaign=rss-feed"/>
        <updated>2024-02-08T11:17:13.000Z</updated>
        <summary type="html"><![CDATA[Managing Lisp code in the residential environment of Medley differs from similar tasks in traditional file based Common Lisp systems.
In a previous post I explained how the residential environment of Medley works, discussed some of its facilities and tools, and introduced a workflow for managing Common Lisp code under the residential environment. This leverages the way Medley is designed to work and minimizes friction.
In this post I explain how to use Medley as a file based environment, albeit with some friction and reduced functionality.
I show how to edit, organize, and load pure Common Lisp files, i.e. source files not under the control of the File Manager. Pure files are ordinary text files that contain only Common Lisp code, with no metadata or font control commands like the code dat…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joe Marshall: Infinite Composition]]></title>
        <id>http://funcall.blogspot.com/2024/02/infinite-composition.html</id>
        <link href="http://funcall.blogspot.com/2024/02/infinite-composition.html"/>
        <updated>2024-02-04T17:37:00.000Z</updated>
        <summary type="html"><![CDATA[If you like functional composition, you’ll like linear
  fractional transformations (LFTs).  They behave very nicely when you
  compose them (in fact, they are a group under functional
  composition).  If you compose two LFTs, you get another LFT.  You
  can keep composing as long as you wish.  Let’s compose an
  infinite number of LFTs.
I suppose I should argue that composing an infinite number of LFTs
  will give you anything at all.  Consider those LFTs with
  non-negative coefficients.  When given an input in the range [0,∞],
  they will output a number in the range [A/C, B/D].  The output range
  is narrower than, and contained within, the input range.  If we compose two such LFTs, the
  range of output of the outermost LFT will be even narrower.  As we
  compose more and more of thes…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Eugene Zaikonnikov: Tweaking SLIME Xref for Remote Images]]></title>
        <id>http://blog.funcall.org//lisp/2024/01/31/slime-xref/</id>
        <link href="http://blog.funcall.org//lisp/2024/01/31/slime-xref/"/>
        <updated>2024-01-30T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[By the nature of embedded development one spends a lot of time debugging on target devices. SLIME experience for the most part is as smooth as on local host with the exception of cross referencing. Swank backend on target is reporting local paths in xref records which the frontend on your host then tries to open.
The canonical workaround from the user manual is using slime-tramp contrib, allowing you to navigate the source tree on remote target over SSH. I however greatly prefer to work on the local copy of the source code, with much lower latency (SSH over VPN over cellular to a remote site is no fun) and ability to stage and commit changes immediately. A somehwoat kludgy workflow that does the trick is using a hacked slime-postprocess-xref below to substitute $HOME in xref records. The s…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Luís Oliveira: Manuel Simoni on CL's control flow primitives]]></title>
        <id>http://kvardek-du.kerno.org/2024/01/manuel-simoni-on-cls-control-flow.html</id>
        <link href="http://kvardek-du.kerno.org/2024/01/manuel-simoni-on-cls-control-flow.html"/>
        <updated>2024-01-30T14:56:00.000Z</updated>
        <summary type="html"><![CDATA[Manuel Simoni dusts his Axis of Eval blog off and writes about Common Lisp's BLOCK / RETURN-FROM and UNWIND-PROTECT. A summary for non-Lispers.]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[TurtleWare: Writing an ad hoc GUI for Coleslaw]]></title>
        <id>https://turtleware.eu/posts/Writing-an-ad-hoc-GUI-for-Coleslaw.html</id>
        <link href="https://turtleware.eu/posts/Writing-an-ad-hoc-GUI-for-Coleslaw.html"/>
        <updated>2024-01-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Table of Contents
Preliminary steps
Embracing the chaos
Presentations
Managing a blog collection
Managing a blog instance
Big ball of mud
Closing thoughts
Coleslaw is a "Flexible Lisp Blogware". It is a program that I'm using to manage
my blogs and allows for an offline blog compilation. The functionality of the
website may be extended with plugins and the visual appearance is defined by
configurable themes.
Its design is straightforward (if not a bit messy), so it is a good candidate to
show how to slap a CLIM interface on top of existing software. The integration
will be very shallow to not encroach into Coleslaw responsibilities, yet deep
enough to provide a convenience utility over the library.

Preliminary steps
In this post we will use a few dependencies. Of course one of them is mcc…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joe Marshall: Exponentiating Functions]]></title>
        <id>http://funcall.blogspot.com/2024/01/exponentiating-functions.html</id>
        <link href="http://funcall.blogspot.com/2024/01/exponentiating-functions.html"/>
        <updated>2024-01-28T20:00:00.000Z</updated>
        <summary type="html"><![CDATA[If we compose a function F(x) with itself, we get F(F(x)) or F∘F.
  If we compose it again, we get F(F(F(x))) or F∘F∘F.  Rather than
  writing ‘F’ over and over again, we can abuse
  exponential notation and write (F∘F∘F) as F3, where the
  superscript indicates how many times we compose the function.
  F1 is, naturally, just F.  F0 would be zero
  applications of F, which would be the function that leaves its
  argument unchanged, i.e. the identity function.
The analogy with exponentiation goes deeper.  We can quickly
  exponentiate a number with a divide and conquer
  algorithm:
(defun my-expt (base exponent)
  (cond ((zerop exponent) 1)
        ((evenp exponent) (my-expt (* base base) (/ exponent 2)))
        (t (* base (my-expt base (- exponent 1))))))
(defun fexpt (f exponent)
  (cond…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Learn Nix, Part 49: nix-direnv is a huge quality of life improvement]]></title>
        <id>https://ianthehenry.com/posts/how-to-learn-nix/nix-direnv/</id>
        <link href="https://ianthehenry.com/posts/how-to-learn-nix/nix-direnv/"/>
        <updated>2024-01-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The reason I discovered an ancient blog post the other day was that I had something new to say about Nix for the first time in over two years.
The thing I want to say is this: nix-direnv is great. It fixes roughly every problem that I’ve had with nix-shell, and does so in a much nicer way than my previous ad-hoc solutions.
This is important because I mostly just use Nix to document and install per-project native dependencies. I do use it to install “global” tools as well, but that is rarely very interesting, and most of my interaction with Nix these days consists of editing small shell.nix files.
But it took a bit of doing to get to the point that I felt good about using Nix for this. For one thing, shells don’t register GC roots, which means that every time you collect garbage you have to…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Learn Nix, Part 48: Installing (single-user) Nix on macOS]]></title>
        <id>https://ianthehenry.com/posts/how-to-learn-nix/installing-nix-on-macos/</id>
        <link href="https://ianthehenry.com/posts/how-to-learn-nix/installing-nix-on-macos/"/>
        <updated>2024-01-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Note: I wrote the vast majority of this post on August 24, 2022, but I decided that it was a whiny rant that I didn’t want to publish. I came across the draft in January 2024, remembered that this entire series is a whiny rant, and decided to publish it anyway.
I’ve been a happy Nix user for about 18 months now, and– well, not happy happy, but satisfied… no… not really satisfied either; perhaps it’s more of a resigned disgruntlement; a feeling that despite its many flaws, it’s still better than anything else out there, and I’ve invested so much time into it already that it would be a shame to give up now, so… am I describing Stockholm syndrome?
I’ve been imprisoned in Nix’s castle for about 18 months now, and I recently came into a new laptop – one of those shiny blue numbers – so naturall…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joe Marshall: Roll Your Own Linear Fractional Transformations]]></title>
        <id>http://funcall.blogspot.com/2024/01/roll-your-own-linear-fractional.html</id>
        <link href="http://funcall.blogspot.com/2024/01/roll-your-own-linear-fractional.html"/>
        <updated>2024-01-25T20:02:00.000Z</updated>
        <summary type="html"><![CDATA[Looking for a fun weekend project?  Allow me to suggest linear fractional transformations.
A linear fractional transformation (LFT), also known as a Möbius
  transformation or a homographic function, is a function of
  the form
(lambda (x)
  (/ (+ (* A x) B)
     (+ (* C x) D)))
(defun make-lft (A B C D)
  (lambda (x)
    (/ (+ (* A x) B)
       (+ (* C x) D))))
but you’ll want access to A,
  B, C, and D.  If you implement LFTs
  as funcallable CLOS instances, you can read out the coefficients from slot values.
Constructor
The coefficients A, B, C,
  and D could in theory be any complex number, but we can
  restrict them to being integers and retain a lot of the functionality.
  If we multiply all the coefficients by the same factor, it doesn't
  change the output of the LFT.  If you have …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reprocessing - Confession 94]]></title>
        <id>https://reader.tymoon.eu/article/434</id>
        <link href="https://reader.tymoon.eu/article/434"/>
        <updated>2024-01-23T22:13:53.000Z</updated>
        <summary type="html"><![CDATA[It happens frequently enough that a conversation in some online chatroom veers over to the question of privacy in the modern world, and especially to the willingness people have to share oodles of their often very personal information with complete strangers online. I certainly appreciate and understand the fears of oversharing, after all there are a lot of very dangerous people out there that, if they decide to do so, can absolutely hugely impact if not ruin your life entirely. Despite this, I somehow can't help myself.
I suppose I can't help myself in part because I lack the self confidence to even believe that anyone would read what I write, let alone find me to be attractive enough of a target to begin a harassment campaign specifically towards me. I fully realise the naivete of this b…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Implementing System-Versioned Tables in Postgres]]></title>
        <id>https://hypirion.com/musings/implementing-system-versioned-tables-in-postgres</id>
        <link href="https://hypirion.com/musings/implementing-system-versioned-tables-in-postgres"/>
        <updated>2024-01-21T20:20:00.000Z</updated>
        <summary type="html"><![CDATA[There's no official support for system-versioned tables in Postgres yet, and the temporal extensions aren't supported on Azure/AWS/GCP. Let's implement it ourselves with 3 triggers and an index.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[nombrilliant, actually]]></title>
        <id>https://wingolog.org/archives/2024/01/18/nombrilliant-actually</id>
        <link href="https://wingolog.org/archives/2024/01/18/nombrilliant-actually"/>
        <updated>2024-01-18T23:15:58.000Z</updated>
        <summary type="html"><![CDATA[Today, a middle-aged note: when you are young, unless you been
failed by The System, you enjoy a radiant confidence: everything you say
burns with rightness and righteousness, that the world Actually Is This
Way, You See, and if you think about it, it Actually Should Be This
Other Specific Way.  This is how you get the fervent young communists
and Scala enthusiasts and ecologists and Ayn Randians.  The ideas are so
right that you become an evangelist, a
,
a truth-speaker; a youtuber, perhaps.prophet
Then, with luck, you meet the world: you build, you organize, you
invest, you double down.  And in that doubling, the ideas waver,
tremble, resonate, imperceptibly at first, reinforced in some ways,
impeded in others.  The world works in specific ways, too, and you don’t
really know them in the…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning OCaml: Verifying tail-recursion with @tailcall]]></title>
        <id>https://batsov.com/articles/2024/01/16/learning-ocaml-verifying-tail-recursion-with-tailcall/</id>
        <link href="https://batsov.com/articles/2024/01/16/learning-ocaml-verifying-tail-recursion-with-tailcall/"/>
        <updated>2024-01-16T08:52:00.000Z</updated>
        <summary type="html"><![CDATA[How can you be sure that an OCaml function you wrote is actually tail-recursive? You can certainly compile the code and look at the generated assembly code, but that’d be quite the overkill, given there is a much simpler way to do this.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2023: The Year in Review]]></title>
        <id>https://batsov.com/articles/2024/01/16/2023-the-year-in-review/</id>
        <link href="https://batsov.com/articles/2024/01/16/2023-the-year-in-review/"/>
        <updated>2024-01-16T08:43:00.000Z</updated>
        <summary type="html"><![CDATA[Life can only be understood backwards; but it must be lived forwards. – Søren Kierkegaard]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[micro macro story time]]></title>
        <id>https://wingolog.org/archives/2024/01/11/micro-macro-story-time</id>
        <link href="https://wingolog.org/archives/2024/01/11/micro-macro-story-time"/>
        <updated>2024-01-11T14:10:38.000Z</updated>
        <summary type="html"><![CDATA[Today, a tiny tale:  I was working
on .
Guile inherited this code from an early version of Kent Dybvig’s
.  It
was... not easy to work with.about 15 years
agoGuile’s macro
expanderportable syntax
expander
Some difficulties were essential.  Scope is tricky, after all.
Some difficulties were incidental, but deep.  The expander is ultimately
a function that translates Scheme-with-macros to Scheme-without-macros.
However, it is itself written in Scheme-with-macros, so to load it on a
substrate without macros requires a ,
whose data representations need to be compatible with any incremental
change, so that you will be able to use the new expander to produce a
fresh pre-expansion.  This difficulty could have been avoided by
.  It
works once you are used to it, but it’s gnarly.pre-expanded copy o…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[missing the point of webassembly]]></title>
        <id>https://wingolog.org/archives/2024/01/08/missing-the-point-of-webassembly</id>
        <link href="https://wingolog.org/archives/2024/01/08/missing-the-point-of-webassembly"/>
        <updated>2024-01-08T11:45:39.000Z</updated>
        <summary type="html"><![CDATA[I find most descriptions of WebAssembly to be uninspiring: if you
start with a phrase like “assembly-like language” or a “virtual machine”,
we have already lost the plot.  That’s not to say that these
descriptions are incorrect, but it’s like explaining what a dog is by
starting with its circulatory system.  You’re not wrong, but you should probably lead with the bark.
I have a different preferred starting point which is less descriptive
but more operational: .  WebAssembly is a new way of dividing computing systems into
pieces and of composing systems from parts.WebAssembly is a new fundamental abstraction
boundary
This all may sound high-falutin´, but it’s for real: this is the
actually interesting thing about Wasm.
It’s probably easiest to explain what I mean by example.  Consider the
L…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[scheme modules vs whole-program compilation: fight]]></title>
        <id>https://wingolog.org/archives/2024/01/05/scheme-modules-vs-whole-program-compilation-fight</id>
        <link href="https://wingolog.org/archives/2024/01/05/scheme-modules-vs-whole-program-compilation-fight"/>
        <updated>2024-01-05T20:43:49.000Z</updated>
        <summary type="html"><![CDATA[In a recent dispatch, I explained .
Today’s note explores what a correct solution might look like.the whole-program compilation
strategy used in Whiffle and
Hoot
Consider a module that exports an increment-this-integer procedure.
We’ll use syntax from the :R6RS
standard
If we then have a program:
Then the meaning of this program is clear: it reduces to ,
then to 43.  Fine enough.  But how do we get there?  How does the
compiler compose the program with the modules that it uses
(transitively), to produce a single output?(+ 42 1)
In

(and ), the answer is,
sloppily.  There is a 
that initially has a number of bindings from the host compiler,
.  One of these is , exposed under
the name , where the  in this case is just a warning to the reader that this is a weird
primitive binding.  Using thi…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v8's precise field-logging remembered set]]></title>
        <id>https://wingolog.org/archives/2024/01/05/v8s-precise-field-logging-remembered-set</id>
        <link href="https://wingolog.org/archives/2024/01/05/v8s-precise-field-logging-remembered-set"/>
        <updated>2024-01-05T09:44:21.000Z</updated>
        <summary type="html"><![CDATA[A  is used by a garbage collector to identify graph
edges between partitioned sub-spaces of a heap.  The canonical example
is in generational collection, where you allocate new objects in
, and eventually promote survivor objects to .  If
most objects die young, we can focus GC effort on newspace, to avoid
traversing all of oldspace all the time.remembered setnewspaceoldspace
Collecting a subspace instead of the whole heap is sound if and only if
we can identify all live objects in the subspace.  We start with some
set of  that point into the subspace from outside, and then
traverse all links in those objects, but only to other objects within
the subspace.roots
The roots are, like, global variables, and the stack, and registers; and
in the case of a partial collection in which we identify …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Julia 1.10 Highlights]]></title>
        <id>https://julialang.org/blog/2023/12/julia-1.10-highlights/</id>
        <link href="https://julialang.org/blog/2023/12/julia-1.10-highlights/"/>
        <updated>2023-12-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlights of the Julia 1.10 release.
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Bad Year for Blogging]]></title>
        <id>https://batsov.com/articles/2023/12/23/a-bad-year-for-blogging/</id>
        <link href="https://batsov.com/articles/2023/12/23/a-bad-year-for-blogging/"/>
        <updated>2023-12-23T06:34:00.000Z</updated>
        <summary type="html"><![CDATA[Last year (2022) I celebrated a rather unexpected all time blogging record. As it often happens in such cases, however, there was a massive drop in my blogging activity afterwards.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fastmail: Year Two]]></title>
        <id>https://batsov.com/articles/2023/12/22/fastmail-year-two/</id>
        <link href="https://batsov.com/articles/2023/12/22/fastmail-year-two/"/>
        <updated>2023-12-22T14:41:00.000Z</updated>
        <summary type="html"><![CDATA[Here’s a small follow-up to my usage of Fastmail that started in 2021. In a nutshell - little has changed since my previous update. Fastmail is still my favorite email vendor and I keep using it more and more. Here are a few highlights:]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[service update]]></title>
        <id>https://wingolog.org/archives/2023/12/14/service-update</id>
        <link href="https://wingolog.org/archives/2023/12/14/service-update"/>
        <updated>2023-12-14T14:28:45.000Z</updated>
        <summary type="html"><![CDATA[Late last year I switched blog entries and comments to be written in , but there was a bug that I never noticed: if a text consisted only of a single paragraph or block, it would trigger an error that got reported back to the user in a very strange way, and which would prevent the comment from being posted.a dialect of markdown
I had never seen the error myself because blog posts are generally more than a paragraph, but it must have been quite irritating when commenting.  Sorry about that; it should be fixed now.  Should you experience more strange errors, please do send me an email with the comment to .  Cheers.wingo@igalia.com]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[sir talks-a-lot]]></title>
        <id>https://wingolog.org/archives/2023/12/12/sir-talks-a-lot</id>
        <link href="https://wingolog.org/archives/2023/12/12/sir-talks-a-lot"/>
        <updated>2023-12-12T15:18:14.000Z</updated>
        <summary type="html"><![CDATA[I know, dear reader: of course you have already seen all my talks this year.  Your attentions are really too kind and I thank you.  But those other people, maybe you share one talk with them, and then they ask you for more, and you have to go stalking back through the archives to slake their nerd-thirst.  This happens all the time, right?
I was thinking of you this morning and I said to myself, why don’t I put together a post linking to all of my talks in 2023, so that you can just send them a link; here we are.  You are very welcome, it is really my pleasure.
  Wasm
standards group, Munich, 11 Oct 2023.
Scheme + Wasm + GC = MVP: Hoot Scheme-to-Wasm compiler update.slides

Wasm GC subgroup, 18 Apr 2023.
Scheme to Wasm: Use and misuse of the GC proposal.slides

BOB, Berlin, 17 Mar 2023.


A world to win: WebAssembly for the rest of us.blogslidesyoutube

EOSS, Prague, 27 June 2023.







Cross-platform mobile UI: “Compilers, compilers everywhere”.slidesyoutubeblogblogblogblogblogblog

Spritely, remote, 10 May 2023.

CPS Soup: A functional intermediate language.blogslides

FOSDEM, Brussels, 4 Feb 2023.


Whippet: A new GC for Guile.blogeventslides
Still here?  The full  will surely fill your cup.talks archive
2023 talks
but wait, there’s more]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[a simple hdr histogram]]></title>
        <id>https://wingolog.org/archives/2023/12/10/a-simple-hdr-histogram</id>
        <link href="https://wingolog.org/archives/2023/12/10/a-simple-hdr-histogram"/>
        <updated>2023-12-10T21:27:59.000Z</updated>
        <summary type="html"><![CDATA[Good evening!  This evening, a note on high-dynamic-range (HDR)
histograms.
How should one record garbage collector pause times?
A few options present themselves: you could just record the total pause
time.  Or, also record the total number of collections, which allows you
to compute the average.  Maximum is easy enough, too.  But then you
might also want the median or the p90 or the p99, and these percentile
values are more gnarly: you either need to record all the pause times,
which can itself become a memory leak, or you need to approximate via a
histogram.
Let’s assume that you decide on the histogram approach.  How should you
compute the bins?  It would be nice to have microsecond accuracy on the
small end, but if you bin by microsecond you could end up having
millions of bins, which …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The State of MacOS Support]]></title>
        <id>https://reader.tymoon.eu/article/433</id>
        <link href="https://reader.tymoon.eu/article/433"/>
        <updated>2023-11-27T14:04:32.000Z</updated>
        <summary type="html"><![CDATA[I've been writing libraries for Common Lisp for over a decade now (lord almighty), and for most of that time I've tried to ensure that the libraries would, in the very least, work on all three major operating systems: Windows, Linux, and MacOS.
Usually doing so isn't hard, as I can rely on the implementation and the language standard, but especially for libraries that deal with foreign code or operating system interfaces, a bit more work is needed. For the longest time I went the extra mile of providing that support myself, despite not being a MacOS user, and despite vehemently disapproving of Apple as a company and their treatment of users and developers.
About two years ago, I stopped. I had had enough of all the extra work the platform put on me, for zero personal gain. Especially I had…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT performs better on Julia than Python (and R) for Large Language Model (LLM) Code Generation. Why?]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1732</id>
        <link href="https://www.stochasticlifestyle.com/chatgpt-performs-better-on-julia-than-python-and-r-for-large-language-model-llm-code-generation-why/"/>
        <updated>2023-11-19T15:57:36.000Z</updated>
        <summary type="html"><![CDATA[Machine learning is all about examples. The more data you have, the better it should perform, right? With the rise of ChatGPT and Large Language Models (LLMs) as a code helping tool, it was thus just an assumption that the most popular languages like Python would likely be the best for LLMs. But because of the increased productivity, I tend to use a lot of Julia, a language with  an estimated user-base of around a million programmers. For this reason, people have often asked me how it fairs with ChatGPT, Github Copilot, etc., and so I checked out those pieces and… was stunned. It’s really good. It seemed better than Python actually?
The data is in: Julia does well with ChatGPT
This question was recently put to the test by a researcher named Alessio Buscemi in A Comparative Study  ... READ MORE
The post ChatGPT performs better on Julia than Python (and R) for Large Language Model (LLM) Code Generation. Why? appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DDPS Seminar Talk: Generalizing Scientific Machine Learning and Differentiable Simulation Beyond Continuous models]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1729</id>
        <link href="https://www.stochasticlifestyle.com/ddps-seminar-talk-generalizing-scientific-machine-learning-and-differentiable-simulation-beyond-continuous-models/"/>
        <updated>2023-11-12T11:54:03.000Z</updated>
        <summary type="html"><![CDATA[I’m pleased to share a talk I gave in the DDPS seminar series!

Data-driven Physical Simulations (DDPS) Seminar Series
Abstract: The combination of scientific models into deep learning structures, commonly referred to as scientific machine learning (SciML), has made great strides in the last few years in incorporating models such as ODEs and PDEs into deep learning through differentiable simulation. However, the vast space of scientific simulation also includes models like jump diffusions, agent-based models, and more. Is SciML constrained to the simple continuous cases or is there a way to generalize to more advanced model forms? This talk will dive into the mathematical aspects of generalizing differentiable simulation to discuss cases like chaotic simulations, differentiating stochastic simulations like particle filters and agent-based models, and solving  ... READ MORE
The post DDPS Seminar Talk: Generalizing Scientific Machine Learning and Differentiable Simulation Beyond Continuous models appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[You Bet Your Life]]></title>
        <id>urn:uuid:71d51fbc-5910-4253-81fa-56366970fcac</id>
        <link href="https://www.lambdasierra.com/2023/100-year-plan/"/>
        <updated>2023-11-05T20:00:00.000Z</updated>
        <summary type="html"><![CDATA[WordPress.com is offering a 100-year plan. But why?]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Riff: A "mycelium-clj" for the Clojure ecosystem?]]></title>
        <id>https://www.evalapply.org/posts/mycelium-clj/</id>
        <link href="https://www.evalapply.org/posts/mycelium-clj/index.html"/>
        <updated>2023-10-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In a world of concrete objects, steel frameworks bring sense and order. In a forest of composable tools, libraries and open-ended schemas, it would be the mycelia. A frustrated yet optimistic man muses "Might such a thing come to be?".]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poor things]]></title>
        <id>https://jao.io/blog/poor-things.html</id>
        <link href="https://jao.io/blog/poor-things.html"/>
        <updated>2023-10-11T01:28:00.000Z</updated>
        <summary type="html"><![CDATA[I've read good things about the forthcoming movie, and liked what I saw in the
promotional video, but I cannot believe it's going to be near as good as this
novel. The book has too many nuances, literary tricks and wordplay and
paragraphs one has to read and reread, to be translated to a film. The latter
might be its own work of art, and that's fine. But if you're curious about the
movie, I'd definitely recommend to read this book. If you're not, I'd
definitely recommend to read this book. The writing is fresh and funny, in
typical Gray fashion, and the real themes of the book are universal and
exposed in a way that is very entertaining on the surface, but with a subtext
that gives you food for thought. I don't remember when was the last time that
I read two hundred pages of a book in a single day, time just flew, as they
say.

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[in no particular order]]></title>
        <id>https://jao.io/blog/in-no-particular-order.html</id>
        <link href="https://jao.io/blog/in-no-particular-order.html"/>
        <updated>2023-10-11T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[Interesting bits elsewhere:



Timeless Advice on Writing: The Collected Wisdom of Great Writers
Leaving Haskell behind — Infinite Negative Utility
Knuth: Ancient Babylonian Algorithms annotated/explained version.
Mastering Bloom Filters: Big Data Processing in Python
Older entries



Tags: sundry]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: integrating the IDE (feat. Clojure(Script))]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-ide-experience/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-ide-experience/index.html"/>
        <updated>2023-09-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The one in which we design a rich Integrated Development Environment (IDE) experience, using Clojure as our muse. Featuring Language Server Protocol (lsp-mode + clojure-lsp), clojure-mode, cider, and more! Buckle up and get a coffee.]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I've opened up a Patreon - Confession 93]]></title>
        <id>https://reader.tymoon.eu/article/432</id>
        <link href="https://reader.tymoon.eu/article/432"/>
        <updated>2023-08-25T12:45:54.000Z</updated>
        <summary type="html"><![CDATA[I've been debating opening up a Patreon for many years and I've always been hesitant about accepting donations from people, but I think it's finally time to change my mind on that!
Why make a Patreon now?
I've been working full time on Kandria and associated projects since 2020, and continue to do so today. All of the work that I've done as part of that has been released as open source software, including Kandria itself as well as the engine it runs on, Trial.
Since the release, I've mostly focused on support and the pre-pre-production of my next title, which primarily involves adding new features to Trial that are necessary to create a full-3D game. I can't yet announce much about the game itself, other than that it is a character action game, meaning it features third-person hack and sla…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selbstsamkeit - Confession 92]]></title>
        <id>https://reader.tymoon.eu/article/431</id>
        <link href="https://reader.tymoon.eu/article/431"/>
        <updated>2023-08-08T21:11:52.000Z</updated>
        <summary type="html"><![CDATA[If you've read any of my preceding entries I would expect it to come as no surprise to you to see me write "accepting who you are is really difficult." Though today I want to write about a few different facets of that than just the one you may be thinking about right now.
Naturally, for only recently coming out as trans, accepting that I am a woman is a large part of what's been coursing through my brain. I know with absolute certainty by now that I'm not wrong on this, and yet it's still not easy to fully come to terms with it and not just know it, but also understand it completely. I know that coming out as trans did not change me, but rather let me be who I've always been, even more so. Despite that it's still not obvious even to me which of the many fragments of my personality that wer…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Haunting Down Errors in Go]]></title>
        <id>https://hypirion.com/musings/haunting-down-errors-in-go</id>
        <link href="https://hypirion.com/musings/haunting-down-errors-in-go"/>
        <updated>2023-08-06T18:43:00.000Z</updated>
        <summary type="html"><![CDATA[Phantom types won't revolutionise your Go debugging experience, but it can make it slightly better! Here's one way they can help out.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: getting about]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-getting-about/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-getting-about/index.html"/>
        <updated>2023-08-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We want to maximize our ability to "stay in The Zone". So the aim is to create the fastest, smoothest, tightly integrated, and unobtrusive mechanism to get things done using the keyboard alone.]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Fibonacci Matrix]]></title>
        <id>https://ianthehenry.com/posts/fibonacci/</id>
        <link href="https://ianthehenry.com/posts/fibonacci/"/>
        <updated>2023-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[When you think about the Fibonacci sequence, you probably imagine a swirling vortex of oscillating points stretching outwards to infinity:



Okay, no, obviously you don’t. Yet.
When you think about the Fibonacci sequence, you probably flush with a latent rage when you remember that it is, more often than not, the way that we introduce the concept of “recursive functions” to new programmers, in some sort of cruel hazing intended to make it harder for them to ever appreciate how recursion can help them write better programs. Sometimes we even add memoization, and call it “dynamic programming,” in order to impress upon them that even the most trivial problems deserve complex, inefficient solutions.
Er, okay, you probably don’t think about the Fibonacci sequence much at all. It doesn’t, you k…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go-stly Access Rights]]></title>
        <id>https://hypirion.com/musings/go-stly-access-rights</id>
        <link href="https://hypirion.com/musings/go-stly-access-rights"/>
        <updated>2023-07-23T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[With phantom types, we can make a static access control system in Go that will detect errors and act as easy-to-read documentation. Here's how you do it.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: the midway refactor]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-midway-refactor/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-midway-refactor/index.html"/>
        <updated>2023-07-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Or the one in which we confront our elisp n00bishness and try to be better at using it. And we learn new habits to understand our Emacs better. Better late than never.]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Die Toteninsel - Confession 91]]></title>
        <id>https://reader.tymoon.eu/article/430</id>
        <link href="https://reader.tymoon.eu/article/430"/>
        <updated>2023-07-22T08:59:01.000Z</updated>
        <summary type="html"><![CDATA[I don't like sleeping. I like the idea of sleep, but the practise of it seems all too often fraught with issues for me. I do consider myself fortunate that I don't suffer from any major sleeping disabilities like insomnia, but my quality of sleep is nevertheless far from ideal, despite adhering to a rather strict and regular sleeping schedule.
I frequently grind my teeth during sleep, and so have started wearing a denture during the night. The denture makes things permanently uncomfortable, and I honestly don't know if it's the major cause of me grinding my teeth at this point. I definitely wouldn't be surprised at all if it exacerbates the problem. I don't know why I grind my teeth, though I figure that since most of the time I can't remember my dreams at all, and when I do, they're usual…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[User-defined Show Method in Julia]]></title>
        <id>https://scientificcoder.com/user-defined-show-method-in-julia</id>
        <link href="https://scientificcoder.com/user-defined-show-method-in-julia"/>
        <updated>2023-07-18T13:24:13.000Z</updated>
        <summary type="html"><![CDATA[I often find myself looking for a way to write custom display methods for Julia types on the REPL. Time to write it down in a short pragmatic blog post, for you and my future self.
What's the issue? When exploring on the Julia REPL or in notebooks, you display your own custom type, then it doesn't look always look the most informative. Let's say you have some type:
struct MyType    some_number::Float64    some_dict::Dictend
You can quickly make an object and display it.
julia> obj = MyType(4.0, Dict(:x => 5))MyType(4.0, Dict(:x => 5))
Okay... Julia basically shows the constructor of the object. I would like to see the field names, or maybe other information. Sometimes I want to see statistical properties for example, instead of the raw data.
As an alternative, to quickly see the field name…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JuliaCon Local Eindhoven 2023]]></title>
        <id>https://scientificcoder.com/juliacon-local-eindhoven-2023</id>
        <link href="https://scientificcoder.com/juliacon-local-eindhoven-2023"/>
        <updated>2023-07-11T07:23:12.000Z</updated>
        <summary type="html"><![CDATA[I am very happy to announce that I am an organizer of the first city-level JuliaCon conference. This will be a one-day event in Eindhoven on December 1st, organized together with the PyData Eindhoven conference on November 30th (the day before).
The website is live: https://juliacon.org/local/eindhoven2023/. You can submit proposals, book early-bird tickets and consider joining as a volunteer.
We named it "JuliaCon Local" to avoid any confusion with the yearly Global JuliaCon, which is typically also associated with a city name. The date is also positioned in the winter, to be out of sync with the summer schedule of the Global JuliaCon conferences. People who could not attend the Global JuliaCon now have another opportunity to meet like-minded Julians and computational scientists in the industry and academia.
My apologies if I notify you via multiple channels, including my blog, but we are really excited about growing our scientific computing community in the area. Please consider sharing the news with your network. Of course everyone on the planet is welcome to join our conference! Hopefully we are paving the path to more city-level JuliaCon conferences.]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to deploy algorithms anywhere?]]></title>
        <id>https://scientificcoder.com/how-to-deploy-algorithms-anywhere</id>
        <link href="https://scientificcoder.com/how-to-deploy-algorithms-anywhere"/>
        <updated>2023-07-09T12:41:35.000Z</updated>
        <summary type="html"><![CDATA[Let's say you are an incredible scientific programmer. You've got some pretty math, machine learning model or scientific computing code. And you want to give it to other users. Maybe even turn it into a real product and make a profit from your work. How do you "deploy" that piece of code? Most scientists do not think much about this problem at all, but it can have a great influence on how you should develop your code.
Basically, we need to take what you developed, turn it into something which can be given to the user, so they can install and use it in their computing environment. What to provide depends entirely on the environment of the user. So you'll first need to understand that: the so called "production environment", the environment in which your "product" or service will operate.

T…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PSA: Thread-local state is no longer recommended]]></title>
        <id>https://julialang.org/blog/2023/07/PSA-dont-use-threadid/</id>
        <link href="https://julialang.org/blog/2023/07/PSA-dont-use-threadid/"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[PSA: Thread-local state is no longer recommended; Common misconceptions about threadid() and nthreads()
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: package management]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-packages/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-packages/index.html"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Elpa, Melpa, git repo. Vendor package straight from source. It compiled? Fetch some more! Elpa, Melpa, git repo. In more adult terms, we learn to use use-package to fetch, install, initialise, configure useful packages that enhance our Emacs experience.]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Kind of REPL]]></title>
        <id>https://ianthehenry.com/posts/my-kind-of-repl/</id>
        <link href="https://ianthehenry.com/posts/my-kind-of-repl/"/>
        <updated>2023-07-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I want to tell you about an idea that has had a huge influence on the way that I write software. And I mean that in the literal sense: it’s changed the way that I write software; it’s re-shaped my development workflow.
The idea is this: you can write programs that modify themselves.
And I don’t mean macros or metaprogramming or anything fancy like that. I mean that you can write programs that edit their own source code. Like, the files themselves. The actual text files on disk that have your source code in them.
That’s not the whole idea, though. There’s more to it: you write programs that can edit themselves, and then you use that as your REPL.
Instead of typing something into a prompt and hitting enter and seeing the output on stdout, you type something into a file and hit some editor ke…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: init begins]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-init-begins/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-init-begins/index.html"/>
        <updated>2023-07-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The first action must, of course, be to colour the bikeshed and set some decent defaults.]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ciphers With Vector Symbolic Architectures]]></title>
        <id>http://gigasquid.github.io/blog/2023/07/02/ciphers-with-vector-symbolic-architectures/</id>
        <link href="http://gigasquid.github.io/blog/2023/07/02/ciphers-with-vector-symbolic-architectures/"/>
        <updated>2023-07-02T16:31:00.000Z</updated>
        <summary type="html"><![CDATA[A secret message inside a 10,000 hyperdimensional vector
We’ve seen in previous posts how we can encode data structures using Vector Symbolic Architectures in Clojure. This is an exploration of how we can use this to develop a cipher to transmit a secret message between two parties.
A Hyperdimensional Cipher
Usually, we would develop a dictionary/ cleanup memory of randomly chosen hyperdimensional vectors to represent each symbol. We could do this, but then sharing the dictionary as our key to be able to decode messages would be big. Instead, we could share a single hyperdimensional vector and then use the protect/ rotation operator to create a dictionary of the alphabet and some numbers to order the letters. Think of this as the initial seed symbol and the rest being defined as n+1.



1
…]]></summary>
        <author>
            <name>Squid's Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: Prelude]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy/index.html"/>
        <updated>2023-06-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Or, finally biting the bullet to redesigning my developerly and writerly experience, from the ground up, with Emacs.]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fruity Composable Design Patterns in Julia]]></title>
        <id>https://scientificcoder.com/fruity-composable-design-patterns-in-julia</id>
        <link href="https://scientificcoder.com/fruity-composable-design-patterns-in-julia"/>
        <updated>2023-06-23T12:18:08.000Z</updated>
        <summary type="html"><![CDATA[A design pattern is a repeatable solution to a common coding problem. Design patterns are not something beginner programmers typically think about a lot (that includes most scientists), they are probably focused on making their code work. At least that's what I did when I was a young programmer. At the other extreme such patterns can become a religion for people, where everything has to be a design pattern, or else the code is not considered good enough. However, people who make this mistake are not senior programmers either in my opinion. Senior programmers look for a balance between pure abstraction and simplicity (and many other requirements).
The Julia community has a special standing on design patterns: people don't really like them. In general the Julia community believes that design…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What have you been curious about?]]></title>
        <id>https://www.evalapply.org/posts/what-have-you-been-curious-about/</id>
        <link href="https://www.evalapply.org/posts/what-have-you-been-curious-about/index.html"/>
        <updated>2023-06-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Arguably a more interesting, revealing, and kinder question than "What are you curious about?"]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spectral Contexts in Go]]></title>
        <id>https://hypirion.com/musings/spectral-contexts-in-go</id>
        <link href="https://hypirion.com/musings/spectral-contexts-in-go"/>
        <updated>2023-06-18T17:00:00.000Z</updated>
        <summary type="html"><![CDATA[Go has phantom types, and we can use them to attach singletons to contexts. Here is a short post on how to do just that.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Summary of Julia Plotting Packages]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1723</id>
        <link href="https://www.stochasticlifestyle.com/summary-of-julia-plotting-packages/"/>
        <updated>2023-06-17T14:23:29.000Z</updated>
        <summary type="html"><![CDATA[This is a repost of my response on the Julia Discourse on this topic. I was asked to make a blog post so here you go!
The “Main” Plotting Packages
Here’s a quick summary of the most widely used plotting packages. I may have missed one, but I haven’t missed one that is very widely used.
Plots.jl is the most used. It’s probably the most documented, used in the most tutorials, and is used in many videos.

Pros: Its main draw is that it has a lot of plugins to other packages through its recipes system, which means that a lot of odd things like `plot(sol::ODESolution)` or showing the sparsity of a `BandedMatrix` just works. With all of these integrations, it’s normally what I would recommend first to newcomers since they will generally get the most done with the least work. It  ... READ MORE
The post Summary of Julia Plotting Packages appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A status update on Kandria, Shirakumo, and me]]></title>
        <id>https://reader.tymoon.eu/article/429</id>
        <link href="https://reader.tymoon.eu/article/429"/>
        <updated>2023-06-13T15:23:27.000Z</updated>
        <summary type="html"><![CDATA[Hello everyone. It's been a while since the last update. I apologise for the silence, things have slipped out of habit a little bit, and besides there's just been a lot of work on things that aren't easy to talk about. I'm still stuck in the R&D phase for the next game, and probably will continue to be there for a few more months before I can properly enter pre-production.
I've really needed some space away from Kandria for a while, too. I did still release patches in the meantime to fix some egregious problems and bring the source back up to date with the latest changes in the Trial engine. The final DLC update with official modding support is still in the works, but given how little response there's been to the level editor update I'm not making it a big priority.
The financials for Kand…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software Testing for Scientists]]></title>
        <id>https://scientificcoder.com/software-testing-for-scientists</id>
        <link href="https://scientificcoder.com/software-testing-for-scientists"/>
        <updated>2023-06-11T12:35:26.000Z</updated>
        <summary type="html"><![CDATA[I am currently reading the book "Software Engineering for Science." It is one giant complaint about how scientists are terrible at writing maintainable code for themselves. I won't go into all the pain, but I do recognize that pain deeply and have written about it elsewhere. Right now I am reading this book hoping to find solutions. So, what's the proposed solution? The book doesn't provide a simple answer, but one recurring topic is "testing, testing, TESTING!" So, let's talk about testing!
Why don't scientists test their code? Well, it turns out that most scientists do not have a software engineering background, yet they find themselves writing code and software for their work. Alternatively, they may collaborate heavily with software engineers, either in academia or in the industry. If …]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Finding Your Mojo]]></title>
        <id>https://mikeinnes.io/2023/06/06/mojo.html</id>
        <link href="https://mikeinnes.io/2023/06/06/mojo.html"/>
        <updated>2023-06-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Last month a startup called Modular released a new language called Mojo (not to be confused with the existing indigenous one). Based on Python and designed for ML hardware and models, Mojo’s goals (“the usability of Python with the performance of C”) coincide with those of the Julia language, so I’m interested to compare notes.[^1]]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software demos as deliberate acts of serious play]]></title>
        <id>https://www.evalapply.org/posts/software-demos/</id>
        <link href="https://www.evalapply.org/posts/software-demos/index.html"/>
        <updated>2023-06-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Making a software demo is a form of deliberate, serious play. An act that feeds our curiosity, inventiveness, and drive. It enlivens. It enriches. It entertains. And as we asymptotically approach the A.G.I. that's just around the corner, the capacity for deliberate, serious play will remain distinctively, deeply, deliciously human. Career software people like yours truly may please take note!]]></summary>
        <author>
            <name>Aditya Athalye writes and works here.</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stop Abbreviating!]]></title>
        <id>urn:uuid:a8d0b690-8938-4743-902a-c6978ba7ef0c</id>
        <link href="https://www.lambdasierra.com/2023/abbreviating/"/>
        <updated>2023-06-03T18:30:00.000Z</updated>
        <summary type="html"><![CDATA[A plea to technical writers: Please stop inventing abbreviations and acronyms without defining them.]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Nebulous Mysteries of Scientific Coding]]></title>
        <id>https://scientificcoder.com/the-nebulous-mysteries-of-scientific-coding</id>
        <link href="https://scientificcoder.com/the-nebulous-mysteries-of-scientific-coding"/>
        <updated>2023-06-03T11:56:48.000Z</updated>
        <summary type="html"><![CDATA[There is a concept in meta-rationality called nebulosity. I will look up the definition later, but in my own words nebulosity means the following:

Nebulosity: a concept or problem is ill-defined. You cannot describe it perfectly. The boundaries of the concept are unclear.

Nebulosity drives rational people crazy, its worse than NP-hard. Rational people need well defined problems. Even if you can prove that the problem cannot be solved, at least the problem itself should be known. But is this always possible?
You may have a problem that you can barely describe to yourself. You may feel some shape of it, intuitively in your mind, but you cannot explain it perfectly. You notice that it is especially difficult to explain the problem to people unknown to the domain around the problem. There is…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scientific Software Institutes]]></title>
        <id>https://scientificcoder.com/scientific-software-institutes</id>
        <link href="https://scientificcoder.com/scientific-software-institutes"/>
        <updated>2023-05-31T12:34:28.000Z</updated>
        <summary type="html"><![CDATA[Have you ever gone through life completely oblivious to something? I recently experienced that sensation when I stumbled upon an entire ecosystem of institutions, only learning about them after starting this blog. These organizations are dedicated to promoting better scientific software, which aligns with the mission of my blog. I wanted to know what's going on, so let's have a look at what's out there.
I noticed the names of the fields of "scientific software" vary a little, but I consider all of these roughly equivalent:

Scientific Software

Research Software Engineering (RSE)

Scientific Computing

Numerical Computing

Yes, there are differences between them, but all of them involve turning scientific knowledge into algorithms and software, and writing software to do scientific researc…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Structures, Data Modelling]]></title>
        <id>https://mikeinnes.io/2023/05/30/data.html</id>
        <link href="https://mikeinnes.io/2023/05/30/data.html"/>
        <updated>2023-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Most programming languages conflate the building of data structures and the modelling of information.]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL and Type Systems]]></title>
        <id>https://hypirion.com/musings/graphql-and-type-systems</id>
        <link href="https://hypirion.com/musings/graphql-and-type-systems"/>
        <updated>2023-05-28T15:45:00.000Z</updated>
        <summary type="html"><![CDATA[Like Go, GraphQL isn't at the forefront of type theory. Let's look at what I miss and whether it would be sensible to add them to the specification.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clean Code Tips for Scientists #1 - Reproducible Environments]]></title>
        <id>https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments</id>
        <link href="https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments"/>
        <updated>2023-05-24T12:03:44.000Z</updated>
        <summary type="html"><![CDATA[Author commentary: I am starting a "clean code" blog series with simple tips that you can integrate into your workflow. I often write long, complicated articles that try to teach a lot at once. This is an attempt to chop things up in bite-sized chunks. Note that the Clean Code books by Robert Martin are great, you should read them if you have time! If not, you can follow these short articles :)
If you've written a lot of scripts and shared some of those scripts with colleagues or others, then you probably encountered the problem that the code doesn't always work on their device, or produces different results. When this happens, people may quickly lose trust in your results and begin to ignore your work entirely. So making code reproducible is extremely important! Even if you are a scientis…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[One-Way Comments?]]></title>
        <id>urn:uuid:417d13a1-0e74-48b4-93da-715fbe03736e</id>
        <link href="https://www.lambdasierra.com/2023/building/comments"/>
        <updated>2023-05-20T20:00:00.000Z</updated>
        <summary type="html"><![CDATA[Social media killed comments. What's a lonely blogger to do?]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Julia 1.9 Highlights]]></title>
        <id>https://julialang.org/blog/2023/04/julia-1.9-highlights/</id>
        <link href="https://julialang.org/blog/2023/04/julia-1.9-highlights/"/>
        <updated>2023-05-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlights of the Julia 1.9 release.
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Scalable Inner-Source Ecosystem For Collaborative Development]]></title>
        <id>https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development</id>
        <link href="https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development"/>
        <updated>2023-05-17T12:29:08.000Z</updated>
        <summary type="html"><![CDATA[Three years ago, we decided to embrace the Julia programming language to solve the two language problem at our organization. We want our scientists to join forces with software engineers so that they can work on the same problems together. In our journey, I could have used more books or blogs to guide us on the following topics:

How to build and deploy software products with the Julia language?

How to create the seeds for an effective scientific software ecosystem?

This article is here to help you with the second topic, but I warn you that we had to figure out 1 and 2 at the same time. I intend to write more blog posts about the Julia productization aspects. Yet in the long term, I am betting on the ecosystem to radically improve our organization, so I consider that more important to bl…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[(Re-)Learning CSS as a Backend Dev]]></title>
        <id>urn:uuid:ba04a467-ff41-43b3-907d-2810c12af8bb</id>
        <link href="https://www.lambdasierra.com/2023/building/css"/>
        <updated>2023-05-16T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[My experience as a backend programmer trying to write my own CSS by hand]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Extreme Multi-Threading: C++ and Julia 1.9 Integration]]></title>
        <id>https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration</id>
        <link href="https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration"/>
        <updated>2023-05-11T14:10:09.000Z</updated>
        <summary type="html"><![CDATA[In this tutorial we demonstrate how to call Julia libraries with multiple threads from C++. With the introduction of Julia 1.9 in May 2023, the runtime can dynamically "adopt" external threads, enabling the integration of Julia libraries into multi-threaded codebases written in other languages, such as C++. This article is written in collaboration with Evangelos Paradas, the maestro of algorithm deployment at ASML. Evangelos has been responsible for heavily testing and debugging this multi-threading feature. I humbly repeated the final results after his many trial-and-error attempts and summarized everything for you in this article.
Julia in production
Julia is a general-purpose language designed for scientific and numerical computing, striking a balance between speed and simplicity. The a…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mastering Scientific Programming: Practical Tips and Tricks]]></title>
        <id>https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks</id>
        <link href="https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks"/>
        <updated>2023-05-10T09:46:17.000Z</updated>
        <summary type="html"><![CDATA[Scientific programming involves writing code to solve scientific problems. This can range from simulating complex physical phenomena to analyzing large datasets. While such software is incredibly important, it can be challenging for scientists to learn all the required software development skills. However, by gradually adding specific tricks into your workflow, you can enhance your coding efficiency and effectiveness.
Software skills are important for everyone these days, including scientists. I see certain common risks if you do not spend effort on your code quality:

Incorrect code leads to incorrect results, which means you may have to redo work or even risk damaging your reputation.

Unreproducible code means others, including your future self, cannot verify your work, nor built on top…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to solve the two language problem?]]></title>
        <id>https://scientificcoder.com/how-to-solve-the-two-language-problem</id>
        <link href="https://scientificcoder.com/how-to-solve-the-two-language-problem"/>
        <updated>2023-05-08T07:41:53.000Z</updated>
        <summary type="html"><![CDATA[My professional obsession is solving the Two Culture Problem. How can scientists optimally join forces with software engineers and their principles, so that we can work on the same problems together? How to accelerate the cycle from idea to product? The Two Culture Problem requires a solution to the related Two Language Problem, which has a technical nature. A solution to the technical problem does not guarantee a solution to the organizational problem, but when it comes to engineering cultures you first need to prove the technical solution before you can even begin to tackle the social implications. I have a strong opinion on the best technical solution, but let's review all our options.

As far as I can tell, we have the following alternatives:

Accept the status quo: use a slow and a fa…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Production-ready code for scientists:  3 lessons learned]]></title>
        <id>https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned</id>
        <link href="https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned"/>
        <updated>2023-05-04T09:43:36.000Z</updated>
        <summary type="html"><![CDATA[How do you become a great scientific coder? To understand this, I want to ask others about their journey and share their lessons with you. This post is a collaboration with Keith Myerscough, a mathematical consultant and senior engineer, who helped me with setting up our internal Julia language ecosystem.
Matthijs asked me to write a guest post about what skills are needed to become a great scientific coder. He asked me because I assisted a team of scientists in adopting Julia for their research and development work. I am keen to help: I empathize with people who come up with great ideas but have a hard time wrapping these up into something that can be turned into a product. Even under the assumption that code will be extensively improved upon by others with more software knowledge, that f…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
</feed>
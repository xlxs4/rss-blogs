<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2023-04-28T00:29:07.443Z</id>
    <title>A curated list of ramblings</title>
    <updated>2023-04-28T00:29:07.443Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[I don't want to go to Chel-C]]></title>
        <id>https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html</id>
        <link href="https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html"/>
        <updated>2023-04-28T00:29:04.848Z</updated>
        <summary type="html"><![CDATA[When "simple" programming languages aren't.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The one-more-re-nightmare compiler]]></title>
        <id>https://applied-langua.ge/posts/omrn-compiler.html</id>
        <link href="https://applied-langua.ge/posts/omrn-compiler.html"/>
        <updated>2023-04-28T00:29:04.742Z</updated>
        <summary type="html"><![CDATA[A pile of regular expression derivatives, myths about Ediware, SIMD instruction selection and using the Common Lisp compiler as a backend for a regular expression compiler.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The poverty of "post-open" source]]></title>
        <id>https://applied-langua.ge/posts/the-poverty-of-post-open-source.html</id>
        <link href="https://applied-langua.ge/posts/the-poverty-of-post-open-source.html"/>
        <updated>2023-04-28T00:29:04.714Z</updated>
        <summary type="html"><![CDATA[Post-open source falls short on what improvements it was supposed to make. It prefigures a boring future, mostly because it carries on productivist logic, and makes programming even more of a difficult and esoteric tool. Capitalism isn't the only problem threatening peer production; it is rather threatened by more general principles, which even radicals can believe.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Lisp Curse Redemption Arc]]></title>
        <id>https://applied-langua.ge/posts/lisp-curse-redemption-arc.html</id>
        <link href="https://applied-langua.ge/posts/lisp-curse-redemption-arc.html"/>
        <updated>2023-04-28T00:29:04.690Z</updated>
        <summary type="html"><![CDATA[Pondering marketing strategies, and how we aren't supposed to be productive in Common Lisp.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The next 700 virtual machines]]></title>
        <id>https://applied-langua.ge/posts/the-next-700-virtual-machines.html</id>
        <link href="https://applied-langua.ge/posts/the-next-700-virtual-machines.html"/>
        <updated>2023-04-28T00:29:04.685Z</updated>
        <summary type="html"><![CDATA[Virtual machine will eat themselves, by being similar enough that most can subsume each other. This can be furthered by making it easier to target abstract machines, and using object capabilities to allow cohabitation of languages and incremental extension to languages.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zero Feet: a proposal for a systems-free Lisp]]></title>
        <id>https://applied-langua.ge/posts/zero-feet.html</id>
        <link href="https://applied-langua.ge/posts/zero-feet.html"/>
        <updated>2023-04-28T00:29:04.680Z</updated>
        <summary type="html"><![CDATA[A systems language is a collection of things that don't fit into a modular language. There shouldn't be one.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[structure and interpretation of flutter]]></title>
        <id>https://wingolog.org/archives/2023/04/26/structure-and-interpretation-of-flutter</id>
        <link href="https://wingolog.org/archives/2023/04/26/structure-and-interpretation-of-flutter"/>
        <updated>2023-04-26T13:50:01.000Z</updated>
        <summary type="html"><![CDATA[Good day, gentle hackfolk.  Like an
 fiddler I would
appear to be deep in the groove, playing endless variations on a theme,
in this case mobile application frameworks.  But one can only recognize
novelty in relation to the familiar, and today's note is a departure: we
are going to look at , a UI toolkit based
not on JavaScript but on the  language.old-timeFlutterDart
Where to start, even?  The problem is big enough that I'll
approach it from three different angles: from the past, from the top,
and from the bottom.
With the other frameworks we looked at, we didn't have to say much about
their use of JavaScript.  JavaScript is an obvious choice, in 2023 at
least: it is ubiquitous, has high quality implementations, and as a
language it is quite OK and progressively getting better.  Up to now…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automate Your Code Quality In Julia]]></title>
        <id>https://scientificcoder.com/automate-your-code-quality-in-julia</id>
        <link href="https://scientificcoder.com/automate-your-code-quality-in-julia"/>
        <updated>2023-04-26T07:47:00.000Z</updated>
        <summary type="html"><![CDATA[Code quality is a topic in Julia that I believe deserves more attention from both users and developers. The Julia language originated in academia and focused heavily on helping scientists write better code, which is going great and deserves much praise! However, to onboard more software engineers and professional organizations we're going to have to invest even further into code quality and automated code quality tools and other methods such as used in the field of "quality assurance". In this article I'll explore the current state in the Julia ecosystem.
At our workplace we have investigated the following tools and practices. I'll start from generic practices and then move on to more advanced tools.
Package structure
Unit testing with Pkg.jl
Automated testing and Continuous Integration (C…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[structure and interpretation of nativescript]]></title>
        <id>https://wingolog.org/archives/2023/04/24/structure-and-interpretation-of-nativescript</id>
        <link href="https://wingolog.org/archives/2023/04/24/structure-and-interpretation-of-nativescript"/>
        <updated>2023-04-24T09:10:58.000Z</updated>
        <summary type="html"><![CDATA[Greetings, hackers tall and hackers small!
We're only a few articles in to this series on mobile application development frameworks, but I feel like we are already well into our journey.  We started our trip through the design space with a look at 
,
which defines its user interface in terms of the web platform, and only
calls out to iOS or Android native features as needed.  We proceeded
on to ,
which moves closer to native by rendering to platform-provided UI
widgets, layering a cross-platform development interface on top.Ionic /
CapacitorReact
Native
Today's article takes an in-depth look at , whose point in the design space is further on the road towards
the platform, unabashedly embracing the specificities of the API
available on iOS and Android, exposing these interfaces directly to …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[structure and interpretation of react native]]></title>
        <id>https://wingolog.org/archives/2023/04/21/structure-and-interpretation-of-react-native</id>
        <link href="https://wingolog.org/archives/2023/04/21/structure-and-interpretation-of-react-native"/>
        <updated>2023-04-21T08:20:17.000Z</updated>
        <summary type="html"><![CDATA[Hey hey!  Today's missive continues exploring the space of JavaScript
and mobile application development.
Yesterday we looked into , giving a brief
structural overview of what Capacitor apps look like under the hood and
how this translates to three aspects of performance: startup latency, jank,
and peak performance.  Today we'll apply that same approach to another
popular development framework, .Ionic / CapacitorReact Native
I don't know about you, but I find that there is so much marketing smoke
and lights around the whole phenomenon that is React and React Native
that sometimes it's hard to see what's actually there.  This is
compounded by the fact that the programming paradigm espoused by React
(and its "native" cousin that we are looking at here) is so effective at
enabling JavaScript …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning OCaml: Quoted String Literals]]></title>
        <id>https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/</id>
        <link href="https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/"/>
        <updated>2023-04-20T13:23:00.000Z</updated>
        <summary type="html"><![CDATA[While learning OCaml I’ve noticed one curious feature - it has two types of string literals. The first type are the common and quite familiar “double-quoted string literals” (or perhaps simply “string literals”?):]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[structure and interpretation of capacitor programs]]></title>
        <id>https://wingolog.org/archives/2023/04/20/structure-and-interpretation-of-capacitor-programs</id>
        <link href="https://wingolog.org/archives/2023/04/20/structure-and-interpretation-of-capacitor-programs"/>
        <updated>2023-04-20T10:20:32.000Z</updated>
        <summary type="html"><![CDATA[Good day, hackers!  Today's note is a bit of a departure from compilers
internals.  A client at work recently asked me to look into
cross-platform mobile application development and is happy for the
results to be shared publically.  This, then, is the first in a series
of articles.
I'll be starting by taking a look at
/,
,
,
/, and then a
mystery guest.  This article will set the stage and then look into
Ionic/Capacitor.IonicCapacitorReact NativeNativeScriptFlutterDart
The angle I am taking is, if you were designing a new mobile operating
system that uses JavaScript as its native application development
language, what would it mean to adopt one of these as your primary app
development toolkit?  It's a broad question but I hope we can come up
with some useful conclusions.
I'm going to appro…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Art of Multiple Dispatch]]></title>
        <id>https://scientificcoder.com/the-art-of-multiple-dispatch</id>
        <link href="https://scientificcoder.com/the-art-of-multiple-dispatch"/>
        <updated>2023-04-20T09:01:49.000Z</updated>
        <summary type="html"><![CDATA[I love thinking visually by drawing doodles and schematics for my work. It's one of my favorite things to do, next to coding. When working with the Julia language, one visualization I enjoy is seeing the type space of a method that you are dispatching on. Normally I do this in my mind's eye, but let me clarify this by drawing some actual figures.
To start with the basics; Julia has functions and methods. A function is simply the name, like push! or read . Methods are specific definitions of a function, for certain types of arguments. Take for example push!(s::Set, x) or read(io::IO) . From an object-oriented perspective you could say that methods are instances of functions.

For any given method you can consider the dispatching as slicing a part of the entire possible type space of that gi…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vindarel: How to parse command line arguments in Common Lisp (bis)]]></title>
        <id>https://lisp-journey.gitlab.io/blog/how-to-parse-command-line-arguments-in-common-lisp/</id>
        <link href="https://lisp-journey.gitlab.io/blog/how-to-parse-command-line-arguments-in-common-lisp/"/>
        <updated>2023-04-19T09:44:56.000Z</updated>
        <summary type="html"><![CDATA[In 2018, I wrote a blog post and the Cookbook page on how to build Common Lisp binaries, and how to parse command-line arguments with the unix-opts library.
But since then, new libraries were created an they are pretty good! They are simpler to use, and have much more features. I had a good experience with Clingon: its usage is clear, its documentation is very good, it is very flexible (it has hooks and generic functions waiting to have an :around method) and @dnaeon is not at his first great CL project.
You might give adopt a look, or maybe defmain though I felt a little something was missing.
So I updated the guide to use Clingon. Let’s go.
=> This article is best read on the Common Lisp Cookbook where it will receive updates.
As a reminder to this often-asked question, my SBCL standalon…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[sticking point]]></title>
        <id>https://wingolog.org/archives/2023/04/18/sticking-point</id>
        <link href="https://wingolog.org/archives/2023/04/18/sticking-point"/>
        <updated>2023-04-18T20:23:49.000Z</updated>
        <summary type="html"><![CDATA[Good evening, gentle readers.  A brief note tonight, on a sticky place.
See, I have too many projects right now.
In and of itself this is not so much of a problem as a condition. I know
my limits; I keep myself from burning out by shedding load, and there is
a kind of priority list of which projects keep adequate service levels.
First come the tiny humans that are in my care who need their butts
wiped and bodies translated to and from school or daycare and who --
well you know the old Hegelian trope, that the dialectic crank of
history doesn't turn itself, that it takes actions from people to
synthesize the thesis and the antithesis, and that even History itself
isn't always monotonic; in the same way, bedtime is a reality,
there are the material conditions of sleepiness and
you're-gonna-b…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Target Audience]]></title>
        <id>https://scientificcoder.com/my-target-audience</id>
        <link href="https://scientificcoder.com/my-target-audience"/>
        <updated>2023-04-18T11:46:15.000Z</updated>
        <summary type="html"><![CDATA[What kind of people do I have in mind while writing this blog? People who share my professional mission of course! What is that mission you ask? Let me elaborate.
From Research to Engineering
I am a scientist who danced with startups and moved into industry. I've spend years doing research, and years doing software product development. During those years I have gotten slightly frustrated with the process of moving ideas from research to production, primarily in my favorite field of scientific computing.
The typical problem is that the time from research to production can be long, often spanning multiple years per project, and the process can be error prone. Some common smaller issues I see arising in many of our projects:
Unreproducible, unexplainable scripts or notebooks in research
Effor…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tim Bradshaw: Something unclear in the Common Lisp standard]]></title>
        <id>https://www.tfeb.org/fragments/2023/04/18/something-unclear-in-the-common-lisp-standard/?utm_source=lisp&amp;utm_medium=RSS</id>
        <link href="https://www.tfeb.org/fragments/2023/04/18/something-unclear-in-the-common-lisp-standard/?utm_source=lisp&amp;utm_medium=RSS"/>
        <updated>2023-04-18T09:53:46.000Z</updated>
        <summary type="html"><![CDATA[There is what I think is a confusion as to bound declarations in the Common Lisp standard. I may be wrong about this, but I think I’m correct.
Bound and free declarations
Declarations in Common Lisp can be either bound or free:
a bound declaration appears at the head of a binding form and applies to a variable or function binding made by that form;
a free declaration is any declaration which is not bound.


There are declarations which do not apply to bindings, such as optimize: these are always free.
Examples of bound and free declarations
In the form
(let ((x 1))
  (declare (type integer x))
  ...)
the declaration is bound and applies to the binding of x. In the form
(let ((/x/ 1))
  (declare (special /x/)
           (optimize (speed 3)))
  ...)
the special declaration is bound and appli…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Generalized Macros]]></title>
        <id>https://ianthehenry.com/posts/generalized-macros/</id>
        <link href="https://ianthehenry.com/posts/generalized-macros/"/>
        <updated>2023-04-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been writing a lot of Janet lately, and I’ve been especially enjoying my time with the macro system.
Janet macros are Common Lisp-flavored unhygienic gensym-style macros. They are extremely powerful, and very easy to write, but they can be pretty tricky to get right. It’s easy to make mistakes that lead to unwanted variable capture, or to write macros that only work if they’re expanded in particular contexts, and it can be pretty difficult to detect these problems ahead of time.
So people have spent a lot of time thinking about ways to write macros more safely – sometimes at the cost of expressiveness or simplicity – and almost all recent languages use some sort of hygienic macro system that defaults to doing the right thing.
But as far as I know, no one has approached macro systems f…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why this blog?]]></title>
        <id>https://scientificcoder.com/why-this-blog</id>
        <link href="https://scientificcoder.com/why-this-blog"/>
        <updated>2023-04-16T17:27:18.000Z</updated>
        <summary type="html"><![CDATA[My goal in life is to follow my curiosity and help others with the knowledge I uncover. A solid way to help people is to reflect on the last years and think about what would have helped your past self. In my case, I have been busy trying to develop and deploy numerical computing applications with the Julia language. One thing that I found lacking was good material on how to do numerical computing professionally in the industry, something I learned is sometimes called "scientific software engineering". A book or blog about large-scale development and deployment into production systems would have helped me tremendously. I had to learn most things the hard way through trial and error.
Since what I need doesn't exist, we will have to make it exist! That's this blog!
I have been blogging about …]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building Foundations]]></title>
        <id>urn:uuid:f9aaf15d-37c1-4a8e-bab7-9ccd0b60d12c</id>
        <link href="https://www.lambdasierra.com/2023/building/"/>
        <updated>2023-04-13T22:00:42.000Z</updated>
        <summary type="html"><![CDATA[On starting a new blog, abandoning the stability of WordPress for the creative freedom of do-it-yourself.]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Janet?]]></title>
        <id>https://ianthehenry.com/posts/why-janet/</id>
        <link href="https://ianthehenry.com/posts/why-janet/"/>
        <updated>2023-04-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I never thought it could happen to me. I mean, parentheses? In this day and age? But for the past couple years, my go-to programming language for fun side projects has been a little Lisp dialect called Janet.
(print "hey janet")

I like Janet so much that I wrote an entire book about it, and put it on The Internet for free, in the hopes of attracting more Janetors to the language.
I think you should read it, but I know that you don’t believe me, so I’m going to try to convince you. Here’s my attempt at a sales pitch: here is why you – you of all people – should give Janet a chance.
Janet is simple
Janet is an imperative language with first-class functions, a single namespace for identifiers, and lexical block scoping. The core of the language is very small, consisting of only eight instruc…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Updating the Bundler Version Specified in Gemfile.lock]]></title>
        <id>https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/</id>
        <link href="https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/"/>
        <updated>2023-04-09T16:29:00.000Z</updated>
        <summary type="html"><![CDATA[You might have noticed one change introduced with Bundler 2.3 - it now requires you to run the version of Bundler that’s specified in your Gemfile.lock.1 This means that occasionally you might see something like this: https://bundler.io/blog/2022/01/23/bundler-v2-3.html &#8617;]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blog Comments are Back]]></title>
        <id>https://batsov.com/articles/2023/04/09/blog-comments-are-back/</id>
        <link href="https://batsov.com/articles/2023/04/09/blog-comments-are-back/"/>
        <updated>2023-04-09T15:57:00.000Z</updated>
        <summary type="html"><![CDATA[This is going to be one super short post.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cold restart whole system after total outage]]></title>
        <id>https://www.evalapply.org/posts/cold-restart-total-outage/</id>
        <link href="https://www.evalapply.org/posts/cold-restart-total-outage/index.html"/>
        <updated>2023-04-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA["What are folks’ views on systems so large where cold-starting the whole system is almost impossible?"... — M'colleague In A Slackroom Next Door.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Janet for Mortals]]></title>
        <id>https://ianthehenry.com/posts/janet-for-mortals/</id>
        <link href="https://ianthehenry.com/posts/janet-for-mortals/"/>
        <updated>2023-04-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I wrote a book.
It’s called Janet for Mortals, and it’s free, and it’s on the internet, and you can read it right now.
And you should read it right now, instead of reading this blog post, because this blog post is not very interesting if you haven’t read the book. Heck, this blog post is not very interesting even if you have read the book. This blog post is a thinly-veiled promotion for my book to slip into my newsletter and RSS feed, with just enough additional content to pad it out to the length of a real post.
The book is about Janet, a programming language that I have written about before. I’ve been using Janet a lot lately, and I’ve been having a lot of fun with it, and I think that more people should know about it so that they can have fun with it too. People like you.
I’m not really…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nicolas Hafner: &#27425;&#12399;...&#20309;&#65311; - April Kandria Update]]></title>
        <id>https://reader.tymoon.eu/article/427</id>
        <link href="https://reader.tymoon.eu/article/427"/>
        <updated>2023-04-03T10:48:00.000Z</updated>
        <summary type="html"><![CDATA[Another month gone by. There's no major updates this month, since we just had the level editor release last month. However, there is a somewhat major update coming out next week!
You may have guessed from the title, but we're adding Japanese localisation to the game! It'll release on Wednesday, 12th of April. As someone that's been trying to learn Japanese for a long time, this is another step in the development that I've been looking forward to very much.

I'm also really glad that we can release this already, so it'll be well out by the time I visit Tokyo Game Show in September!
Other news
With the level editor and the beginning of the modding support already in place, I've taken a bit of a step back from Kandria development for a bit, and instead focused on working on a lot of other stuff that's been way overdue, like moving and upgrading our servers, taking care of my mental health, and starting work on pre-pre-production for the next game.
However, Kandria development is not yet done. The second and final major update with an official modding API is still coming. I don't have a release date for that yet, so I hope you remain patient!
In the meantime, my paper for the European Lisp Symposium in Amsterdam was accepted, so I will be presenting Kandria there. The paper is quite technical, but if you're interested in Common Lisp, it might be worth a read. And if you're going to be in Amsterdam, let me know. I'd be happy to chat!
That's it for now
A rather short update this month, but if you're interested in the details of the pre-pre-production process, come on hang out in the Shirakumo channel with the rest of us! We're discussing all the improvements to Trial there.]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tim Bradshaw: Measuring some tree-traversing functions]]></title>
        <id>https://www.tfeb.org/fragments/2023/03/26/measuring-some-tree-traversing-functions/?utm_source=lisp&amp;utm_medium=RSS</id>
        <link href="https://www.tfeb.org/fragments/2023/03/26/measuring-some-tree-traversing-functions/?utm_source=lisp&amp;utm_medium=RSS"/>
        <updated>2023-03-26T09:25:50.000Z</updated>
        <summary type="html"><![CDATA[In a previous article my friend Zyni wrote some variations on a list-flattening function, some of which were ‘recursive’ and some of which ‘iterative’, managing the stack explicitly. We thought it would be interesting to see what the performance differences were, both for this function and a more useful variant which searches a tree rather than flattening it.
What we measured
The code we used is here1. We measured four variations of each of two functions.
List flattening
All these functions use collecting to build their results forwards. They live in flatten-variants.lisp.
flatten/implicit-stack works in the obvious recursive way, with an implicit stack. This uses iterate to express the local recursive function.
flatten/explicit-stack uses an explicit stack (called agenda in the code) repr…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tim Bradshaw: The absurdity of stacks]]></title>
        <id>https://www.tfeb.org/fragments/2023/03/25/the-absurdity-of-stacks/?utm_source=lisp&amp;utm_medium=RSS</id>
        <link href="https://www.tfeb.org/fragments/2023/03/25/the-absurdity-of-stacks/?utm_source=lisp&amp;utm_medium=RSS"/>
        <updated>2023-03-25T10:57:19.000Z</updated>
        <summary type="html"><![CDATA[Very often people regard the stack as a scarce, expensive resource, while the heap is plentiful and very cheap. This is absurd: the stack is memory, the heap is also memory. Deforming programs so they are ‘iterative’ in order that they do not run out of the stack we imagine to be so costly is ridiculous: if you have a program which is inherently recursive, let it be recursive.
In a previous article my friend Zyni wrote some variations on a list-flattening function1, some of which were ‘recursive’ and some of which ‘iterative’. Of course, the ones which claim to be iterative are, in fact, recursive: any procedure which traverses a recursively-defined data structure such as a tree of conses is necessarily recursive. The ‘iterative’ versions just use an explicitly-maintained stack rather than…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[a world to win: webassembly for the rest of us]]></title>
        <id>https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us</id>
        <link href="https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us"/>
        <updated>2023-03-20T09:06:42.000Z</updated>
        <summary type="html"><![CDATA[Good day, comrades!
Today I'd like to share the good news that WebAssembly is finally coming
for the rest of us weirdos.
This is a transcript-alike of a talk that I gave last week at , a gathering in Berlin of
people that are using "technologies beyond the mainstream" to get things
done: Haskell, Clojure, Elixir, and so on.  PDF slides , and I'll link the video too when it becomes available.BOB
2023here
WebAssembly: what even is it?  Not a programming language that
you would write software in, but rather a compilation target: a sort of
assembly language, if you will.
If you look at what the characteristics of WebAssembly are as an
abstract machine, to me there are two main areas in which it is an
advance over the alternatives.
Firstly it's "close to the metal" -- if you compile for example…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How are OCaml Programmers Called?]]></title>
        <id>https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/</id>
        <link href="https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/"/>
        <updated>2023-03-20T08:02:00.000Z</updated>
        <summary type="html"><![CDATA[Ruby programmers are commonly called Rubyists. Python programmers are often called Pythonistas. Lisp programmers are widely known as Lispers. Clojure programmers are sometimes called Clojurians.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nicolas Martyanoff: Counting lines with Common Lisp]]></title>
        <id>https://www.n16f.net/blog/counting-lines-with-common-lisp/</id>
        <link href="https://www.n16f.net/blog/counting-lines-with-common-lisp/"/>
        <updated>2023-03-17T18:00:00.000Z</updated>
        <summary type="html"><![CDATA[A good line counting program has two features: it only counts non-empty lines
to get a fair estimate of the size of a project, and it groups line counts by
file type to help see immediately which languages are used.
A long time ago I got frustrated with two well known line counters.
Sloccount spits out multiple strange Perl
warnings about locales, and most of the output is a copyright notice and some
absurd cost estimations. Cloc has fourteen
Perl packages as dependencies. Writing a simple line counter is an interesting
exercise; at the time I was discovering Common Lisp, so I wrote my own
version.
I made a few changes years after years, but most of the code stayed the same.
I thought it would be interesting to revisit this program and present it part
by part as a demonstration of how you …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tim Bradshaw: Variations on a theme]]></title>
        <id>https://www.tfeb.org/fragments/2023/03/13/variations-on-a-theme/?utm_source=lisp&amp;utm_medium=RSS</id>
        <link href="https://www.tfeb.org/fragments/2023/03/13/variations-on-a-theme/?utm_source=lisp&amp;utm_medium=RSS"/>
        <updated>2023-03-13T12:36:33.000Z</updated>
        <summary type="html"><![CDATA[My friend Zyni wrote a comment to a thread on reddit with some variations on a list-flattening function. We’ve since spent some time thinking about things related to this, which is written up in a following article. Here is her comment so the following article can refer to it. Other than notes at the end the following text is Zyni’s, not mine.
The reddit comment by Zyni
First of all we all know that CL does not promise to optimize tail recursion: means that tail recursive program may generate recursive not iterative process. So recursive program in CL even if tail recursive is not safe on data of unknown size, assuming stack is limited.
But let us assume as good implementations do that tail recursion is optimized in implementation (no need for general tail calls here but is obvious nice th…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[AWS API in Org Mode with Clojure]]></title>
        <id>urn:uuid:5960d9ab-f082-4b72-b3a0-7753d56d2008</id>
        <link href="https://www.lambdasierra.com/2023/aws-org/"/>
        <updated>2023-03-12T22:30:00.000Z</updated>
        <summary type="html"><![CDATA[AWS API docs from the Cognitect AWS Client library as Emacs Org Mode]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[pre-initialization of garbage-collected webassembly heaps]]></title>
        <id>https://wingolog.org/archives/2023/03/10/pre-initialization-of-garbage-collected-webassembly-heaps</id>
        <link href="https://wingolog.org/archives/2023/03/10/pre-initialization-of-garbage-collected-webassembly-heaps"/>
        <updated>2023-03-10T09:20:33.000Z</updated>
        <summary type="html"><![CDATA[Hey comrades, I just had an idea that I won't be able to work on in the
next couple months and wanted to release it into the wild.  They say if
you love your ideas, you should let them go and see if they come back to
you, right?  In that spirit I abandon this idea to the woods.
Basically the idea is , but for modules
that store their data on the GC-managed heap instead of just in linear
memory.Wizer-like pre-initialization of WebAssembly
modules
Say you have a WebAssembly module with .
It might look like this:GC
types
You define some struct and array types, there are some global variables,
and some functions to actually do the work.  (There are probably also
tables and other things but I am simplifying.)
If you consider the object graph of an instantiated module, you will
have some set of …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Marco Antoniotti: The LETV and LETV* Macros]]></title>
        <id>http://within-parens.blogspot.com/2023/03/the-letv-and-letv-macros.html</id>
        <link href="http://within-parens.blogspot.com/2023/03/the-letv-and-letv-macros.html"/>
        <updated>2023-03-09T20:11:00.000Z</updated>
        <summary type="html"><![CDATA[Hello,
It has been a long time since I posted something here.  I have been busy with my day job and bogged down in a major rewrite of something (more on this hopefully very soon now (tm)) that is full of rabbit's holes.
I was able to get out of one of these rabbit's holes with this little hack I cooked up that allows you to, possibly, write more concise code.
This little hack introduces two handy Common Lisp
macros, LETV and LETV* that allow you to mix
regular LET and MULTIPLE-VALUE-BIND forms in
a less verbose way.  The amount of indentation needed is also reduced.
 

The syntax of LETV (or LETV*) is very
"loopy", with a nod to SML/OCaml/F#/Haskell/Julia.  The current syntax
  is the following:
    letv     ::= 'LETV' [vars] [IN [body]]
    letvstar ::= 'LETV*' [vars] [IN [body]]

    var…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nicolas Hafner: Level Editor Update is Live!]]></title>
        <id>https://reader.tymoon.eu/article/425</id>
        <link href="https://reader.tymoon.eu/article/425"/>
        <updated>2023-03-08T13:47:42.000Z</updated>
        <summary type="html"><![CDATA[The first major update for Kandria is now live on all platforms! It includes the level editor, a modding system, some new sample levels, and bugfixes!
Level Editor
The level editor received a big overhaul and is now a lot more accessible. There's also official documentation now to help get you started and explain all the tools and shortcuts available. If you want to dig in, just update your game and navigate to Mod Manager > Create Mod, which should place you directly into the editor in a new world of your own!
Sharing Mods
You can play levels made by others and download them directly from within the game. To browse existing levels, simply go to Mod Manager > Discover. From there you can select and install mods. Once installed, you can play their world under the Worlds tab.
We've provided …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nicolas Hafner: Next Kandria Update on March 8th!]]></title>
        <id>https://reader.tymoon.eu/article/424</id>
        <link href="https://reader.tymoon.eu/article/424"/>
        <updated>2023-03-01T13:56:17.000Z</updated>
        <summary type="html"><![CDATA[Let's get the important news out of the way: the next major update for Kandria will launch on Wednesday, March 8th, at 15:00 CET. The update will include a number of improvements, new features, more content, and a community event!
Level Editing
The biggest part of the update is, no doubt, the polished level editor. The editor has always been a part of Kandria since release, but now it's nicely polished and much easier to use!

I've also included documentation to make it much easier for you to get a handle on how the editor works and how to get started with using it. I'm very excited to see what people can come up with!
And yes, the entire Kandria world was created in this editor, so it is fully capable of creating some very complex levels!
Partial Modding Support
But, the editor itself is …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deus Ex Bing]]></title>
        <id>https://mikeinnes.io/2023/02/18/bing.html</id>
        <link href="https://mikeinnes.io/2023/02/18/bing.html"/>
        <updated>2023-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Conversations with ChatGPT, a recently released chatbot, reportedly cost its inventors at OpenAI a few cents each. By Internet standards this is shockingly expensive. Though it’s touted as the future of the search engine, any company scaling the technology up to the world’s 10 billion or so daily queries will face suffocating costs. The milestone for Artificial Intelligence may be that it’s now about as expensive as the real thing: Amazon’s mechanical turk service (which Jeff Bezos called “artificial artificial intelligence”) also pays its human labourers a few cents per question-response task.]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bad Matrix]]></title>
        <id>https://www.evalapply.org/posts/bad-matrix/</id>
        <link href="https://www.evalapply.org/posts/bad-matrix/index.html"/>
        <updated>2023-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A while ago, someone in the Recurse Center nerdiverse decided we needed a "Bad Print". They made one. Things escalated. Bad Matrix happened.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[whippet: towards a new local maximum]]></title>
        <id>https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum</id>
        <link href="https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum"/>
        <updated>2023-02-07T13:14:37.000Z</updated>
        <summary type="html"><![CDATA[Friends, you might have noted, but over the last year or so I really
caught the GC bug.  Today's post sums up that year, in the form of a
talk I gave yesterday at FOSDEM.  It's long!  If you prefer video, you
can have a look instead to the .at the FOSDEM event
page
So the context for the whole effort is that Guile has this part of its
implementation which is in C.  It also exposes a lot of that
implementation to users as an API.
So what contraints does this kind of API impose on the garbage
collector?
Let's start by considering the simple  call above.  In a
garbage-collected environment, the GC is responsible for reclaiming
unused memory.  How does the GC know that the result of a 
call is in use?consscm_cons
Generally speaking there are two main strategies for automatic memory
management.…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[three approaches to heap sizing]]></title>
        <id>https://wingolog.org/archives/2023/01/27/three-approaches-to-heap-sizing</id>
        <link href="https://wingolog.org/archives/2023/01/27/three-approaches-to-heap-sizing"/>
        <updated>2023-01-27T21:45:03.000Z</updated>
        <summary type="html"><![CDATA[How much memory should a program get?  Tonight, a quick note on sizing
for garbage-collected heaps.  There are a few possible answers,
depending on what your goals are for the system.
Sometimes you build a system and you want to study it: to identify its
principal components and see how they work together, or to isolate the
effect of altering a single component.  In that case, what you want is a
fixed heap size.  You run your program a few times and determine a heap
size that is sufficient for your problem, and then in future run the
program with that new fixed heap size.  This allows you to concentrate
on the other components of the system.
A good approach to choosing the fixed heap size for a program is to
determine the minimum heap size a program can have by bisection, then
multiplying …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[parallel ephemeron tracing]]></title>
        <id>https://wingolog.org/archives/2023/01/24/parallel-ephemeron-tracing</id>
        <link href="https://wingolog.org/archives/2023/01/24/parallel-ephemeron-tracing"/>
        <updated>2023-01-24T10:48:49.000Z</updated>
        <summary type="html"><![CDATA[Hello all, and happy new year.  Today's note continues the .series on
implementing ephemerons in a garbage
collector
In our  we
looked at a serial algorithm to trace ephemerons.  However, production
garbage collectors are parallel: during collection, they trace
the object graph using multiple worker threads.  Our problem is to
extend the ephemeron-tracing algorithm with support for multiple tracing
threads, without introducing stalls or serial bottlenecks.last
dispatch
Recall that we ended up having to define a table of pending ephemerons:
This table holds  ephemerons that have been visited by the
graph tracer but whose keys haven't been found yet, as well as a
singly-linked list of  ephemerons that are waiting to have
their values traced.  As a global data structure, the pending ephemeron…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Riff: Classifying Tools for Thought]]></title>
        <id>https://www.evalapply.org/posts/tools-for-thought/</id>
        <link href="https://www.evalapply.org/posts/tools-for-thought/index.html"/>
        <updated>2023-01-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Trying out a classification for "Tools for Thought" as a means of augmenting the human intellect, hot on the heels of recent community conversations about ChatGPT, CoPilot, Stable Diffusion etc...]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Animating Text Art in JavaScript]]></title>
        <id>https://www.evalapply.org/posts/animate-text-art-javascript/</id>
        <link href="https://www.evalapply.org/posts/animate-text-art-javascript/index.html"/>
        <updated>2023-01-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[It is with no small thanks to MDN, StackOverflow, Firefox's support for countless open tabs, JavaScript's support for first-class functions, and first-class supportive colleagues, I learned it is possible for a web front end novice to program "text art animations". Whatever that is even. Because I thoroughly enjoyed doing just that for Hanukkah of Data 2022. Here's how it went down.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2022: The Year in Review]]></title>
        <id>https://batsov.com/articles/2023/01/08/2022-the-year-in-review/</id>
        <link href="https://batsov.com/articles/2023/01/08/2022-the-year-in-review/"/>
        <updated>2023-01-08T14:21:00.000Z</updated>
        <summary type="html"><![CDATA[Another year is behind us and it’s time for the obligatory “year in review” blog post. I’ve been feeling a bit lazy, that’s why I’m getting to writing it a bit of a delay, but you’ll forgive me.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vector Symbolic Architectures in Clojure]]></title>
        <id>http://gigasquid.github.io/blog/2022/12/31/vector-symbolic-architectures-in-clojure/</id>
        <link href="http://gigasquid.github.io/blog/2022/12/31/vector-symbolic-architectures-in-clojure/"/>
        <updated>2022-12-31T20:41:00.000Z</updated>
        <summary type="html"><![CDATA[generated with Stable Diffusion
Before diving into the details of what Vector Symbolic Architectures are and what it means to implement Clojure data structures in them, I’d like to start with some of my motivation in this space.
Small AI for More Personal Enjoyment
Over the last few years, I’ve spent time learning, exploring, and contributing to open source deep learning. It continues to amaze me with its rapid movement and achievements at scale. However, the scale is really too big and too slow for me to enjoy it anymore.
Between work and family, I don’t have a lot of free time. When I do get a few precious hours to do some coding just for me, I want it it to be small enough for me to fire up and play with it in a REPL on my local laptop and get a result back in under two minutes.
I also …]]></summary>
        <author>
            <name>Squid's Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[On Expectations and Fun]]></title>
        <id>https://hypirion.com/musings/on-expectations-and-fun</id>
        <link href="https://hypirion.com/musings/on-expectations-and-fun"/>
        <updated>2022-12-26T14:30:00.000Z</updated>
        <summary type="html"><![CDATA[A blog usually has its style and shape, and your visitors expects that to continue on. But what do you do if you both want to keep that expectation while also making posts in a completely diferent style?]]></summary>
        <author>
            <name>Polymatheia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bozhidar is on Mastodon]]></title>
        <id>https://batsov.com/articles/2022/12/20/bozhidar-is-on-mastodon/</id>
        <link href="https://batsov.com/articles/2022/12/20/bozhidar-is-on-mastodon/"/>
        <updated>2022-12-20T18:21:00.000Z</updated>
        <summary type="html"><![CDATA[Twitter these days is all about drama related to… Twitter (Elon Musk). That really pains me, given that as long as it has existed Twitter has been the only social network that I’ve truly enjoyed using.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Topic-specific RSS Feeds]]></title>
        <id>https://batsov.com/articles/2022/12/15/topic-specific-rss-feeds/</id>
        <link href="https://batsov.com/articles/2022/12/15/topic-specific-rss-feeds/"/>
        <updated>2022-12-15T10:48:00.000Z</updated>
        <summary type="html"><![CDATA[Someone complained earlier today that my Pixel 6A article was picked up by Planet Emacslife. While I wasn’t involved in adding my blog there and I never promised to write exclusively about Emacs, this is a good opportunity to remind people my blog has several topic-specific RSS feeds about:]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Back to Android: My Take on the Pixel 6A]]></title>
        <id>https://batsov.com/articles/2022/12/15/back-to-android-my-take-on-the-pixel-6a/</id>
        <link href="https://batsov.com/articles/2022/12/15/back-to-android-my-take-on-the-pixel-6a/"/>
        <updated>2022-12-15T07:42:00.000Z</updated>
        <summary type="html"><![CDATA[A couple of weeks ago I made a spectacular and quite unexpected return to Android, after a long period of being exclusively in Apple’s mobile devices ecosystem. My last Android phone was the Sony Xperia Arc, which I bought way back in 2011. Afterwards I got an iPhone 5(S?) in 2012/2013 and never looked back.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git Tip: Find the Top Contributors]]></title>
        <id>https://batsov.com/articles/2022/12/11/git-tip-find-the-top-contributors/</id>
        <link href="https://batsov.com/articles/2022/12/11/git-tip-find-the-top-contributors/"/>
        <updated>2022-12-11T17:38:00.000Z</updated>
        <summary type="html"><![CDATA[From time to time it’s useful to know who are main authors of some piece of a project. Admittedly most of the time I want to check who are the top contributors to some Git repository I’d use a web interface for this (e.g. GitHub). Probably because I never bothered to remember the magic incantations to do this with the git command-line interface and probably because statistics often look better when you have a have richer UI toolkit to render them. That being said, today I was reminded how easy it is to cover the basics with the command-line. If we want a list of the top 10 contributors (in terms of commits) we can get it like this:1 All examples use CIDER’s repository. &#8617;]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What’s the Term for a Filename Without Its Extension?]]></title>
        <id>https://batsov.com/articles/2022/12/08/what-s-the-term-for-a-filename-without-its-extension/</id>
        <link href="https://batsov.com/articles/2022/12/08/what-s-the-term-for-a-filename-without-its-extension/"/>
        <updated>2022-12-08T14:40:00.000Z</updated>
        <summary type="html"><![CDATA[Today someone asked in OCaml’s Discord “How do you call a variable that refers to a filename without its extension?”. I always thought there was no specific term for this and I always named such variables filename-sans-extension (or similar), but it turns out I was wrong. It’s never too late to learning something new! But first a bit of (subjective) terminology:]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Integrating equation solvers with probabilistic programming through differentiable programming]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1705</id>
        <link href="http://www.stochasticlifestyle.com/integrating-equation-solvers-with-probabilistic-programming-through-differentiable-programming/"/>
        <updated>2022-11-24T01:04:59.000Z</updated>
        <summary type="html"><![CDATA[Part of the COMPUTATIONAL ABSTRACTIONS FOR PROBABILISTIC AND DIFFERENTIABLE PROGRAMMING WORKSHOP
Abstract: Many probabilistic programming languages (PPLs) attempt to integrate with equation solvers (differential equations, nonlinear equations, partial differential equations, etc.) from the inside, i.e. the developers of the PPLs like Stan provide differential equation solver choices as part of the suite. However, as equation solvers are an entire discipline to themselves with many active development communities and subfields, this places an immense burden on PPL developers to keep up with the changing landscape of tens of thousands of independent researchers. In this talk we will explore how Julia PPLs such as Turing.jl support of equation solvers from the outside, i.e. how the tools of differentiable programming allows equation solver libraries to be compatible with PPLs  ... READ MORE
The post Integrating equation solvers with probabilistic programming through differentiable programming appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[in no particular order]]></title>
        <id>https://jao.io/blog/in-no-particular-order.html</id>
        <link href="https://jao.io/blog/in-no-particular-order.html"/>
        <updated>2022-11-21T05:05:00.000Z</updated>
        <summary type="html"><![CDATA[Interesting bits elsewhere:



The influence of Self
10 quick Mastodon tips
Writing with LaTeX
Trying out Mathstodon
Older entries



Tags: sundry]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[the cambridge centenary ulysess]]></title>
        <id>https://jao.io/blog/the-cambridge-centenary-ulysess.html</id>
        <link href="https://jao.io/blog/the-cambridge-centenary-ulysess.html"/>
        <updated>2022-10-30T01:50:00.000Z</updated>
        <summary type="html"><![CDATA[Physically, this book is obnoxious: huge, wasted margins frame a reproduction
of the original text that painstakingly tries to look as shabby as it was,
including faded letters and all its typos, and its size and weight border on
the unmanageable.  Ah, but the contents is really good: on the one hand
there's of course Joyce's text itself (after twenty years since the last time,
my English, with the help of the annotations, was closer to be up to the task,
and enjoy it even when it wasn't), and next to it the essays introducing every
chapter, which i found (with an exception or two) very informative and,
sometimes, even illuminating.  I was also delighted to confirm that the
parallels with Homer's work are a strecht to say the least: i quickly read The
Odyssey in preparation and found it, again, boring at best and disheartening
in its depiction of the society of the time (not that Joyce's Dublin was
without its blemishes, but you hopefully get my point).



So, just get an electronic version and enjoy!

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[visual differential geometry and forms]]></title>
        <id>https://jao.io/blog/visual-differential-geometry-and-forms.html</id>
        <link href="https://jao.io/blog/visual-differential-geometry-and-forms.html"/>
        <updated>2022-10-30T00:30:00.000Z</updated>
        <summary type="html"><![CDATA[This is a beautiful book.  Crystal-clear and insightful explanations, with the
right amount of historical background and quite original outlook (without
going overboard).  I can only echo what other quoted reviewers have said: i
wish i had had this book when i was studying these matters in earnest, i'm
pretty sure i've understood some fine points for the first time only now!  I'd
also perhaps make an exception on the last part (or act, as Needham calls
them) on differential forms, which feels at times a bit rushed and in need of
some editing, and it'd had been wonderful if the manufacture of the book were
up to its contents: most images and photographs look really, really cheap, and
there are more typos than granted, which is a pity (as to other figures,
they're decent, although it must be said that Needham is not Penrose, but then
who is?).

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Teaching DucKey to Quack 🦆]]></title>
        <id>https://hypirion.com/musings/duckey</id>
        <link href="https://hypirion.com/musings/duckey"/>
        <updated>2022-10-27T20:50:00.000Z</updated>
        <summary type="html"><![CDATA[I've wanted to get my Moonlander keyboard's duck key to print the duck emoji for a long time. Here's how I did it!]]></summary>
        <author>
            <name>Polymatheia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Clojure view of "Mars Rover"]]></title>
        <id>https://www.evalapply.org/posts/clojure-mars-rover/</id>
        <link href="https://www.evalapply.org/posts/clojure-mars-rover/index.html"/>
        <updated>2022-10-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Here I illustrate how Clojurists (including Yours Truly) like to solve problems and model things using hammocks, pure functions, and the "it's just data" ideology. Also, while the *problem* focuses on "design in the small" of application logic, many ideas in the *solution* can—and do—scale all the way to "design in the large" of whole systems.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better?]]></title>
        <id>http://www.stochasticlifestyle.com/?p=1681</id>
        <link href="http://www.stochasticlifestyle.com/direct-automatic-differentiation-of-solvers-vs-analytical-adjoints-which-is-better/"/>
        <updated>2022-10-11T07:09:53.000Z</updated>
        <summary type="html"><![CDATA[Automatic differentiation of a “solver” is a subject with many details for doing it in the most  effective form. For this reason, there are a lot of talks and courses that go into lots of depth on the topic. I recently gave a talk on some of the latest stuff in differentiable simulation with the American Statistical Association, and have some detailed notes on such adjoint derivations as part of the 18.337 Parallel Computing and Scientific Machine Learning graduate course at MIT. And there are entire organizations like my SciML Open Source Software Organization which work day-in and day-out on the development of new differentiable solvers.
I’ll give a brief summary of all my materials here below.
Continuous vs Discrete Differentiation of Solvers
AD of a solver can be done in essentially two different ways: either directly performing automatic  ... READ MORE
The post Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better? appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately?]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1670</id>
        <link href="http://www.stochasticlifestyle.com/is-differentiable-programming-actually-necessary-cant-you-just-train-separately/"/>
        <updated>2022-10-04T07:38:56.000Z</updated>
        <summary type="html"><![CDATA[Is differentiable programming actually necessary, or can you just train the neural network in isolation against data and then stick the trained neural network into the simulation? We looked at this problem in detail in our new manuscript titled Capturing missing physics in climate model parameterizations using neural differential equations.
The goal of this project is to understand temperature mixing in large eddy simulations, essentially columns of water in the ocean. I.e., can we take a “true” 3D Navier-Stokes and use that to build very quick and accurate models for how heat flows up and down in the water?

This isn’t a new problem: climate scientists  ... READ MORE
The post Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately? appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Julia 1.8 Highlights]]></title>
        <id>https://julialang.org/blog/2022/08/julia-1.8-highlights/</id>
        <link href="https://julialang.org/blog/2022/08/julia-1.8-highlights/"/>
        <updated>2022-08-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlights of the Julia 1.8 release.
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JuliaCon 2022 Highlights]]></title>
        <id>https://julialang.org/blog/2022/08/juliacon-highlights-2022/</id>
        <link href="https://julialang.org/blog/2022/08/juliacon-highlights-2022/"/>
        <updated>2022-08-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[JuliaCon 2022 Highlights
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[inline snippets and grouping in consult-recoll]]></title>
        <id>https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html</id>
        <link href="https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html"/>
        <updated>2022-08-04T17:29:00.000Z</updated>
        <summary type="html"><![CDATA[I've just released a new version of consult-recoll, which implements a couple
of features that i am really liking, namely, grouping of search results by
mime type:









and inline snippets:









Happy searches!



Tags: emacs programming]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[parisian lives]]></title>
        <id>https://jao.io/blog/parisian-lives.html</id>
        <link href="https://jao.io/blog/parisian-lives.html"/>
        <updated>2022-07-31T03:42:00.000Z</updated>
        <summary type="html"><![CDATA[A very interesting view of how a biographer started her career in the
seventies, with two heavy-weights, Beckett and de Beauvoir.  Bair calls the
book a bio-memoir, and it's indeed quite deserving of a name of its own for
its genre.  One learns of the struggle it was not only to be a biographer of
famous writers still living (and her fascinating relationship with them) but
also to be a successful woman in the seventies.  And there are lots of
interesting details about her writing process, and its all too human side.
Very well written all around, it really whets your appetite: i've already
ordered her Beckett bio!

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quick intro to the new effect analysis of Julia compiler]]></title>
        <id>https://aviatesk.github.io/posts/effects-analysis/index.html</id>
        <link href="https://aviatesk.github.io/posts/effects-analysis/index.html"/>
        <updated>2022-07-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Quick intro to the new effect analysis of Julia compiler]]></summary>
        <author>
            <name>Shuhei Kadowaki&amp;#39;s homepage</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[consult recoll with live preview]]></title>
        <id>https://jao.io/blog/consult-recoll-with-live-preview.html</id>
        <link href="https://jao.io/blog/consult-recoll-with-live-preview.html"/>
        <updated>2022-07-22T18:08:00.000Z</updated>
        <summary type="html"><![CDATA[Lately, i've gravitated towards recoll as a unified search engine for all my
local data, including org and text notes, documents in PDF or similar formats,
HTML files, and local email. As a result, my little consult-recoll package has
gone up a few notches up in my list.  i've just released version 0.5,
featuring live previews.












Recoll is a local search engine that knows how to index a wide variety of file
formats.  It also offers a sophisticated query language, and, for some
document kinds, snippets of the text of the document that actually match your
query: that's always been one of my favourite features, and wanted to bring it
to emacs.



i found consult's live previews a very nice venue to bring snippets into
emacs, via a new version of consult-recoll, and there you go, jus…]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Accurate and Efficient Physics-Informed Learning Through Differentiable Simulation (ASA Seminar Talk)]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1659</id>
        <link href="http://www.stochasticlifestyle.com/accurate-and-efficient-physics-informed-learning-through-differentiable-simulation-asa-seminar-talk/"/>
        <updated>2022-07-14T09:58:09.000Z</updated>
        <summary type="html"><![CDATA[Abstract: Scientific machine learning (SciML) methods allow for the automatic discovery of mechanistic models by infusing neural network training into the simulation process. In this talk we will start by showcasing some of the ways that SciML is being used, from discovery of extrapolatory epidemic models to nonlinear mixed effects models in pharmacology. From there, we will discuss some of the increasingly advanced computational techniques behind the training process, focusing on the numerical issues involved in handling differentiation of highly stiff and chaotic systems. The viewers will leave with an understanding of how compiler techniques are being infused into the simulation stack to increasingly automate the process of developing mechanistic models
Bio: Dr. Chris Rackauckas is the Director of Scientific Research at Pumas-AI, the Director of  ... READ MORE
The post Accurate and Efficient Physics-Informed Learning Through Differentiable Simulation (ASA Seminar Talk) appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Visualizing Delaunay Triangulation]]></title>
        <id>https://ianthehenry.com/posts/delaunay/</id>
        <link href="https://ianthehenry.com/posts/delaunay/"/>
        <updated>2022-07-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Take a look at this:



This is a triangulation of a set of random points, such that all the points are connected to one another, all of the faces are triangles, and the edges include the convex hull of the points.
I would like to claim that this is not a very “good” triangulation. This algorithm tends to produce lots of long, slivery triangles, and a really uneven distribution of edge counts across different vertices – some vertices have way more edges than they need to.
Here’s a different triangulation. These are the exact same points, but I triangulated them smarter:

Isn’t that better? (Click to compare!)
Depending on your dice rolls you might still have a few slivers, usually around the outer perimeter, but I’m willing to bet that it’s a noticeable improvement over the first attempt.
…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
</feed>
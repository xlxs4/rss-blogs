<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>urn:2024-01-12T00:01:34.010Z</id>
    <title>A curated list of ramblings</title>
    <updated>2024-01-12T00:01:34.010Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="index.html"/>
    <entry>
        <title type="html"><![CDATA[Parallel garbage collection for SBCL]]></title>
        <id>https://zenodo.org/record/7816398</id>
        <link href="https://zenodo.org/record/7816398"/>
        <updated>2024-01-12T00:01:33.988Z</updated>
        <summary type="html"><![CDATA[The design and implementation of a non-moving parallel generational garbage collector for SBCL.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The one-more-re-nightmare compiler]]></title>
        <id>https://applied-langua.ge/posts/omrn-compiler.html</id>
        <link href="https://applied-langua.ge/posts/omrn-compiler.html"/>
        <updated>2024-01-12T00:01:32.138Z</updated>
        <summary type="html"><![CDATA[A pile of regular expression derivatives, myths about Ediware, SIMD instruction selection and using the Common Lisp compiler as a backend for a regular expression compiler.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The poverty of "post-open" source]]></title>
        <id>https://applied-langua.ge/posts/the-poverty-of-post-open-source.html</id>
        <link href="https://applied-langua.ge/posts/the-poverty-of-post-open-source.html"/>
        <updated>2024-01-12T00:01:32.132Z</updated>
        <summary type="html"><![CDATA[Post-open source falls short on what improvements it was supposed to make. It prefigures a boring future, mostly because it carries on productivist logic, and makes programming even more of a difficult and esoteric tool. Capitalism isn't the only problem threatening peer production; it is rather threatened by more general principles, which even radicals can believe.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I don't want to go to Chel-C]]></title>
        <id>https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html</id>
        <link href="https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html"/>
        <updated>2024-01-12T00:01:32.120Z</updated>
        <summary type="html"><![CDATA[When "simple" programming languages aren't.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Lisp Curse Redemption Arc]]></title>
        <id>https://applied-langua.ge/posts/lisp-curse-redemption-arc.html</id>
        <link href="https://applied-langua.ge/posts/lisp-curse-redemption-arc.html"/>
        <updated>2024-01-12T00:01:32.111Z</updated>
        <summary type="html"><![CDATA[Pondering marketing strategies, and how we aren't supposed to be productive in Common Lisp.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The next 700 virtual machines]]></title>
        <id>https://applied-langua.ge/posts/the-next-700-virtual-machines.html</id>
        <link href="https://applied-langua.ge/posts/the-next-700-virtual-machines.html"/>
        <updated>2024-01-12T00:01:32.049Z</updated>
        <summary type="html"><![CDATA[Virtual machine will eat themselves, by being similar enough that most can subsume each other. This can be furthered by making it easier to target abstract machines, and using object capabilities to allow cohabitation of languages and incremental extension to languages.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zero Feet: a proposal for a systems-free Lisp]]></title>
        <id>https://applied-langua.ge/posts/zero-feet.html</id>
        <link href="https://applied-langua.ge/posts/zero-feet.html"/>
        <updated>2024-01-12T00:01:32.046Z</updated>
        <summary type="html"><![CDATA[A systems language is a collection of things that don't fit into a modular language. There shouldn't be one.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Please test the parallel mark-region collector for SBCL]]></title>
        <id>https://applied-langua.ge/~hayley/pmrgc.html</id>
        <link href="https://applied-langua.ge/~hayley/pmrgc.html"/>
        <updated>2024-01-12T00:01:31.990Z</updated>
        <summary type="html"><![CDATA[How to build the new parallel GC for SBCL, and how to tell if it's working.]]></summary>
        <author>
            <name>Applied Language musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[micro macro story time]]></title>
        <id>https://wingolog.org/archives/2024/01/11/micro-macro-story-time</id>
        <link href="https://wingolog.org/archives/2024/01/11/micro-macro-story-time"/>
        <updated>2024-01-11T14:10:38.000Z</updated>
        <summary type="html"><![CDATA[Today, a tiny tale:  I was working
on .
Guile inherited this code from an early version of Kent Dybvig’s
.  It
was... not easy to work with.about 15 years
agoGuile’s macro
expanderportable syntax
expander
Some difficulties were essential.  Scope is tricky, after all.
Some difficulties were incidental, but deep.  The expander is ultimately
a function that translates Scheme-with-macros to Scheme-without-macros.
However, it is itself written in Scheme-with-macros, so to load it on a
substrate without macros requires a ,
whose data representations need to be compatible with any incremental
change, so that you will be able to use the new expander to produce a
fresh pre-expansion.  This difficulty could have been avoided by
.  It
works once you are used to it, but it’s gnarly.pre-expanded copy o…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[missing the point of webassembly]]></title>
        <id>https://wingolog.org/archives/2024/01/08/missing-the-point-of-webassembly</id>
        <link href="https://wingolog.org/archives/2024/01/08/missing-the-point-of-webassembly"/>
        <updated>2024-01-08T11:45:39.000Z</updated>
        <summary type="html"><![CDATA[I find most descriptions of WebAssembly to be uninspiring: if you
start with a phrase like “assembly-like language” or a “virtual machine”,
we have already lost the plot.  That’s not to say that these
descriptions are incorrect, but it’s like explaining what a dog is by
starting with its circulatory system.  You’re not wrong, but you should probably lead with the bark.
I have a different preferred starting point which is less descriptive
but more operational: .  WebAssembly is a new way of dividing computing systems into
pieces and of composing systems from parts.WebAssembly is a new fundamental abstraction
boundary
This all may sound high-falutin´, but it’s for real: this is the
actually interesting thing about Wasm.
It’s probably easiest to explain what I mean by example.  Consider the
L…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[scheme modules vs whole-program compilation: fight]]></title>
        <id>https://wingolog.org/archives/2024/01/05/scheme-modules-vs-whole-program-compilation-fight</id>
        <link href="https://wingolog.org/archives/2024/01/05/scheme-modules-vs-whole-program-compilation-fight"/>
        <updated>2024-01-05T20:43:49.000Z</updated>
        <summary type="html"><![CDATA[In a recent dispatch, I explained .
Today’s note explores what a correct solution might look like.the whole-program compilation
strategy used in Whiffle and
Hoot
Consider a module that exports an increment-this-integer procedure.
We’ll use syntax from the :R6RS
standard
If we then have a program:
Then the meaning of this program is clear: it reduces to ,
then to 43.  Fine enough.  But how do we get there?  How does the
compiler compose the program with the modules that it uses
(transitively), to produce a single output?(+ 42 1)
In

(and ), the answer is,
sloppily.  There is a 
that initially has a number of bindings from the host compiler,
.  One of these is , exposed under
the name , where the  in this case is just a warning to the reader that this is a weird
primitive binding.  Using thi…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v8's precise field-logging remembered set]]></title>
        <id>https://wingolog.org/archives/2024/01/05/v8s-precise-field-logging-remembered-set</id>
        <link href="https://wingolog.org/archives/2024/01/05/v8s-precise-field-logging-remembered-set"/>
        <updated>2024-01-05T09:44:21.000Z</updated>
        <summary type="html"><![CDATA[A  is used by a garbage collector to identify graph
edges between partitioned sub-spaces of a heap.  The canonical example
is in generational collection, where you allocate new objects in
, and eventually promote survivor objects to .  If
most objects die young, we can focus GC effort on newspace, to avoid
traversing all of oldspace all the time.remembered setnewspaceoldspace
Collecting a subspace instead of the whole heap is sound if and only if
we can identify all live objects in the subspace.  We start with some
set of  that point into the subspace from outside, and then
traverse all links in those objects, but only to other objects within
the subspace.roots
The roots are, like, global variables, and the stack, and registers; and
in the case of a partial collection in which we identify …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Marco Antoniotti: A Parenthetical Year and New Open Parentheses]]></title>
        <id>http://within-parens.blogspot.com/2024/01/a-parenthetical-year-and-new-open.html</id>
        <link href="http://within-parens.blogspot.com/2024/01/a-parenthetical-year-and-new-open.html"/>
        <updated>2024-01-04T16:05:00.000Z</updated>
        <summary type="html"><![CDATA[It has been a few years that I have spent the New Year Holiday to update my Common Lisp 
  libraries
  and to think about all the open parentheses that are left unclosed.  This year is no different, only
  I have had even less time to work on CL.  Therefore, my updates to my libraries on
  common-lisp.net and
  Sourceforge all have had some minor repairs and
  copyright updates.  As usual, I direct you to
  HEΛP and
  CLAST; most of my other
  libraries are support for these two.


One effort, I would like to finalize in the coming year (that is; closing this parenthesis) is the
  CL-LIA layer/library.
  Help is wanted for this!  Drop me a line if you want to chip in.  The main issues are API designs
  around the floating point environment condition handling.


Apart from that, I have been…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Paolo Amoroso: My Common Lisp setup on Linux]]></title>
        <id>https://journal.paoloamoroso.com/my-common-lisp-setup-on-linux?pk_campaign=rss-feed</id>
        <link href="https://journal.paoloamoroso.com/my-common-lisp-setup-on-linux?pk_campaign=rss-feed"/>
        <updated>2023-12-27T13:30:34.000Z</updated>
        <summary type="html"><![CDATA[Now that I'm back to Lisp I'm actively exploring Interlisp as a Common Lisp environment too.
But to code in Common Lisp also on my Crostini Linux system, the Linux container of chromeOS I use on a Chromebox, I'm setting up a suitable development environment. In addition to console programs I want to write GUI applications with McCLIM.
The Common Lisp implementation I chose, SBCL, is a no brainer given its features, performance, and active maintenance. As for the development environment I won't go with the default on Linux, Emacs. Although I used Emacs for years and loved it, now it feels overkill and I'd prefer not to re-learn its intricacies.
Instead I'm using Lem, a great Emacs-like IDE written in Common Lisp with a user interface and keybindings similar to those of Emacs and SLIME. Thus my familiarity with Emacs is enough to get me up to speed. A nice side effect of Lem's implementation language is the IDE can be configured and extended in Common Lisp, which I feel more at home with than Emacs Lisp.
Despite some initial installation issues Lem works well on Crostini, is fast, and has a nice SDL2 backend. I really like the IDE.
If I need to write or run some Common Lisp code on my Raspberry Pi 400 I can easily replicate this setup there.
#CommonLisp #Lisp
Discuss...
Email | Reply @amoroso@fosstodon.org]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Julia 1.10 Highlights]]></title>
        <id>https://julialang.org/blog/2023/12/julia-1.10-highlights/</id>
        <link href="https://julialang.org/blog/2023/12/julia-1.10-highlights/"/>
        <updated>2023-12-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlights of the Julia 1.10 release.
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Bad Year for Blogging]]></title>
        <id>https://batsov.com/articles/2023/12/23/a-bad-year-for-blogging/</id>
        <link href="https://batsov.com/articles/2023/12/23/a-bad-year-for-blogging/"/>
        <updated>2023-12-23T06:34:00.000Z</updated>
        <summary type="html"><![CDATA[Last year (2022) I celebrated a rather unexpected all time blogging record. As it often happens in such cases, however, there was a massive drop in my blogging activity afterwards.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vindarel: Latest string manipulation functions in the STR library]]></title>
        <id>https://lisp-journey.gitlab.io/blog/latest-string-manipulation-functions/</id>
        <link href="https://lisp-journey.gitlab.io/blog/latest-string-manipulation-functions/"/>
        <updated>2023-12-22T15:52:51.000Z</updated>
        <summary type="html"><![CDATA[We just released cl-str
v0.21. It’s
been a while since the last release, and many enhancements make it
more useful than ever. Let’s review the changes, the newest first.
But first, I want to you thank everyone who contributed, by sending
pull requests or feedback. Special thanks to
@kilianmh who suddenly appeared one
day, helped with new features as well as grunt work, and who is now a
co-maintainer.
split by regex
The latest addition sent by ccQpein is that str:split now accepts a :regex key argument to split by regular expressions. The functions rsplit and split-omit-nulls have it too.
(str:split "[,|;]" "foo,bar;baz" :regex t)
;; => ("foo" "bar" "baz")

That’s handy for advent of code ;)
You can also use ppcre:split, this is the function that str:split
relies on anyways, except that by …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fastmail: Year Two]]></title>
        <id>https://batsov.com/articles/2023/12/22/fastmail-year-two/</id>
        <link href="https://batsov.com/articles/2023/12/22/fastmail-year-two/"/>
        <updated>2023-12-22T14:41:00.000Z</updated>
        <summary type="html"><![CDATA[Here’s a small follow-up to my usage of Fastmail that started in 2021. In a nutshell - little has changed since my previous update. Fastmail is still my favorite email vendor and I keep using it more and more. Here are a few highlights:]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[service update]]></title>
        <id>https://wingolog.org/archives/2023/12/14/service-update</id>
        <link href="https://wingolog.org/archives/2023/12/14/service-update"/>
        <updated>2023-12-14T14:28:45.000Z</updated>
        <summary type="html"><![CDATA[Late last year I switched blog entries and comments to be written in , but there was a bug that I never noticed: if a text consisted only of a single paragraph or block, it would trigger an error that got reported back to the user in a very strange way, and which would prevent the comment from being posted.a dialect of markdown
I had never seen the error myself because blog posts are generally more than a paragraph, but it must have been quite irritating when commenting.  Sorry about that; it should be fixed now.  Should you experience more strange errors, please do send me an email with the comment to .  Cheers.wingo@igalia.com]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[sir talks-a-lot]]></title>
        <id>https://wingolog.org/archives/2023/12/12/sir-talks-a-lot</id>
        <link href="https://wingolog.org/archives/2023/12/12/sir-talks-a-lot"/>
        <updated>2023-12-12T15:18:14.000Z</updated>
        <summary type="html"><![CDATA[I know, dear reader: of course you have already seen all my talks this year.  Your attentions are really too kind and I thank you.  But those other people, maybe you share one talk with them, and then they ask you for more, and you have to go stalking back through the archives to slake their nerd-thirst.  This happens all the time, right?
I was thinking of you this morning and I said to myself, why don’t I put together a post linking to all of my talks in 2023, so that you can just send them a link; here we are.  You are very welcome, it is really my pleasure.
  Wasm
standards group, Munich, 11 Oct 2023.
Scheme + Wasm + GC = MVP: Hoot Scheme-to-Wasm compiler update.slides

Wasm GC subgroup, 18 Apr 2023.
Scheme to Wasm: Use and misuse of the GC proposal.slides

BOB, Berlin, 17 Mar 2023.


A world to win: WebAssembly for the rest of us.blogslidesyoutube

EOSS, Prague, 27 June 2023.







Cross-platform mobile UI: “Compilers, compilers everywhere”.slidesyoutubeblogblogblogblogblogblog

Spritely, remote, 10 May 2023.

CPS Soup: A functional intermediate language.blogslides

FOSDEM, Brussels, 4 Feb 2023.


Whippet: A new GC for Guile.blogeventslides
Still here?  The full  will surely fill your cup.talks archive
2023 talks
but wait, there’s more]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[a simple hdr histogram]]></title>
        <id>https://wingolog.org/archives/2023/12/10/a-simple-hdr-histogram</id>
        <link href="https://wingolog.org/archives/2023/12/10/a-simple-hdr-histogram"/>
        <updated>2023-12-10T21:27:59.000Z</updated>
        <summary type="html"><![CDATA[Good evening!  This evening, a note on high-dynamic-range (HDR)
histograms.
How should one record garbage collector pause times?
A few options present themselves: you could just record the total pause
time.  Or, also record the total number of collections, which allows you
to compute the average.  Maximum is easy enough, too.  But then you
might also want the median or the p90 or the p99, and these percentile
values are more gnarly: you either need to record all the pause times,
which can itself become a memory leak, or you need to approximate via a
histogram.
Let’s assume that you decide on the histogram approach.  How should you
compute the bins?  It would be nice to have microsecond accuracy on the
small end, but if you bin by microsecond you could end up having
millions of bins, which …]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v8's mark-sweep nursery]]></title>
        <id>https://wingolog.org/archives/2023/12/08/v8s-mark-sweep-nursery</id>
        <link href="https://wingolog.org/archives/2023/12/08/v8s-mark-sweep-nursery"/>
        <updated>2023-12-08T14:34:03.000Z</updated>
        <summary type="html"><![CDATA[Today, a followup to  with some more details on V8’s new
young-generation implementation,  or .yesterday’s noteminor mark-sweepMinorMS
A
caveat again: these observations are just from reading the code; I
haven’t run these past the MinorMS authors yet, so any of these details
might be misunderstandings.
The MinorMS nursery consists of , each of which is 256 kB, unless
huge-page mode is on, in which case they are 2 MB.  The total default
size of the nursery is 72 MB by default, or 144 MB if  is off.pagespointer
compression
There can be multiple threads allocating into the nursery, but let’s
focus on the ,
which is used on the main thread.  Nursery allocation is bump-pointer,
whether in a MinorMS page or scavenger semi-space.  Bump-pointer regions
are called , and often abbreviated as 
in the…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[the last 5 years of V8's garbage collector]]></title>
        <id>https://wingolog.org/archives/2023/12/07/the-last-5-years-of-v8s-garbage-collector</id>
        <link href="https://wingolog.org/archives/2023/12/07/the-last-5-years-of-v8s-garbage-collector"/>
        <updated>2023-12-07T12:15:45.000Z</updated>
        <summary type="html"><![CDATA[Captain, status report: I’m down here in a Jeffries tube, poking at V8’s
garbage collector.  However, despite working on other areas of the project
recently, V8 is now so large that it’s necessary to ignore whole subsystems when working on any given task.  But now I’m looking at the GC in anger: what is its deal?  What does V8’s GC even look like these days?
The  was in 2019; fine enough, but
dated.  Now in the evening of 2023 I think it could be useful to revisit
it and try to summarize the changes since then.  At least, it would have
been useful to me had someone else written this article.last public article on the structure of V8’s garbage
collector
To my mind, work on V8’s GC has had three main goals over the last 5
years: improving interactions between the managed heap and C++,
improv…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[colophonwards]]></title>
        <id>https://wingolog.org/archives/2023/12/05/colophonwards</id>
        <link href="https://wingolog.org/archives/2023/12/05/colophonwards"/>
        <updated>2023-12-05T11:36:57.000Z</updated>
        <summary type="html"><![CDATA[A brief meta-note this morning: for the first time in 20 years, I
finally got around to updating the web design of
 recently and wanted to share a bit
about that.wingolog.org
Back when I made ,
I was using the then-brand-new Wordpress,  was the most common web browser, CSS wasn’t very good, the Safari browser had
just made its first release, smartphones were yet to be invented, and
everyone used low-resolution CRT screens.  The original design did use CSS instead
of tables, thankfully, but it was very narrow and left a lot up to the
user agent (notably font choice and size).the initial wingolog
designInternet Explorer
6
These days you can do much better.  Even HTML has moved on, with

and

and

elements.  CSS is powerful and interoperable, with grid layout and
media queries and  and  and a…]]></summary>
        <author>
            <name>wingolog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Yukari Hafner: The State of MacOS Support]]></title>
        <id>https://reader.tymoon.eu/article/433</id>
        <link href="https://reader.tymoon.eu/article/433"/>
        <updated>2023-11-27T14:04:32.000Z</updated>
        <summary type="html"><![CDATA[I've been writing libraries for Common Lisp for over a decade now (lord almighty), and for most of that time I've tried to ensure that the libraries would, in the very least, work on all three major operating systems: Windows, Linux, and MacOS.
Usually doing so isn't hard, as I can rely on the implementation and the language standard, but especially for libraries that deal with foreign code or operating system interfaces, a bit more work is needed. For the longest time I went the extra mile of providing that support myself, despite not being a MacOS user, and despite vehemently disapproving of Apple as a company and their treatment of users and developers.
About two years ago, I stopped. I had had enough of all the extra work the platform put on me, for zero personal gain. Especially I had…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The State of MacOS Support]]></title>
        <id>https://reader.tymoon.eu/article/433</id>
        <link href="https://reader.tymoon.eu/article/433"/>
        <updated>2023-11-27T14:04:32.000Z</updated>
        <summary type="html"><![CDATA[I've been writing libraries for Common Lisp for over a decade now (lord almighty), and for most of that time I've tried to ensure that the libraries would, in the very least, work on all three major operating systems: Windows, Linux, and MacOS.
Usually doing so isn't hard, as I can rely on the implementation and the language standard, but especially for libraries that deal with foreign code or operating system interfaces, a bit more work is needed. For the longest time I went the extra mile of providing that support myself, despite not being a MacOS user, and despite vehemently disapproving of Apple as a company and their treatment of users and developers.
About two years ago, I stopped. I had had enough of all the extra work the platform put on me, for zero personal gain. Especially I had…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Joe Marshall: GitHub Co-pilot Review]]></title>
        <id>http://funcall.blogspot.com/2023/11/github-co-pilot-review.html</id>
        <link href="http://funcall.blogspot.com/2023/11/github-co-pilot-review.html"/>
        <updated>2023-11-24T15:50:00.000Z</updated>
        <summary type="html"><![CDATA[I recently tried out GitHub CoPilot.  It is a system that uses
  generative AI to help you write code.
The tool interfaces to your IDE — I used VSCode — and
  acts as an autocomplete on steroids … or acid.  Suggested
  comments and code appear as you move the cursor and you can often choose from
  a couple of different completions.  The way to get it to write code was to
  simply document what you wanted it to write in a comment.  (There is
  a chat interface where you can give it more directions, but I did
  not play with that.)
I decided to give it my standard interview question: write a simple
  TicTacToe class, include a method to detect a winner.  The tool spit
  out a method that checked an array for three in a row horizontally,
  vertically, and along the two diagonals.  Almost corr…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nicolas Martyanoff: Interactive Common Lisp development]]></title>
        <id>https://www.n16f.net/blog/interactive-common-lisp-development/</id>
        <link href="https://www.n16f.net/blog/interactive-common-lisp-development/"/>
        <updated>2023-11-19T18:00:00.000Z</updated>
        <summary type="html"><![CDATA[Common Lisp programming is often presented as “interactive”. In most
languages, modifications to your program are applied by recompiling it and
restarting it. In contrast, Common Lisp lets you incrementally modify your
program while it is running.
While this approach is convenient, especially for exploratory programming, it
also means that the state of your program during execution does not always
reflect the source code. You do not just define new constructs: you look them
up, inspect them, modify them or delete them. I had to learn a lot of
subtleties the hard way. This article is a compendium of information related
to the interactive nature of Common Lisp.
Variables
In Common Lisp variables are identified by symbols. Evaluating (SETQ A 42)
creates or updates a variable with the integer …]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ChatGPT performs better on Julia than Python (and R) for Large Language Model (LLM) Code Generation. Why?]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1732</id>
        <link href="http://www.stochasticlifestyle.com/chatgpt-performs-better-on-julia-than-python-and-r-for-large-language-model-llm-code-generation-why/"/>
        <updated>2023-11-19T15:57:36.000Z</updated>
        <summary type="html"><![CDATA[Machine learning is all about examples. The more data you have, the better it should perform, right? With the rise of ChatGPT and Large Language Models (LLMs) as a code helping tool, it was thus just an assumption that the most popular languages like Python would likely be the best for LLMs. But because of the increased productivity, I tend to use a lot of Julia, a language with  an estimated user-base of around a million programmers. For this reason, people have often asked me how it fairs with ChatGPT, Github Copilot, etc., and so I checked out those pieces and… was stunned. It’s really good. It seemed better than Python actually?
The data is in: Julia does well with ChatGPT
This question was recently put to the test by a researcher named Alessio Buscemi in A Comparative Study  ... READ MORE
The post ChatGPT performs better on Julia than Python (and R) for Large Language Model (LLM) Code Generation. Why? appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DDPS Seminar Talk: Generalizing Scientific Machine Learning and Differentiable Simulation Beyond Continuous models]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1729</id>
        <link href="http://www.stochasticlifestyle.com/ddps-seminar-talk-generalizing-scientific-machine-learning-and-differentiable-simulation-beyond-continuous-models/"/>
        <updated>2023-11-12T11:54:03.000Z</updated>
        <summary type="html"><![CDATA[I’m pleased to share a talk I gave in the DDPS seminar series!

Data-driven Physical Simulations (DDPS) Seminar Series
Abstract: The combination of scientific models into deep learning structures, commonly referred to as scientific machine learning (SciML), has made great strides in the last few years in incorporating models such as ODEs and PDEs into deep learning through differentiable simulation. However, the vast space of scientific simulation also includes models like jump diffusions, agent-based models, and more. Is SciML constrained to the simple continuous cases or is there a way to generalize to more advanced model forms? This talk will dive into the mathematical aspects of generalizing differentiable simulation to discuss cases like chaotic simulations, differentiating stochastic simulations like particle filters and agent-based models, and solving  ... READ MORE
The post DDPS Seminar Talk: Generalizing Scientific Machine Learning and Differentiable Simulation Beyond Continuous models appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[You Bet Your Life]]></title>
        <id>urn:uuid:71d51fbc-5910-4253-81fa-56366970fcac</id>
        <link href="https://www.lambdasierra.com/2023/100-year-plan/"/>
        <updated>2023-11-05T20:00:00.000Z</updated>
        <summary type="html"><![CDATA[WordPress.com is offering a 100-year plan. But why?]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quicklisp news: October 2023 Quicklisp dist update now available]]></title>
        <id>http://blog.quicklisp.org/2023/10/october-2023-quicklisp-dist-update-now.html</id>
        <link href="http://blog.quicklisp.org/2023/10/october-2023-quicklisp-dist-update-now.html"/>
        <updated>2023-10-30T00:46:00.000Z</updated>
        <summary type="html"><![CDATA[New projects: 

3d-math — A library implementing the necessary linear algebra math for 2D and 3D computations — zlib
ansi-test-harness — A testing harness that fetches ansi-test and allows subsets and extrinsic systems — MIT
babylon — Jürgen Walther's modular, configurable, hybrid knowledge engineering systems framework for Common Lisp, restored from the CMU AI Repository. — MIT
calm — CALM - Canvas Aided Lisp Magic — GNU General Public License, version 2
cffi-object — A Common Lisp library that enables fast and convenient interoperation with foreign objects. — Apache-2.0
cffi-ops — A library that helps write concise CFFI-related code. — Apache-2.0
cl-brewer — Provides CI settings for cl-brewer. — Unlicense
cl-jwk — Common Lisp system for decoding public JSON Web Keys (JWK) — BSD 2-Clause
…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Eugene Zaikonnikov: Announcing deptree]]></title>
        <id>http://blog.funcall.org//lisp/2023/10/23/deptree/</id>
        <link href="http://blog.funcall.org//lisp/2023/10/23/deptree/"/>
        <updated>2023-10-22T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Deptree is a tool to list and archive dependency snapshots of (ASDF-defined) projects. We at Norphonic use it in the product build pipeline, but it can be useful for integration workflows as well. The task sounds common enough so there's little doubt am reinventing the wheel with this. Alas, I couldn't find any readily available solutions nor good folks at #commonlisp could recall of any, so there.
Available in the latest Quicklisp.]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Eugene Zaikonnikov: Also ALSA gets Mixer API]]></title>
        <id>http://blog.funcall.org//lisp/2023/10/22/also-alsa/</id>
        <link href="http://blog.funcall.org//lisp/2023/10/22/also-alsa/"/>
        <updated>2023-10-21T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Also ALSA now has a simple ALSA Mixer API support. See set-mixer-element-volume for sample use.
Available in the latest Quicklisp.]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Riff: A "mycelium-clj" for the Clojure ecosystem?]]></title>
        <id>https://www.evalapply.org/posts/mycelium-clj/</id>
        <link href="https://www.evalapply.org/posts/mycelium-clj/index.html"/>
        <updated>2023-10-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In a world of concrete objects, steel frameworks bring sense and order. In a forest of composable tools, libraries and open-ended schemas, it would be the mycelia. A frustrated yet optimistic man muses "Might such a thing come to be?".]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[vindarel: Common Lisp on the web: enrich your stacktrace with request and session data]]></title>
        <id>https://lisp-journey.gitlab.io/blog/common-lisp-on-the-web-enrich-your-stacktrace-with-request-and-session-data/</id>
        <link href="https://lisp-journey.gitlab.io/blog/common-lisp-on-the-web-enrich-your-stacktrace-with-request-and-session-data/"/>
        <updated>2023-10-13T14:51:07.000Z</updated>
        <summary type="html"><![CDATA[A short post to show the usefulness of Hunchentoot-errors and to thank Mariano again.
This library adds the current request and session data to your stacktrace, either in the REPL (base case) or in the browser.
TLDR;
Use it like this:
;; (ql:quickload "hunchentoot-errors)
;;
;; We also use easy-routes: (ql:quickload "easy-routes")

(defclass acceptor (easy-routes:easy-routes-acceptor hunchentoot-errors:errors-acceptor)
  ()
  (:documentation "Our Hunchentoot acceptor that uses easy-routes and hunchentoot-errors, for easier route definition and enhanced stacktraces with request and session data."))

then (make-instance 'acceptor :port 4242).
Base case
Imagine you have a bug in your route:
(easy-routes:defroute route-card-page ("/card/:slug" :method :GET :decorators ((@check-roles admin-role…]]></summary>
        <author>
            <name>Planet Lisp</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[poor things]]></title>
        <id>https://jao.io/blog/poor-things.html</id>
        <link href="https://jao.io/blog/poor-things.html"/>
        <updated>2023-10-11T01:28:00.000Z</updated>
        <summary type="html"><![CDATA[I've read good things about the forthcoming movie, and liked what I saw in the
promotional video, but I cannot believe it's going to be near as good as this
novel. The book has too many nuances, literary tricks and wordplay and
paragraphs one has to read and reread, to be translated to a film. The latter
might be its own work of art, and that's fine. But if you're curious about the
movie, I'd definitely recommend to read this book. If you're not, I'd
definitely recommend to read this book. The writing is fresh and funny, in
typical Gray fashion, and the real themes of the book are universal and
exposed in a way that is very entertaining on the surface, but with a subtext
that gives you food for thought. I don't remember when was the last time that
I read two hundred pages of a book in a single day, time just flew, as they
say.

Tags: books]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[in no particular order]]></title>
        <id>https://jao.io/blog/in-no-particular-order.html</id>
        <link href="https://jao.io/blog/in-no-particular-order.html"/>
        <updated>2023-10-11T01:00:00.000Z</updated>
        <summary type="html"><![CDATA[Interesting bits elsewhere:



Timeless Advice on Writing: The Collected Wisdom of Great Writers
Leaving Haskell behind — Infinite Negative Utility
Knuth: Ancient Babylonian Algorithms annotated/explained version.
Mastering Bloom Filters: Big Data Processing in Python
Older entries



Tags: sundry]]></summary>
        <author>
            <name>programming (and other) musings</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: integrating the IDE (feat. Clojure(Script))]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-ide-experience/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-ide-experience/index.html"/>
        <updated>2023-09-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The one in which we design a rich Integrated Development Environment (IDE) experience, using Clojure as our muse. Featuring Language Server Protocol (lsp-mode + clojure-lsp), clojure-mode, cider, and more! Buckle up and get a coffee.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[I've opened up a Patreon - Confession 93]]></title>
        <id>https://reader.tymoon.eu/article/432</id>
        <link href="https://reader.tymoon.eu/article/432"/>
        <updated>2023-08-25T12:45:54.000Z</updated>
        <summary type="html"><![CDATA[I've been debating opening up a Patreon for many years and I've always been hesitant about accepting donations from people, but I think it's finally time to change my mind on that!
Why make a Patreon now?
I've been working full time on Kandria and associated projects since 2020, and continue to do so today. All of the work that I've done as part of that has been released as open source software, including Kandria itself as well as the engine it runs on, Trial.
Since the release, I've mostly focused on support and the pre-pre-production of my next title, which primarily involves adding new features to Trial that are necessary to create a full-3D game. I can't yet announce much about the game itself, other than that it is a character action game, meaning it features third-person hack and sla…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Selbstsamkeit - Confession 92]]></title>
        <id>https://reader.tymoon.eu/article/431</id>
        <link href="https://reader.tymoon.eu/article/431"/>
        <updated>2023-08-08T21:11:52.000Z</updated>
        <summary type="html"><![CDATA[If you've read any of my preceding entries I would expect it to come as no surprise to you to see me write "accepting who you are is really difficult." Though today I want to write about a few different facets of that than just the one you may be thinking about right now.
Naturally, for only recently coming out as trans, accepting that I am a woman is a large part of what's been coursing through my brain. I know with absolute certainty by now that I'm not wrong on this, and yet it's still not easy to fully come to terms with it and not just know it, but also understand it completely. I know that coming out as trans did not change me, but rather let me be who I've always been, even more so. Despite that it's still not obvious even to me which of the many fragments of my personality that wer…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Haunting Down Errors in Go]]></title>
        <id>https://hypirion.com/musings/haunting-down-errors-in-go</id>
        <link href="https://hypirion.com/musings/haunting-down-errors-in-go"/>
        <updated>2023-08-06T18:43:00.000Z</updated>
        <summary type="html"><![CDATA[Phantom types won't revolutionise your Go debugging experience, but it can make it slightly better! Here's one way they can help out.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: getting about]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-getting-about/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-getting-about/index.html"/>
        <updated>2023-08-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We want to maximize our ability to "stay in The Zone". So the aim is to create the fastest, smoothest, tightly integrated, and unobtrusive mechanism to get things done using the keyboard alone.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Fibonacci Matrix]]></title>
        <id>https://ianthehenry.com/posts/fibonacci/</id>
        <link href="https://ianthehenry.com/posts/fibonacci/"/>
        <updated>2023-07-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[When you think about the Fibonacci sequence, you probably imagine a swirling vortex of oscillating points stretching outwards to infinity:



Okay, no, obviously you don’t. Yet.
When you think about the Fibonacci sequence, you probably flush with a latent rage when you remember that it is, more often than not, the way that we introduce the concept of “recursive functions” to new programmers, in some sort of cruel hazing intended to make it harder for them to ever appreciate how recursion can help them write better programs. Sometimes we even add memoization, and call it “dynamic programming,” in order to impress upon them that even the most trivial problems deserve complex, inefficient solutions.
Er, okay, you probably don’t think about the Fibonacci sequence much at all. It doesn’t, you k…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Go-stly Access Rights]]></title>
        <id>https://hypirion.com/musings/go-stly-access-rights</id>
        <link href="https://hypirion.com/musings/go-stly-access-rights"/>
        <updated>2023-07-23T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[With phantom types, we can make a static access control system in Go that will detect errors and act as easy-to-read documentation. Here's how you do it.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: the midway refactor]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-midway-refactor/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-midway-refactor/index.html"/>
        <updated>2023-07-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Or the one in which we confront our elisp n00bishness and try to be better at using it. And we learn new habits to understand our Emacs better. Better late than never.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Die Toteninsel - Confession 91]]></title>
        <id>https://reader.tymoon.eu/article/430</id>
        <link href="https://reader.tymoon.eu/article/430"/>
        <updated>2023-07-22T08:59:01.000Z</updated>
        <summary type="html"><![CDATA[I don't like sleeping. I like the idea of sleep, but the practise of it seems all too often fraught with issues for me. I do consider myself fortunate that I don't suffer from any major sleeping disabilities like insomnia, but my quality of sleep is nevertheless far from ideal, despite adhering to a rather strict and regular sleeping schedule.
I frequently grind my teeth during sleep, and so have started wearing a denture during the night. The denture makes things permanently uncomfortable, and I honestly don't know if it's the major cause of me grinding my teeth at this point. I definitely wouldn't be surprised at all if it exacerbates the problem. I don't know why I grind my teeth, though I figure that since most of the time I can't remember my dreams at all, and when I do, they're usual…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[User-defined Show Method in Julia]]></title>
        <id>https://scientificcoder.com/user-defined-show-method-in-julia</id>
        <link href="https://scientificcoder.com/user-defined-show-method-in-julia"/>
        <updated>2023-07-18T13:24:13.000Z</updated>
        <summary type="html"><![CDATA[I often find myself looking for a way to write custom display methods for Julia types on the REPL. Time to write it down in a short pragmatic blog post, for you and my future self.
What's the issue? When exploring on the Julia REPL or in notebooks, you display your own custom type, then it doesn't look always look the most informative. Let's say you have some type:
struct MyType    some_number::Float64    some_dict::Dictend
You can quickly make an object and display it.
julia> obj = MyType(4.0, Dict(:x => 5))MyType(4.0, Dict(:x => 5))
Okay... Julia basically shows the constructor of the object. I would like to see the field names, or maybe other information. Sometimes I want to see statistical properties for example, instead of the raw data.
As an alternative, to quickly see the field name…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JuliaCon Local Eindhoven 2023]]></title>
        <id>https://scientificcoder.com/juliacon-local-eindhoven-2023</id>
        <link href="https://scientificcoder.com/juliacon-local-eindhoven-2023"/>
        <updated>2023-07-11T07:23:12.000Z</updated>
        <summary type="html"><![CDATA[I am very happy to announce that I am an organizer of the first city-level JuliaCon conference. This will be a one-day event in Eindhoven on December 1st, organized together with the PyData Eindhoven conference on November 30th (the day before).
The website is live: https://juliacon.org/local/eindhoven2023/. You can submit proposals, book early-bird tickets and consider joining as a volunteer.
We named it "JuliaCon Local" to avoid any confusion with the yearly Global JuliaCon, which is typically also associated with a city name. The date is also positioned in the winter, to be out of sync with the summer schedule of the Global JuliaCon conferences. People who could not attend the Global JuliaCon now have another opportunity to meet like-minded Julians and computational scientists in the industry and academia.
My apologies if I notify you via multiple channels, including my blog, but we are really excited about growing our scientific computing community in the area. Please consider sharing the news with your network. Of course everyone on the planet is welcome to join our conference! Hopefully we are paving the path to more city-level JuliaCon conferences.]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to deploy algorithms anywhere?]]></title>
        <id>https://scientificcoder.com/how-to-deploy-algorithms-anywhere</id>
        <link href="https://scientificcoder.com/how-to-deploy-algorithms-anywhere"/>
        <updated>2023-07-09T12:41:35.000Z</updated>
        <summary type="html"><![CDATA[Let's say you are an incredible scientific programmer. You've got some pretty math, machine learning model or scientific computing code. And you want to give it to other users. Maybe even turn it into a real product and make a profit from your work. How do you "deploy" that piece of code? Most scientists do not think much about this problem at all, but it can have a great influence on how you should develop your code.
Basically, we need to take what you developed, turn it into something which can be given to the user, so they can install and use it in their computing environment. What to provide depends entirely on the environment of the user. So you'll first need to understand that: the so called "production environment", the environment in which your "product" or service will operate.

T…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[PSA: Thread-local state is no longer recommended]]></title>
        <id>https://julialang.org/blog/2023/07/PSA-dont-use-threadid/</id>
        <link href="https://julialang.org/blog/2023/07/PSA-dont-use-threadid/"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[PSA: Thread-local state is no longer recommended; Common misconceptions about threadid() and nthreads()
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: package management]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-packages/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-packages/index.html"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Elpa, Melpa, git repo. Vendor package straight from source. It compiled? Fetch some more! Elpa, Melpa, git repo. In more adult terms, we learn to use use-package to fetch, install, initialise, configure useful packages that enhance our Emacs experience.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Kind of REPL]]></title>
        <id>https://ianthehenry.com/posts/my-kind-of-repl/</id>
        <link href="https://ianthehenry.com/posts/my-kind-of-repl/"/>
        <updated>2023-07-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I want to tell you about an idea that has had a huge influence on the way that I write software. And I mean that in the literal sense: it’s changed the way that I write software; it’s re-shaped my development workflow.
The idea is this: you can write programs that modify themselves.
And I don’t mean macros or metaprogramming or anything fancy like that. I mean that you can write programs that edit their own source code. Like, the files themselves. The actual text files on disk that have your source code in them.
That’s not the whole idea, though. There’s more to it: you write programs that can edit themselves, and then you use that as your REPL.
Instead of typing something into a prompt and hitting enter and seeing the output on stdout, you type something into a file and hit some editor ke…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: init begins]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-init-begins/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-init-begins/index.html"/>
        <updated>2023-07-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The first action must, of course, be to colour the bikeshed and set some decent defaults.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ciphers With Vector Symbolic Architectures]]></title>
        <id>http://gigasquid.github.io/blog/2023/07/02/ciphers-with-vector-symbolic-architectures/</id>
        <link href="http://gigasquid.github.io/blog/2023/07/02/ciphers-with-vector-symbolic-architectures/"/>
        <updated>2023-07-02T16:31:00.000Z</updated>
        <summary type="html"><![CDATA[A secret message inside a 10,000 hyperdimensional vector
We’ve seen in previous posts how we can encode data structures using Vector Symbolic Architectures in Clojure. This is an exploration of how we can use this to develop a cipher to transmit a secret message between two parties.
A Hyperdimensional Cipher
Usually, we would develop a dictionary/ cleanup memory of randomly chosen hyperdimensional vectors to represent each symbol. We could do this, but then sharing the dictionary as our key to be able to decode messages would be big. Instead, we could share a single hyperdimensional vector and then use the protect/ rotation operator to create a dictionary of the alphabet and some numbers to order the letters. Think of this as the initial seed symbol and the rest being defined as n+1.



1
…]]></summary>
        <author>
            <name>Squid's Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Emerging from dotemacs bankruptcy the hard way: Prelude]]></title>
        <id>https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy/</id>
        <link href="https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy/index.html"/>
        <updated>2023-06-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Or, finally biting the bullet to redesigning my developerly and writerly experience, from the ground up, with Emacs.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fruity Composable Design Patterns in Julia]]></title>
        <id>https://scientificcoder.com/fruity-composable-design-patterns-in-julia</id>
        <link href="https://scientificcoder.com/fruity-composable-design-patterns-in-julia"/>
        <updated>2023-06-23T12:18:08.000Z</updated>
        <summary type="html"><![CDATA[A design pattern is a repeatable solution to a common coding problem. Design patterns are not something beginner programmers typically think about a lot (that includes most scientists), they are probably focused on making their code work. At least that's what I did when I was a young programmer. At the other extreme such patterns can become a religion for people, where everything has to be a design pattern, or else the code is not considered good enough. However, people who make this mistake are not senior programmers either in my opinion. Senior programmers look for a balance between pure abstraction and simplicity (and many other requirements).
The Julia community has a special standing on design patterns: people don't really like them. In general the Julia community believes that design…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What have you been curious about?]]></title>
        <id>https://www.evalapply.org/posts/what-have-you-been-curious-about/</id>
        <link href="https://www.evalapply.org/posts/what-have-you-been-curious-about/index.html"/>
        <updated>2023-06-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Arguably a more interesting, revealing, and kinder question than "What are you curious about?"]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Spectral Contexts in Go]]></title>
        <id>https://hypirion.com/musings/spectral-contexts-in-go</id>
        <link href="https://hypirion.com/musings/spectral-contexts-in-go"/>
        <updated>2023-06-18T17:00:00.000Z</updated>
        <summary type="html"><![CDATA[Go has phantom types, and we can use them to attach singletons to contexts. Here is a short post on how to do just that.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Summary of Julia Plotting Packages]]></title>
        <id>https://www.stochasticlifestyle.com/?p=1723</id>
        <link href="http://www.stochasticlifestyle.com/summary-of-julia-plotting-packages/"/>
        <updated>2023-06-17T14:23:29.000Z</updated>
        <summary type="html"><![CDATA[This is a repost of my response on the Julia Discourse on this topic. I was asked to make a blog post so here you go!
The “Main” Plotting Packages
Here’s a quick summary of the most widely used plotting packages. I may have missed one, but I haven’t missed one that is very widely used.
Plots.jl is the most used. It’s probably the most documented, used in the most tutorials, and is used in many videos.

Pros: Its main draw is that it has a lot of plugins to other packages through its recipes system, which means that a lot of odd things like `plot(sol::ODESolution)` or showing the sparsity of a `BandedMatrix` just works. With all of these integrations, it’s normally what I would recommend first to newcomers since they will generally get the most done with the least work. It  ... READ MORE
The post Summary of Julia Plotting Packages appeared first on Stochastic Lifestyle.]]></summary>
        <author>
            <name>Christopher Rackauckas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A status update on Kandria, Shirakumo, and me]]></title>
        <id>https://reader.tymoon.eu/article/429</id>
        <link href="https://reader.tymoon.eu/article/429"/>
        <updated>2023-06-13T15:23:27.000Z</updated>
        <summary type="html"><![CDATA[Hello everyone. It's been a while since the last update. I apologise for the silence, things have slipped out of habit a little bit, and besides there's just been a lot of work on things that aren't easy to talk about. I'm still stuck in the R&D phase for the next game, and probably will continue to be there for a few more months before I can properly enter pre-production.
I've really needed some space away from Kandria for a while, too. I did still release patches in the meantime to fix some egregious problems and bring the source back up to date with the latest changes in the Trial engine. The final DLC update with official modding support is still in the works, but given how little response there's been to the level editor update I'm not making it a big priority.
The financials for Kand…]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software Testing for Scientists]]></title>
        <id>https://scientificcoder.com/software-testing-for-scientists</id>
        <link href="https://scientificcoder.com/software-testing-for-scientists"/>
        <updated>2023-06-11T12:35:26.000Z</updated>
        <summary type="html"><![CDATA[I am currently reading the book "Software Engineering for Science." It is one giant complaint about how scientists are terrible at writing maintainable code for themselves. I won't go into all the pain, but I do recognize that pain deeply and have written about it elsewhere. Right now I am reading this book hoping to find solutions. So, what's the proposed solution? The book doesn't provide a simple answer, but one recurring topic is "testing, testing, TESTING!" So, let's talk about testing!
Why don't scientists test their code? Well, it turns out that most scientists do not have a software engineering background, yet they find themselves writing code and software for their work. Alternatively, they may collaborate heavily with software engineers, either in academia or in the industry. If …]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Finding Your Mojo]]></title>
        <id>https://mikeinnes.io/2023/06/06/mojo.html</id>
        <link href="https://mikeinnes.io/2023/06/06/mojo.html"/>
        <updated>2023-06-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Last month a startup called Modular released a new language called Mojo (not to be confused with the existing indigenous one). Based on Python and designed for ML hardware and models, Mojo’s goals (“the usability of Python with the performance of C”) coincide with those of the Julia language, so I’m interested to compare notes.[^1]]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Software demos as deliberate acts of serious play]]></title>
        <id>https://www.evalapply.org/posts/software-demos/</id>
        <link href="https://www.evalapply.org/posts/software-demos/index.html"/>
        <updated>2023-06-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Making a software demo is a form of deliberate, serious play. An act that feeds our curiosity, inventiveness, and drive. It enlivens. It enriches. It entertains. And as we asymptotically approach the A.G.I. that's just around the corner, the capacity for deliberate, serious play will remain distinctively, deeply, deliciously human. Career software people like yours truly may please take note!]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Stop Abbreviating!]]></title>
        <id>urn:uuid:a8d0b690-8938-4743-902a-c6978ba7ef0c</id>
        <link href="https://www.lambdasierra.com/2023/abbreviating/"/>
        <updated>2023-06-03T18:30:00.000Z</updated>
        <summary type="html"><![CDATA[A plea to technical writers: Please stop inventing abbreviations and acronyms without defining them.]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Nebulous Mysteries of Scientific Coding]]></title>
        <id>https://scientificcoder.com/the-nebulous-mysteries-of-scientific-coding</id>
        <link href="https://scientificcoder.com/the-nebulous-mysteries-of-scientific-coding"/>
        <updated>2023-06-03T11:56:48.000Z</updated>
        <summary type="html"><![CDATA[There is a concept in meta-rationality called nebulosity. I will look up the definition later, but in my own words nebulosity means the following:

Nebulosity: a concept or problem is ill-defined. You cannot describe it perfectly. The boundaries of the concept are unclear.

Nebulosity drives rational people crazy, its worse than NP-hard. Rational people need well defined problems. Even if you can prove that the problem cannot be solved, at least the problem itself should be known. But is this always possible?
You may have a problem that you can barely describe to yourself. You may feel some shape of it, intuitively in your mind, but you cannot explain it perfectly. You notice that it is especially difficult to explain the problem to people unknown to the domain around the problem. There is…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scientific Software Institutes]]></title>
        <id>https://scientificcoder.com/scientific-software-institutes</id>
        <link href="https://scientificcoder.com/scientific-software-institutes"/>
        <updated>2023-05-31T12:34:28.000Z</updated>
        <summary type="html"><![CDATA[Have you ever gone through life completely oblivious to something? I recently experienced that sensation when I stumbled upon an entire ecosystem of institutions, only learning about them after starting this blog. These organizations are dedicated to promoting better scientific software, which aligns with the mission of my blog. I wanted to know what's going on, so let's have a look at what's out there.
I noticed the names of the fields of "scientific software" vary a little, but I consider all of these roughly equivalent:

Scientific Software

Research Software Engineering (RSE)

Scientific Computing

Numerical Computing

Yes, there are differences between them, but all of them involve turning scientific knowledge into algorithms and software, and writing software to do scientific researc…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Structures, Data Modelling]]></title>
        <id>https://mikeinnes.io/2023/05/30/data.html</id>
        <link href="https://mikeinnes.io/2023/05/30/data.html"/>
        <updated>2023-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Most programming languages conflate the building of data structures and the modelling of information.]]></summary>
        <author>
            <name>Mike Innes’s Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL and Type Systems]]></title>
        <id>https://hypirion.com/musings/graphql-and-type-systems</id>
        <link href="https://hypirion.com/musings/graphql-and-type-systems"/>
        <updated>2023-05-28T15:45:00.000Z</updated>
        <summary type="html"><![CDATA[Like Go, GraphQL isn't at the forefront of type theory. Let's look at what I miss and whether it would be sensible to add them to the specification.]]></summary>
        <author>
            <name>hyPiRion</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clean Code Tips for Scientists #1 - Reproducible Environments]]></title>
        <id>https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments</id>
        <link href="https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments"/>
        <updated>2023-05-24T12:03:44.000Z</updated>
        <summary type="html"><![CDATA[Author commentary: I am starting a "clean code" blog series with simple tips that you can integrate into your workflow. I often write long, complicated articles that try to teach a lot at once. This is an attempt to chop things up in bite-sized chunks. Note that the Clean Code books by Robert Martin are great, you should read them if you have time! If not, you can follow these short articles :)
If you've written a lot of scripts and shared some of those scripts with colleagues or others, then you probably encountered the problem that the code doesn't always work on their device, or produces different results. When this happens, people may quickly lose trust in your results and begin to ignore your work entirely. So making code reproducible is extremely important! Even if you are a scientis…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[One-Way Comments?]]></title>
        <id>urn:uuid:417d13a1-0e74-48b4-93da-715fbe03736e</id>
        <link href="https://www.lambdasierra.com/2023/building/comments"/>
        <updated>2023-05-20T20:00:00.000Z</updated>
        <summary type="html"><![CDATA[Social media killed comments. What's a lonely blogger to do?]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Julia 1.9 Highlights]]></title>
        <id>https://julialang.org/blog/2023/04/julia-1.9-highlights/</id>
        <link href="https://julialang.org/blog/2023/04/julia-1.9-highlights/"/>
        <updated>2023-05-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlights of the Julia 1.9 release.
Read more]]></summary>
        <author>
            <name>JuliaLang - The Julia programming language</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building a Scalable Inner-Source Ecosystem For Collaborative Development]]></title>
        <id>https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development</id>
        <link href="https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development"/>
        <updated>2023-05-17T12:29:08.000Z</updated>
        <summary type="html"><![CDATA[Three years ago, we decided to embrace the Julia programming language to solve the two language problem at our organization. We want our scientists to join forces with software engineers so that they can work on the same problems together. In our journey, I could have used more books or blogs to guide us on the following topics:

How to build and deploy software products with the Julia language?

How to create the seeds for an effective scientific software ecosystem?

This article is here to help you with the second topic, but I warn you that we had to figure out 1 and 2 at the same time. I intend to write more blog posts about the Julia productization aspects. Yet in the long term, I am betting on the ecosystem to radically improve our organization, so I consider that more important to bl…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[(Re-)Learning CSS as a Backend Dev]]></title>
        <id>urn:uuid:ba04a467-ff41-43b3-907d-2810c12af8bb</id>
        <link href="https://www.lambdasierra.com/2023/building/css"/>
        <updated>2023-05-16T22:00:00.000Z</updated>
        <summary type="html"><![CDATA[My experience as a backend programmer trying to write my own CSS by hand]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Extreme Multi-Threading: C++ and Julia 1.9 Integration]]></title>
        <id>https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration</id>
        <link href="https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration"/>
        <updated>2023-05-11T14:10:09.000Z</updated>
        <summary type="html"><![CDATA[In this tutorial we demonstrate how to call Julia libraries with multiple threads from C++. With the introduction of Julia 1.9 in May 2023, the runtime can dynamically "adopt" external threads, enabling the integration of Julia libraries into multi-threaded codebases written in other languages, such as C++. This article is written in collaboration with Evangelos Paradas, the maestro of algorithm deployment at ASML. Evangelos has been responsible for heavily testing and debugging this multi-threading feature. I humbly repeated the final results after his many trial-and-error attempts and summarized everything for you in this article.
Julia in production
Julia is a general-purpose language designed for scientific and numerical computing, striking a balance between speed and simplicity. The a…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mastering Scientific Programming: Practical Tips and Tricks]]></title>
        <id>https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks</id>
        <link href="https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks"/>
        <updated>2023-05-10T09:46:17.000Z</updated>
        <summary type="html"><![CDATA[Scientific programming involves writing code to solve scientific problems. This can range from simulating complex physical phenomena to analyzing large datasets. While such software is incredibly important, it can be challenging for scientists to learn all the required software development skills. However, by gradually adding specific tricks into your workflow, you can enhance your coding efficiency and effectiveness.
Software skills are important for everyone these days, including scientists. I see certain common risks if you do not spend effort on your code quality:

Incorrect code leads to incorrect results, which means you may have to redo work or even risk damaging your reputation.

Unreproducible code means others, including your future self, cannot verify your work, nor built on top…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to solve the two language problem?]]></title>
        <id>https://scientificcoder.com/how-to-solve-the-two-language-problem</id>
        <link href="https://scientificcoder.com/how-to-solve-the-two-language-problem"/>
        <updated>2023-05-08T07:41:53.000Z</updated>
        <summary type="html"><![CDATA[My professional obsession is solving the Two Culture Problem. How can scientists optimally join forces with software engineers and their principles, so that we can work on the same problems together? How to accelerate the cycle from idea to product? The Two Culture Problem requires a solution to the related Two Language Problem, which has a technical nature. A solution to the technical problem does not guarantee a solution to the organizational problem, but when it comes to engineering cultures you first need to prove the technical solution before you can even begin to tackle the social implications. I have a strong opinion on the best technical solution, but let's review all our options.

As far as I can tell, we have the following alternatives:

Accept the status quo: use a slow and a fa…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Production-ready code for scientists:  3 lessons learned]]></title>
        <id>https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned</id>
        <link href="https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned"/>
        <updated>2023-05-04T09:43:36.000Z</updated>
        <summary type="html"><![CDATA[How do you become a great scientific coder? To understand this, I want to ask others about their journey and share their lessons with you. This post is a collaboration with Keith Myerscough, a mathematical consultant and senior engineer, who helped me with setting up our internal Julia language ecosystem.
Matthijs asked me to write a guest post about what skills are needed to become a great scientific coder. He asked me because I assisted a team of scientists in adopting Julia for their research and development work. I am keen to help: I empathize with people who come up with great ideas but have a hard time wrapping these up into something that can be turned into a product. Even under the assumption that code will be extensively improved upon by others with more software knowledge, that f…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Automate Your Code Quality In Julia]]></title>
        <id>https://scientificcoder.com/automate-your-code-quality-in-julia</id>
        <link href="https://scientificcoder.com/automate-your-code-quality-in-julia"/>
        <updated>2023-04-26T07:47:00.000Z</updated>
        <summary type="html"><![CDATA[Code quality is a topic in Julia that I believe deserves more attention from both users and developers. The Julia language originated in academia and focused heavily on helping scientists write better code, which is going great and deserves much praise! However, to onboard more software engineers and professional organizations we're going to have to invest even further into code quality and automated code quality tools and other methods such as used in the field of "quality assurance". In this article I'll explore the current state in the Julia ecosystem.
At our workplace we have investigated the following tools and practices. I'll start from generic practices and then move on to more advanced tools.

Package structure

Unit testing with Pkg.jl

Automated testing and Continuous Integration…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Learning OCaml: Quoted String Literals]]></title>
        <id>https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/</id>
        <link href="https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/"/>
        <updated>2023-04-20T13:23:00.000Z</updated>
        <summary type="html"><![CDATA[While learning OCaml I’ve noticed one curious feature - it has two types of string literals. The first type are the common and quite familiar “double-quoted string literals” (or perhaps simply “string literals”?):]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Art of Multiple Dispatch]]></title>
        <id>https://scientificcoder.com/the-art-of-multiple-dispatch</id>
        <link href="https://scientificcoder.com/the-art-of-multiple-dispatch"/>
        <updated>2023-04-20T09:01:49.000Z</updated>
        <summary type="html"><![CDATA[I love thinking visually by drawing doodles and schematics for my work. It's one of my favorite things to do, next to coding. When working with the Julia language, one visualization I enjoy is seeing the type space of a method that you are dispatching on. Normally I do this in my mind's eye, but let me clarify this by drawing some actual figures.
To start with the basics; Julia has functions and methods. A function is simply the name, like push! or read . Methods are specific definitions of a function, for certain types of arguments. Take for example push!(s::Set, x) or read(io::IO) . From an object-oriented perspective you could say that methods are instances of functions.

For any given method you can consider the dispatching as slicing a part of the entire possible type space of that gi…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[My Target Audience]]></title>
        <id>https://scientificcoder.com/my-target-audience</id>
        <link href="https://scientificcoder.com/my-target-audience"/>
        <updated>2023-04-18T11:46:15.000Z</updated>
        <summary type="html"><![CDATA[What kind of people do I have in mind while writing this blog? People who share my professional mission of course! What is that mission you ask? Let me elaborate.
From Research to Engineering
I am a scientist who danced with startups and moved into industry. I've spend years doing research, and years doing software product development. During those years I have gotten slightly frustrated with the process of moving ideas from research to production, primarily in my favorite field of scientific computing.
The typical problem is that the time from research to production can be long, often spanning multiple years per project, and the process can be error prone. Some common smaller issues I see arising in many of our projects:

Unreproducible, unexplainable scripts or notebooks in research

Eff…]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Generalized Macros]]></title>
        <id>https://ianthehenry.com/posts/generalized-macros/</id>
        <link href="https://ianthehenry.com/posts/generalized-macros/"/>
        <updated>2023-04-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I’ve been writing a lot of Janet lately, and I’ve been especially enjoying my time with the macro system.
Janet macros are Common Lisp-flavored unhygienic gensym-style macros. They are extremely powerful, and very easy to write, but they can be pretty tricky to get right. It’s easy to make mistakes that lead to unwanted variable capture, or to write macros that only work if they’re expanded in particular contexts, and it can be pretty difficult to detect these problems ahead of time.
So people have spent a lot of time thinking about ways to write macros more safely – sometimes at the cost of expressiveness or simplicity – and almost all recent languages use some sort of hygienic macro system that defaults to doing the right thing.
But as far as I know, no one has approached macro systems f…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why this blog?]]></title>
        <id>https://scientificcoder.com/why-this-blog</id>
        <link href="https://scientificcoder.com/why-this-blog"/>
        <updated>2023-04-16T17:27:18.000Z</updated>
        <summary type="html"><![CDATA[My goal in life is to follow my curiosity and help others with the knowledge I uncover. A solid way to help people is to reflect on the last years and think about what would have helped your past self. In my case, I have been busy trying to develop and deploy numerical computing applications with the Julia language. One thing that I found lacking was good material on how to do numerical computing professionally in the industry, something I learned is sometimes called "scientific software engineering". A book or blog about large-scale development and deployment into production systems would have helped me tremendously. I had to learn most things the hard way through trial and error.
Since what I need doesn't exist, we will have to make it exist! That's this blog!
I have been blogging about …]]></summary>
        <author>
            <name>Matthijs Cox</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building Foundations]]></title>
        <id>urn:uuid:f9aaf15d-37c1-4a8e-bab7-9ccd0b60d12c</id>
        <link href="https://www.lambdasierra.com/2023/building/"/>
        <updated>2023-04-13T22:00:42.000Z</updated>
        <summary type="html"><![CDATA[On starting a new blog, abandoning the stability of WordPress for the creative freedom of do-it-yourself.]]></summary>
        <author>
            <name>Lambda/Sierra</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kandriaの日本語アップデートはリリースです！]]></title>
        <id>https://reader.tymoon.eu/article/428</id>
        <link href="https://reader.tymoon.eu/article/428"/>
        <updated>2023-04-12T12:55:57.000Z</updated>
        <summary type="html"><![CDATA[Kandriaの日本語アップデートはリリースです！
(私の日本語はまだまだですから、すみません)
私のゲームは日本語でリリースのは夢ですからうれしい！Mimirin(@mioda833)さんはKandriaの日本語バーシオンを作ってありがとう。素晴らしい仕事をできた。
今からSteamとItch.ioとKandria.comでアップデーとをダウンロードできる。]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Janet?]]></title>
        <id>https://ianthehenry.com/posts/why-janet/</id>
        <link href="https://ianthehenry.com/posts/why-janet/"/>
        <updated>2023-04-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I never thought it could happen to me. I mean, parentheses? In this day and age? But for the past couple years, my go-to programming language for fun side projects has been a little Lisp dialect called Janet.
(print "hey janet")

I like Janet so much that I wrote an entire book about it, and put it on The Internet for free, in the hopes of attracting more Janetors to the language.
I think you should read it, but I know that you don’t believe me, so I’m going to try to convince you. Here’s my attempt at a sales pitch: here is why you – you of all people – should give Janet a chance.
Janet is simple
Janet is an imperative language with first-class functions, a single namespace for identifiers, and lexical block scoping. The core of the language is very small, consisting of only eight instruc…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Updating the Bundler Version Specified in Gemfile.lock]]></title>
        <id>https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/</id>
        <link href="https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/"/>
        <updated>2023-04-09T16:29:00.000Z</updated>
        <summary type="html"><![CDATA[You might have noticed one change introduced with Bundler 2.3 - it now requires you to run the version of Bundler that’s specified in your Gemfile.lock.1 This means that occasionally you might see something like this: https://bundler.io/blog/2022/01/23/bundler-v2-3.html &#8617;]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blog Comments are Back]]></title>
        <id>https://batsov.com/articles/2023/04/09/blog-comments-are-back/</id>
        <link href="https://batsov.com/articles/2023/04/09/blog-comments-are-back/"/>
        <updated>2023-04-09T15:57:00.000Z</updated>
        <summary type="html"><![CDATA[This is going to be one super short post.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cold restart whole system after total outage]]></title>
        <id>https://www.evalapply.org/posts/cold-restart-total-outage/</id>
        <link href="https://www.evalapply.org/posts/cold-restart-total-outage/index.html"/>
        <updated>2023-04-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA["What are folks’ views on systems so large where cold-starting the whole system is almost impossible?"... — M'colleague, Shivam, In A Slackroom Next Door.]]></summary>
        <author>
            <name>Eval / Apply is pure magic</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Janet for Mortals]]></title>
        <id>https://ianthehenry.com/posts/janet-for-mortals/</id>
        <link href="https://ianthehenry.com/posts/janet-for-mortals/"/>
        <updated>2023-04-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I wrote a book.
It’s called Janet for Mortals, and it’s free, and it’s on the internet, and you can read it right now.
And you should read it right now, instead of reading this blog post, because this blog post is not very interesting if you haven’t read the book. Heck, this blog post is not very interesting even if you have read the book. This blog post is a thinly-veiled promotion for my book to slip into my newsletter and RSS feed, with just enough additional content to pad it out to the length of a real post.
The book is about Janet, a programming language that I have written about before. I’ve been using Janet a lot lately, and I’ve been having a lot of fun with it, and I think that more people should know about it so that they can have fun with it too. People like you.
I’m not really…]]></summary>
        <author>
            <name>Ian Henry</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[次は…何？ - April Kandria Update]]></title>
        <id>https://reader.tymoon.eu/article/427</id>
        <link href="https://reader.tymoon.eu/article/427"/>
        <updated>2023-04-03T10:48:00.000Z</updated>
        <summary type="html"><![CDATA[Another month gone by. There's no major updates this month, since we just had the level editor release last month. However, there is a somewhat major update coming out next week!
You may have guessed from the title, but we're adding Japanese localisation to the game! It'll release on Wednesday, 12th of April. As someone that's been trying to learn Japanese for a long time, this is another step in the development that I've been looking forward to very much.

I'm also really glad that we can release this already, so it'll be well out by the time I visit Tokyo Game Show in September!
Other news
With the level editor and the beginning of the modding support already in place, I've taken a bit of a step back from Kandria development for a bit, and instead focused on working on a lot of other stuff that's been way overdue, like moving and upgrading our servers, taking care of my mental health, and starting work on pre-pre-production for the next game.
However, Kandria development is not yet done. The second and final major update with an official modding API is still coming. I don't have a release date for that yet, so I hope you remain patient!
In the meantime, my paper for the European Lisp Symposium in Amsterdam was accepted, so I will be presenting Kandria there. The paper is quite technical, but if you're interested in Common Lisp, it might be worth a read. And if you're going to be in Amsterdam, let me know. I'd be happy to chat!
That's it for now
A rather short update this month, but if you're interested in the details of the pre-pre-production process, come on hang out in the Shirakumo channel with the rest of us! We're discussing all the improvements to Trial there.]]></summary>
        <author>
            <name>妖怪世捨て人</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How are OCaml Programmers Called?]]></title>
        <id>https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/</id>
        <link href="https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/"/>
        <updated>2023-03-20T08:02:00.000Z</updated>
        <summary type="html"><![CDATA[Ruby programmers are commonly called Rubyists. Python programmers are often called Pythonistas. Lisp programmers are widely known as Lispers. Clojure programmers are sometimes called Clojurians.]]></summary>
        <author>
            <name>(think)</name>
        </author>
    </entry>
</feed>
{
  "sources": [
    {
      "title": "Stochastic Lifestyle",
      "feedUrl": "http://www.stochasticlifestyle.com/feed/",
      "siteUrl": "https://www.stochasticlifestyle.com/",
      "articles": [
        {
          "id": "https://www.stochasticlifestyle.com/?p=1723",
          "author": "Christopher Rackauckas",
          "description": "This is a repost of my response on the Julia Discourse on this topic. I was asked to make a blog post so here you go!\nThe “Main” Plotting Packages\nHere’s a quick summary of the most widely used plotting packages. I may have missed one, but I haven’t missed one that is very widely used.\nPlots.jl is the most used. It’s probably the most documented, used in the most tutorials, and is used in many videos.\n\nPros: Its main draw is that it has a lot of plugins to other packages through its recipes system, which means that a lot of odd things like `plot(sol::ODESolution)` or showing the sparsity of a `BandedMatrix` just works. With all of these integrations, it’s normally what I would recommend first to newcomers since they will generally get the most done with the least work. It  ... READ MORE\nThe post Summary of Julia Plotting Packages appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/summary-of-julia-plotting-packages/",
          "publishedOn": "2023-06-17T14:23:29.000Z",
          "wordCount": 2301,
          "title": "Summary of Julia Plotting Packages",
          "imageUrl": "//www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG"
        },
        {
          "id": "https://www.stochasticlifestyle.com/?p=1705",
          "author": "Christopher Rackauckas",
          "description": "Part of the COMPUTATIONAL ABSTRACTIONS FOR PROBABILISTIC AND DIFFERENTIABLE PROGRAMMING WORKSHOP\nAbstract: Many probabilistic programming languages (PPLs) attempt to integrate with equation solvers (differential equations, nonlinear equations, partial differential equations, etc.) from the inside, i.e. the developers of the PPLs like Stan provide differential equation solver choices as part of the suite. However, as equation solvers are an entire discipline to themselves with many active development communities and subfields, this places an immense burden on PPL developers to keep up with the changing landscape of tens of thousands of independent researchers. In this talk we will explore how Julia PPLs such as Turing.jl support of equation solvers from the outside, i.e. how the tools of differentiable programming allows equation solver libraries to be compatible with PPLs  ... READ MORE\nThe post Integrating equation solvers with probabilistic programming through differentiable programming appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/integrating-equation-solvers-with-probabilistic-programming-through-differentiable-programming/",
          "publishedOn": "2022-11-24T01:04:59.000Z",
          "wordCount": 1244,
          "title": "Integrating equation solvers with probabilistic programming through differentiable programming",
          "imageUrl": "//www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG"
        },
        {
          "id": "http://www.stochasticlifestyle.com/?p=1681",
          "author": "Christopher Rackauckas",
          "description": "Automatic differentiation of a “solver” is a subject with many details for doing it in the most  effective form. For this reason, there are a lot of talks and courses that go into lots of depth on the topic. I recently gave a talk on some of the latest stuff in differentiable simulation with the American Statistical Association, and have some detailed notes on such adjoint derivations as part of the 18.337 Parallel Computing and Scientific Machine Learning graduate course at MIT. And there are entire organizations like my SciML Open Source Software Organization which work day-in and day-out on the development of new differentiable solvers.\nI’ll give a brief summary of all my materials here below.\nContinuous vs Discrete Differentiation of Solvers\nAD of a solver can be done in essentially two different ways: either directly performing automatic  ... READ MORE\nThe post Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better? appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/direct-automatic-differentiation-of-solvers-vs-analytical-adjoints-which-is-better/",
          "publishedOn": "2022-10-11T07:09:53.000Z",
          "wordCount": 3134,
          "title": "Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better?",
          "imageUrl": "http://www.stochasticlifestyle.com/wp-content/uploads/2022/10/Capture7.png"
        }
      ]
    },
    {
      "title": "Andrej Karpathy blog",
      "feedUrl": "http://karpathy.github.io/feed.xml",
      "siteUrl": "http://karpathy.github.io/",
      "articles": []
    },
    {
      "title": "Mosè Giordano",
      "feedUrl": "https://giordano.github.io/blog/feed.xml",
      "siteUrl": "http://giordano.github.io",
      "articles": []
    },
    {
      "title": "Shuhei Kadowaki&#39;s homepage",
      "feedUrl": "https://aviatesk.github.io/feed.xml",
      "siteUrl": "https://aviatesk.github.io/",
      "articles": []
    },
    {
      "title": "Mike Innes’s Blog",
      "feedUrl": "https://mikeinnes.io/feed.xml",
      "siteUrl": "/",
      "articles": [
        {
          "id": "https://mikeinnes.io/2023/06/06/mojo.html",
          "author": null,
          "description": "Last month a startup called Modular released a new language called Mojo (not to be confused with the existing indigenous one). Based on Python and designed for ML hardware and models, Mojo’s goals (“the usability of Python with the performance of C”) coincide with those of the Julia language, so I’m interested to compare notes.[^1]",
          "link": "https://mikeinnes.io/2023/06/06/mojo.html",
          "publishedOn": "2023-06-06T00:00:00.000Z",
          "wordCount": 2201,
          "title": "Finding Your Mojo",
          "imageUrl": null
        },
        {
          "id": "https://mikeinnes.io/2023/05/30/data.html",
          "author": null,
          "description": "Most programming languages conflate the building of data structures and the modelling of information.",
          "link": "https://mikeinnes.io/2023/05/30/data.html",
          "publishedOn": "2023-05-30T00:00:00.000Z",
          "wordCount": 568,
          "title": "Data Structures, Data Modelling",
          "imageUrl": null
        },
        {
          "id": "https://mikeinnes.io/2023/02/18/bing.html",
          "author": null,
          "description": "Conversations with ChatGPT, a recently released chatbot, reportedly cost its inventors at OpenAI a few cents each. By Internet standards this is shockingly expensive. Though it’s touted as the future of the search engine, any company scaling the technology up to the world’s 10 billion or so daily queries will face suffocating costs. The milestone for Artificial Intelligence may be that it’s now about as expensive as the real thing: Amazon’s mechanical turk service (which Jeff Bezos called “artificial artificial intelligence”) also pays its human labourers a few cents per question-response task.",
          "link": "https://mikeinnes.io/2023/02/18/bing.html",
          "publishedOn": "2023-02-18T00:00:00.000Z",
          "wordCount": 1300,
          "title": "Deus Ex Bing",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Tom Kwong's Infinite Loop",
      "feedUrl": "https://ahsmart.com/feed.xml",
      "siteUrl": "https://ahsmart.com/",
      "articles": []
    },
    {
      "title": "JuliaLang - The Julia programming language",
      "feedUrl": "https://julialang.org/feed.xml",
      "siteUrl": "https://julialang.org/",
      "articles": [
        {
          "id": "https://julialang.org/blog/2023/07/PSA-dont-use-threadid/",
          "author": null,
          "description": "PSA: Thread-local state is no longer recommended; Common misconceptions about threadid() and nthreads()\nRead more",
          "link": "https://julialang.org/blog/2023/07/PSA-dont-use-threadid/",
          "publishedOn": "2023-07-06T00:00:00.000Z",
          "wordCount": 2083,
          "title": "PSA: Thread-local state is no longer recommended",
          "imageUrl": "/assets/images/julia-open-graph.png"
        },
        {
          "id": "https://julialang.org/blog/2023/04/julia-1.9-highlights/",
          "author": null,
          "description": "Highlights of the Julia 1.9 release.\nRead more",
          "link": "https://julialang.org/blog/2023/04/julia-1.9-highlights/",
          "publishedOn": "2023-05-19T00:00:00.000Z",
          "wordCount": 3574,
          "title": "Julia 1.9 Highlights",
          "imageUrl": "/assets/images/julia-open-graph.png"
        }
      ]
    },
    {
      "title": "Ted Kaminski",
      "feedUrl": "https://www.tedinski.com/feed.xml",
      "siteUrl": "http://www.tedinski.com/",
      "articles": []
    },
    {
      "title": "Invenia Blog",
      "feedUrl": "https://invenia.github.io/blog/feed.xml",
      "siteUrl": "https://invenia.github.io/blog/",
      "articles": []
    },
    {
      "title": "Two-Bit History",
      "feedUrl": "https://twobithistory.org/feed.xml",
      "siteUrl": "https://twobithistory.org/",
      "articles": []
    },
    {
      "title": "programming (and other) musings",
      "feedUrl": "https://jao.io/blog/rss.xml",
      "siteUrl": "https://jao.io/blog/",
      "articles": [
        {
          "id": "https://jao.io/blog/in-no-particular-order.html",
          "author": null,
          "description": "Interesting bits elsewhere:\n\n\n\nThe influence of Self\n10 quick Mastodon tips\nWriting with LaTeX\nTrying out Mathstodon\nOlder entries\n\n\n\nTags: sundry",
          "link": "https://jao.io/blog/in-no-particular-order.html",
          "publishedOn": "2022-11-21T05:05:00.000Z",
          "wordCount": 61,
          "title": "in no particular order",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/the-cambridge-centenary-ulysess.html",
          "author": null,
          "description": "Physically, this book is obnoxious: huge, wasted margins frame a reproduction\nof the original text that painstakingly tries to look as shabby as it was,\nincluding faded letters and all its typos, and its size and weight border on\nthe unmanageable.  Ah, but the contents is really good: on the one hand\nthere's of course Joyce's text itself (after twenty years since the last time,\nmy English, with the help of the annotations, was closer to be up to the task,\nand enjoy it even when it wasn't), and next to it the essays introducing every\nchapter, which i found (with an exception or two) very informative and,\nsometimes, even illuminating.  I was also delighted to confirm that the\nparallels with Homer's work are a strecht to say the least: i quickly read The\nOdyssey in preparation and found it, again, boring at best and disheartening\nin its depiction of the society of the time (not that Joyce's Dublin was\nwithout its blemishes, but you hopefully get my point).\n\n\n\nSo, just get an electronic version and enjoy!\n\nTags: books",
          "link": "https://jao.io/blog/the-cambridge-centenary-ulysess.html",
          "publishedOn": "2022-10-30T01:50:00.000Z",
          "wordCount": 219,
          "title": "the cambridge centenary ulysess",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/visual-differential-geometry-and-forms.html",
          "author": null,
          "description": "This is a beautiful book.  Crystal-clear and insightful explanations, with the\nright amount of historical background and quite original outlook (without\ngoing overboard).  I can only echo what other quoted reviewers have said: i\nwish i had had this book when i was studying these matters in earnest, i'm\npretty sure i've understood some fine points for the first time only now!  I'd\nalso perhaps make an exception on the last part (or act, as Needham calls\nthem) on differential forms, which feels at times a bit rushed and in need of\nsome editing, and it'd had been wonderful if the manufacture of the book were\nup to its contents: most images and photographs look really, really cheap, and\nthere are more typos than granted, which is a pity (as to other figures,\nthey're decent, although it must be said that Needham is not Penrose, but then\nwho is?).\n\nTags: books",
          "link": "https://jao.io/blog/visual-differential-geometry-and-forms.html",
          "publishedOn": "2022-10-30T00:30:00.000Z",
          "wordCount": 193,
          "title": "visual differential geometry and forms",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "wingolog",
      "feedUrl": "https://wingolog.org/feed/atom",
      "siteUrl": "https://wingolog.org/",
      "articles": [
        {
          "id": "https://wingolog.org/archives/2023/07/25/on-the-ministry-for-the-future",
          "author": null,
          "description": "Good evening, comrades.  This evening, words on reading.\nSince the pandemic, or maybe a bit before, I picked up a new habit: if I hear of a book which is liked by someone I find interesting, I buy a copy.\nGetting to this point required some mental changes.  When I was younger, buying lots of books wasn’t really thinkable; as a student I was well-served by libraries in my mother tongue, and never picked up the habit of allocating my meager disposable income to books.  I did like bookstores, especially used bookstores, but since leaving university I emigrated to countries that spoke different languages; the crate-digging avenue was less accessible to me.\nI also had to make peace with capitalism, or as the comic says it, “participating in society”.  We all know that Amazon imposes a dialectic…",
          "link": "https://wingolog.org/archives/2023/07/25/on-the-ministry-for-the-future",
          "publishedOn": "2023-07-25T19:49:27.000Z",
          "wordCount": 833,
          "title": "on « the ministry for the future »",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/06/15/parallel-futures-in-mobile-application-development",
          "author": null,
          "description": "Good morning, hackers.  Today I'd like to pick up my series on mobile\napplication development.  To recap, we looked at:\nTaking a step back, with the exception of Ark which has a special\nrelationship to HarmonyOS and Huawei, these frameworks are all layers on\ntop of what is provided by Android or iOS.  Why would you do that?\nPresumably there are benefits to these interstitial layers; what are\nthey?\nProbably the most basic answer is that an app framework layer offers the\npromise of abstracting over the different platforms.  This way you can\njust have one mobile application development team instead of two or\nmore.  In practice you still need to test on iOS and Android at least,\nbut this is cheaper than having fully separate Android and iOS teams.\nGiven that we are abstracting over platforms, …",
          "link": "https://wingolog.org/archives/2023/06/15/parallel-futures-in-mobile-application-development",
          "publishedOn": "2023-06-15T14:02:16.000Z",
          "wordCount": 4142,
          "title": "parallel futures in mobile application development",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/05/20/approaching-cps-soup",
          "author": null,
          "description": "Good evening, hackers.  Today's missive is more of a massive, in the\nsense that it's another presentation transcript-alike; these things always\ntranslate to many vertical pixels.\nIn my defense, I hardly ever give a\npresentation twice, so not only do I miss out on the usual\nper-presentation cost amortization and on the incremental improvements\nof repetition, the more dire error is that whatever message I might have\ncan only ever reach a subset of those that it might interest; here at\nleast I can be more or less sure that if the presentation would interest\nsomeone, that they will find it.\nSo for the time being I will try to\nshare presentations here, in the spirit of, well, why the hell not.\nLast week I gave a training talk to  collaborators on the intermediate\nrepresentation used by 's compi…",
          "link": "https://wingolog.org/archives/2023/05/20/approaching-cps-soup",
          "publishedOn": "2023-05-20T07:10:03.000Z",
          "wordCount": 4961,
          "title": "approaching cps soup",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/05/02/structure-and-interpretation-of-ark",
          "author": null,
          "description": "Hello, dear readers!  Today's article describes Ark, a new\nJavaScript-based mobile development platform.  If you haven't read them\nyet, you might want to start by having a look at my past articles on\n,\n,\n,\nand\n;\nhaving a common understanding of the design space will help us\nunderstand where Ark is similar and where it differs.CapacitorReact\nNativeNativeScriptFlutter\nIf I had to bet, I would guess that you have not heard of Ark.  (I\ncertainly hadn't either, when commissioned to do this research series.)\nTo a first approximation, Ark—or rather, what I am calling Ark; I don't\nactually know the name for the whole architecture—is a loosely\nFlutter-like UI library implemented on top of a dialect of JavaScript,\nwith build-time compilation to bytecode (like Hermes) but also with\nsupport for just-i…",
          "link": "https://wingolog.org/archives/2023/05/02/structure-and-interpretation-of-ark",
          "publishedOn": "2023-05-02T09:13:41.000Z",
          "wordCount": 4129,
          "title": "structure and interpretation of ark",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/26/structure-and-interpretation-of-flutter",
          "author": null,
          "description": "Good day, gentle hackfolk.  Like an\n fiddler I would\nappear to be deep in the groove, playing endless variations on a theme,\nin this case mobile application frameworks.  But one can only recognize\nnovelty in relation to the familiar, and today's note is a departure: we\nare going to look at , a UI toolkit based\nnot on JavaScript but on the  language.old-timeFlutterDart\nWhere to start, even?  The problem is big enough that I'll\napproach it from three different angles: from the past, from the top,\nand from the bottom.\nWith the other frameworks we looked at, we didn't have to say much about\ntheir use of JavaScript.  JavaScript is an obvious choice, in 2023 at\nleast: it is ubiquitous, has high quality implementations, and as a\nlanguage it is quite OK and progressively getting better.  Up to now…",
          "link": "https://wingolog.org/archives/2023/04/26/structure-and-interpretation-of-flutter",
          "publishedOn": "2023-04-26T13:50:01.000Z",
          "wordCount": 3107,
          "title": "structure and interpretation of flutter",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/24/structure-and-interpretation-of-nativescript",
          "author": null,
          "description": "Greetings, hackers tall and hackers small!\nWe're only a few articles in to this series on mobile application development frameworks, but I feel like we are already well into our journey.  We started our trip through the design space with a look at \n,\nwhich defines its user interface in terms of the web platform, and only\ncalls out to iOS or Android native features as needed.  We proceeded\non to ,\nwhich moves closer to native by rendering to platform-provided UI\nwidgets, layering a cross-platform development interface on top.Ionic /\nCapacitorReact\nNative\nToday's article takes an in-depth look at , whose point in the design space is further on the road towards\nthe platform, unabashedly embracing the specificities of the API\navailable on iOS and Android, exposing these interfaces directly to …",
          "link": "https://wingolog.org/archives/2023/04/24/structure-and-interpretation-of-nativescript",
          "publishedOn": "2023-04-24T09:10:58.000Z",
          "wordCount": 2626,
          "title": "structure and interpretation of nativescript",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/21/structure-and-interpretation-of-react-native",
          "author": null,
          "description": "Hey hey!  Today's missive continues exploring the space of JavaScript\nand mobile application development.\nYesterday we looked into , giving a brief\nstructural overview of what Capacitor apps look like under the hood and\nhow this translates to three aspects of performance: startup latency, jank,\nand peak performance.  Today we'll apply that same approach to another\npopular development framework, .Ionic / CapacitorReact Native\nI don't know about you, but I find that there is so much marketing smoke\nand lights around the whole phenomenon that is React and React Native\nthat sometimes it's hard to see what's actually there.  This is\ncompounded by the fact that the programming paradigm espoused by React\n(and its \"native\" cousin that we are looking at here) is so effective at\nenabling JavaScript …",
          "link": "https://wingolog.org/archives/2023/04/21/structure-and-interpretation-of-react-native",
          "publishedOn": "2023-04-21T08:20:17.000Z",
          "wordCount": 2918,
          "title": "structure and interpretation of react native",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/20/structure-and-interpretation-of-capacitor-programs",
          "author": null,
          "description": "Good day, hackers!  Today's note is a bit of a departure from compilers\ninternals.  A client at work recently asked me to look into\ncross-platform mobile application development and is happy for the\nresults to be shared publically.  This, then, is the first in a series\nof articles.\nI'll be starting by taking a look at\n/,\n,\n,\n/, and then a\nmystery guest.  This article will set the stage and then look into\nIonic/Capacitor.IonicCapacitorReact NativeNativeScriptFlutterDart\nThe angle I am taking is, if you were designing a new mobile operating\nsystem that uses JavaScript as its native application development\nlanguage, what would it mean to adopt one of these as your primary app\ndevelopment toolkit?  It's a broad question but I hope we can come up\nwith some useful conclusions.\nI'm going to appro…",
          "link": "https://wingolog.org/archives/2023/04/20/structure-and-interpretation-of-capacitor-programs",
          "publishedOn": "2023-04-20T10:20:32.000Z",
          "wordCount": 2495,
          "title": "structure and interpretation of capacitor programs",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/18/sticking-point",
          "author": null,
          "description": "Good evening, gentle readers.  A brief note tonight, on a sticky place.\nSee, I have too many projects right now.\nIn and of itself this is not so much of a problem as a condition. I know\nmy limits; I keep myself from burning out by shedding load, and there is\na kind of priority list of which projects keep adequate service levels.\nFirst come the tiny humans that are in my care who need their butts\nwiped and bodies translated to and from school or daycare and who --\nwell you know the old Hegelian trope, that the dialectic crank of\nhistory doesn't turn itself, that it takes actions from people to\nsynthesize the thesis and the antithesis, and that even History itself\nisn't always monotonic; in the same way, bedtime is a reality,\nthere are the material conditions of sleepiness and\nyou're-gonna-b…",
          "link": "https://wingolog.org/archives/2023/04/18/sticking-point",
          "publishedOn": "2023-04-18T20:23:49.000Z",
          "wordCount": 751,
          "title": "sticking point",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us",
          "author": null,
          "description": "Good day, comrades!\nToday I'd like to share the good news that WebAssembly is finally coming\nfor the rest of us weirdos.\nThis is a transcript-alike of a talk that I gave last week at , a gathering in Berlin of\npeople that are using \"technologies beyond the mainstream\" to get things\ndone: Haskell, Clojure, Elixir, and so on.  PDF slides , and I'll link the video too when it becomes available.BOB\n2023here\nWebAssembly: what even is it?  Not a programming language that\nyou would write software in, but rather a compilation target: a sort of\nassembly language, if you will.\nIf you look at what the characteristics of WebAssembly are as an\nabstract machine, to me there are two main areas in which it is an\nadvance over the alternatives.\nFirstly it's \"close to the metal\" -- if you compile for example…",
          "link": "https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us",
          "publishedOn": "2023-03-20T09:06:42.000Z",
          "wordCount": 5426,
          "title": "a world to win: webassembly for the rest of us",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Planet Lisp",
      "feedUrl": "http://planet.lisp.org/rss20.xml",
      "siteUrl": "http://planet.lisp.org/",
      "articles": [
        {
          "id": "http://funcall.blogspot.com/2023/07/the-garden-path.html",
          "author": null,
          "description": "Follow me along this garden path (based on true events).\nWe have a nifty program and we want it to be flexible, so it has a\n  config file.  We make up some sort of syntax that indicates\n  key/value pairs.  Maybe we’re hipsters and use YAML.  Life is good.\nBut we find that we to configure something dynamically, say based\n  on the value of an environment variable.  So we add some escape\n  syntax to the config file to indicate that a value is a variable\n  rather than a literal.  But sometimes the string needs a little work\n  done to it, so we add some string manipulation features to the\n  escape syntax.\nAnd when we deploy the program, we find that we’ve want to\n  conditionalize part of the configuration based on the deployment, so\n  we add a conditional syntax to our config language.  But\n  conditionals are predicated on boolean values, so we add booleans to\n  our config syntax.  Or maybe we make strings do double duty.  Of\n  course we need the basic boolean operators, too.\nBut there’s a lot of duplication across our configurations, so we\n  add the ability to indirectly refer to other config files.  That\n  helps to some extent, but there’s a lot of stuff that is almost\n  duplicated, except for a little variation.  So we add a way to make\n  a configuration template.  Templating needs variables and quoting,\n  so we invent a syntax for those as well.\nWe’re building a computer language by accident, and without a clear\n  plan it is going to go poorly.  Are there data types (aside from\n  strings)?  Is there a coherent type system?  Are the variables\n  lexically scoped?  Is it call-by-name or call-by-value?  Is it\n  recursive?  Does it have first class (or even second class)\n  procedures?  Did we get nested escaping right?  How about quoted\n  nested escaping?  And good grief our config language is in YAML!\nIf we had some forethought, we would have realized that we were\n  designing a language and we would have put the effort into making it\n  a good one.  If we’re lazy, we’d just pick an existing good\n  language.  Like Lisp.",
          "link": "http://funcall.blogspot.com/2023/07/the-garden-path.html",
          "publishedOn": "2023-07-26T18:13:00.000Z",
          "wordCount": 3851,
          "title": "Joe Marshall: The Garden Path",
          "imageUrl": null
        },
        {
          "id": "http://quotenil.com/dref.html",
          "author": null,
          "description": "DEFSECTION needs to refer to definitions that do not create a\nfirst-class object (e.g. stuff like (*DOCUMENT-LINK-TO-HYPERSPEC*\nVARIABLE)), and since its original release in 2014, a substantial\npart of\nPAX dealt\nwith locatives and references, which reify definitions. This release\nfinally factors that code out into a library called\nDRef,\nallowing PAX to focus on documentation. Being very young, DRef lives\nunder adult supervision, in a\nsubdirectory\nof the PAX repository.\nDREF> (definitions 'pax:document-object*)\n(#<DREF DOCUMENT-OBJECT* GENERIC-FUNCTION>\n #<DREF DOCUMENT-OBJECT* (METHOD NIL (MGL-PAX-BLOG::CATEGORY T))>\n #<DREF DOCUMENT-OBJECT* (METHOD NIL (UNKNOWN-DREF T))>\n #<DREF DOCUMENT-OBJECT* (METHOD NIL (MGL-PAX::CLHS-DREF T))>\n #<DREF DOCUMENT-OBJECT* (METHOD NIL (MGL-PAX::INCLUDE-DR…",
          "link": "http://quotenil.com/dref.html",
          "publishedOn": "2023-07-26T00:00:00.000Z",
          "wordCount": 484,
          "title": "Gábor Melis: DRef and PAX v0.3",
          "imageUrl": null
        },
        {
          "id": "http://funcall.blogspot.com/2023/07/playing-with-ai.html",
          "author": null,
          "description": "Write a polemic about how omitting conditional expressions from a\n  language is lazy and stupid.\nConditional expressions are a fundamental feature of any\n  programming language that claims to be expressive, concise and\n  elegant. They allow programmers to write complex logic in a single\n  line, without the need for verbose and repetitive if-else\n  statements. They also enable functional programming paradigms, such\n  as pattern matching and recursion, that are essential for solving\n  many problems efficiently and elegantly.\n \n\nOmitting conditional expressions from a language is a sign\n  of laziness and stupidity on the part of the language designers. It\n  shows that they do not care about the needs and preferences of their\n  users, who have to write more code, introduce more bugs, and suffer\n  more frustration. It also shows that they do not understand the\n  principles and benefits of functional programming, which have been\n  proven by decades of research and practice. They are stuck in an\n  imperative mindset, where everything has to be done with side\n  effects and mutations.\n \n\nA language without conditional expressions is a crippled\n  language, that forces programmers to use hacks and workarounds to\n  achieve what should be simple and natural. It is a language that\n  discourages creativity, elegance and readability. It is a language\n  that should be avoided by anyone who values their time, sanity and\n  reputation.\nSome examples of programming languages that don't have conditional expressions are:\n  \nCoffeeScript\nGo\nMATLAB\nPascal\nRust\n\nThis isn't bad, but I wanted more vitriol.  I asked and I got a\n  screed that could have come out of comp.lang.functional\n  Unfortunately, it thought better of it and erased its own output\n  before I could snapshot it.",
          "link": "http://funcall.blogspot.com/2023/07/playing-with-ai.html",
          "publishedOn": "2023-07-08T17:21:00.000Z",
          "wordCount": 3853,
          "title": "Joe Marshall: Playing with AI",
          "imageUrl": null
        },
        {
          "id": "http://funcall.blogspot.com/2023/06/fails-static-type-check-but-runs-anyway.html",
          "author": null,
          "description": "Here’s a function that fails a static type check, but has no runtime type error:\n(defun foo ()\n  (sqrt (if (static-type-check? #’foo)\n        \"bogus\"\n        2.0))\nI suspect most people that favor static types will argue that this sort of program doesn’t count for some reason or other.  I think this is more an example (albeit contrived) of the limitations of static type checking.",
          "link": "http://funcall.blogspot.com/2023/06/fails-static-type-check-but-runs-anyway.html",
          "publishedOn": "2023-06-28T19:09:00.000Z",
          "wordCount": 3774,
          "title": "Joe Marshall: Fails Static Type Check, but Runs Anyway",
          "imageUrl": null
        },
        {
          "id": "http://funcall.blogspot.com/2023/06/tail-recursion-in-rebol.html",
          "author": null,
          "description": "Many years ago I worked on a language called REBOL.  REBOL was\n  notable in that it used a variation of Polish notation.  Function\n  names came first, followed by the arguments in left to right order.\n  Parentheses were generally not needed as the subexpression\n  boundaries could be deduced from the arguments.  It’s a bit\n  complicated to explain, but pretty easy to code up.\nAn interpreter environment will be a lists of frames, and each frame\n  is an association list of variable bindings.\n(defun lookup (environment symbol)\n  (cond ((consp environment)\n         (let ((probe (assoc symbol (car environment))))\n           (if probe\n               (cdr probe)\n               (lookup (cdr environment) symbol))))\n        ((null environment) (error \"Unbound variable.\"))\n        (t (error \"Bogus env…",
          "link": "http://funcall.blogspot.com/2023/06/tail-recursion-in-rebol.html",
          "publishedOn": "2023-06-27T22:06:00.000Z",
          "wordCount": 4896,
          "title": "Joe Marshall: Tail recursion in REBOL",
          "imageUrl": null
        },
        {
          "id": "http://abcl-dev.blogspot.com/2023/06/a-midsummers-eve-with-abcl-192.html",
          "author": null,
          "description": "On the threshold of the Northern Hemisphere's Midsummer's Eve, we unveil the second revision of the Tenth Edition of the Armed Bear Common Lisp implementation, viz. abcl-1.9.2.\n\n\nMost notably, we are pleased to present the fruits of Alejandro Zamora Fonseca's labors on an interpreted implementation of CL:STEP with the first release of the ABCL-STEPPER contrib.  See <https://abcl.org/svn/tags/1.9.2/contrib/abcl-stepper/README.markdown> for more details.  This implementation was the subject of his demonstration <https://zenodo.org/record/7815887> as this year's European Lisp Symposium.\n\n\nThe POSIX-SYSCALLS contrib now provides the ability to set environment variables under UNIX systems <https://abcl.org/trac/changeset/15700>, as well as providing an example of how best to add abstract additional functionality to the core implementation.\n\n\nThis release also features a substantially re-worked Gray Stream implementation which fixes enough our implementation to be a first class citizen of SLIME's usage.  With the next release of SLIME, one will have to use abcl-1.9.2 in order to use the slime-repl.  See <https://github.com/slime/slime/pull/765> for more details.\n\n\nThe ASDF-JAR contrib has been restored to a usable functionality, which includes re-packaging of ASDF systems from within jar files as well as better abstraction for finding non-source artifacts.  Please refer to <https://gitlab.common-lisp.net/abcl/abcl/-/blob/master/contrib/asdf-jar/README.markdown> for a refresher on what facilities ASDF-JAR provides for the aspiring ASDF packager.\n\n\nA complete list of changes may be viewed at <https://abcl.org/svn/tags/1.9.2/CHANGES>.\n\n\nThe release itself is available at <https://abcl.org/releases/1.9.2/>.\n\n\nThanks to everyone who continue to support the Bear.  Enjoy yer evening...",
          "link": "http://abcl-dev.blogspot.com/2023/06/a-midsummers-eve-with-abcl-192.html",
          "publishedOn": "2023-06-21T10:39:00.000Z",
          "wordCount": 2224,
          "title": "ABCL Dev: A Midsummer's Eve with ABCL 1.9.2",
          "imageUrl": null
        },
        {
          "id": "http://blog.quicklisp.org/2023/06/june-2023-quicklisp-dist-update-now.html",
          "author": null,
          "description": "New projects: \n\n3d-spaces — A library implementing spatial query structures — zlib\n40ants-slynk — Utilities to start SLYNK if needed and to track active connections. — Unlicense\nbinary-structures — A library for reading, writing, and representing structures from binary representations — zlib\ncl-atelier — An atelier for Lisp developers — MIT License\ncl-bmp — A library for dealing with Windows bitmaps (BMP, DIB, ICO, CUR) — zlib\ncl-def-properties — Common Lisp definitions instropection library — MIT\ncl-fast-ecs — Blazingly fast Entity-Component-System microframework. — MIT\ncl-fbx — Bindings to ufbx, a simple and free FBX model decoding library — zlib\ncl-id3 — A Common Lisp implementation of the ID3 machine learning algorithm by R. Quinlan. — BSD-2-Clause\ncl-jschema — Common Lisp implementati…",
          "link": "http://blog.quicklisp.org/2023/06/june-2023-quicklisp-dist-update-now.html",
          "publishedOn": "2023-06-19T18:13:00.000Z",
          "wordCount": 3579,
          "title": "Quicklisp news: June 2023 Quicklisp dist update now available",
          "imageUrl": null
        },
        {
          "id": "http://quotenil.com/pax-browser.html",
          "author": null,
          "description": "PAX got a live documentation\nbrowser to make documentation generation a\nmore interactive experience. A great thing about Lisp development is\nchanging a single function and quickly seeing how it behaves without\nthe delay of a full recompile. Previously, editing a docstring\nrequired regenerating the full documentation to see how the changes\nturned out. The live documentation browser does away with this step,\nwhich tightens the edit/document loop.\nPAX also got an apropos browser. It could always\ngenerate documentation for stuff not written with PAX in mind, so\nwith the live browser already implemented, this was a just a small\nadd-on.\nThe trouble with interactivity is, of course, that it's difficult to\nget the point across in text, so I made two short videos that\ndemonstrate the basics.\nLive browsing with w3m\n\n\nLive browsing with other browsers",
          "link": "http://quotenil.com/pax-browser.html",
          "publishedOn": "2023-06-10T00:00:00.000Z",
          "wordCount": 189,
          "title": "Gábor Melis: PAX Live Documentation Browser",
          "imageUrl": null
        },
        {
          "id": "https://www.fitzsim.org/blog/?p=681",
          "author": null,
          "description": "Read-Evaluate-Print Loops are great for doing quick experiments.  I recently released two new REPL packages for Emacs to GNU ELPA.  This is the second in a two part series.  Here is part 1.\nFor microcontroller projects, uLisp is a great option.  It provides a Lisp REPL on top of the Arduino libraries.  It implements a subset of Common Lisp and adds microprocessor-specific functions.\nI previously built  and blogged about a handheld computer designed by uLisp’s creator.  I also ported uLisp to the SMART Response XE.\nuLisp is controlled by a serial port.  People on the uLisp forum have posted various ways to do this, including some Emacs methods.  They required external software though, and I wanted something that would run in Emacs with no external dependencies.  Emacs has make-serial-process and serial-term built-in, so I wondered if I could make a REPL using those.  The result is ulisp-repl which I published to GNU ELPA.  Here is an asciinema screencast of installing and using it.  You can pause the video and copy text out of it to try in your Emacs session.\nThis inline player uses only free and open source JavaScript.  Or you can download ulisp-repl-1.cast and play it with the asciinema command line player.\nIt has syntax highlighting on the current line.  It might be cool to also implement a SLIME server in Emacs itself (and have SLIME connect to the current Emacs process instead of an external one) but uLisp programs are usually small, so it’s easy enough to copy-n-paste Lisp snippets into the REPL.",
          "link": "https://www.fitzsim.org/blog/?p=681",
          "publishedOn": "2023-06-09T16:06:44.000Z",
          "wordCount": 437,
          "title": "Thomas Fitzsimmons: ulisp-repl",
          "imageUrl": null
        },
        {
          "id": "http://funcall.blogspot.com/2023/06/lisp-essential-but-not-required.html",
          "author": null,
          "description": "Here’s a weird little success story involving Lisp.  The code\n  doesn’t rely on anything specific to Lisp.  It could be rewritten in\n  any language.  Yet it wouldn’t have been written in the first place\n  if it weren’t for Lisp.\n \n\nI like to keep a Lisp REPL open in my Emacs for tinkering around\n  with programming ideas.  It only takes a moment to hook up a REST\n  API or scrape some subprocess output, so I have a library of\n  primitives that can talk to our internal build tools and other\n  auxiliary tools such as GitHub or CircleCI. This comes in handy for\n  random ad hoc scripting.\nI found out that CircleCI is written in Clojure, and if you connect\n  to your local CircleCI server, you can start a REPL and run\n  queries on the internal CircleCI database.  Naturally, I\n  hooked up my local …",
          "link": "http://funcall.blogspot.com/2023/06/lisp-essential-but-not-required.html",
          "publishedOn": "2023-06-08T19:42:00.000Z",
          "wordCount": 3964,
          "title": "Joe Marshall: Lisp Essential, But Not Required",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Polymatheia",
      "feedUrl": "https://hypirion.com/rss/all",
      "siteUrl": "https://hypirion.com",
      "articles": [
        {
          "id": "https://hypirion.com/musings/go-stly-access-rights",
          "author": null,
          "description": "With phantom types, we can make a static access control system in Go that will detect errors and act as easy-to-read documentation. Here's how you do it.",
          "link": "https://hypirion.com/musings/go-stly-access-rights",
          "publishedOn": "2023-07-23T14:00:00.000Z",
          "wordCount": 2148,
          "title": "Go-stly Access Rights",
          "imageUrl": "https://hypirion.com/thumbnails/screampher.jpg"
        },
        {
          "id": "https://hypirion.com/musings/spectral-contexts-in-go",
          "author": null,
          "description": "Go has phantom types, and we can use them to attach singletons to contexts. Here is a short post on how to do just that.",
          "link": "https://hypirion.com/musings/spectral-contexts-in-go",
          "publishedOn": "2023-06-18T17:00:00.000Z",
          "wordCount": 694,
          "title": "Spectral Contexts in Go",
          "imageUrl": "https://hypirion.com/thumbnails/phantom-types-in-go.jpg"
        },
        {
          "id": "https://hypirion.com/musings/graphql-and-type-systems",
          "author": null,
          "description": "Like Go, GraphQL isn't at the forefront of type theory. Let's look at what I miss and whether it would be sensible to add them to the specification.",
          "link": "https://hypirion.com/musings/graphql-and-type-systems",
          "publishedOn": "2023-05-28T15:45:00.000Z",
          "wordCount": 2152,
          "title": "GraphQL and Type Systems",
          "imageUrl": null
        },
        {
          "id": "https://hypirion.com/musings/on-expectations-and-fun",
          "author": null,
          "description": "A blog usually has its style and shape, and your visitors expects that to continue on. But what do you do if you both want to keep that expectation while also making posts in a completely diferent style?",
          "link": "https://hypirion.com/musings/on-expectations-and-fun",
          "publishedOn": "2022-12-26T14:30:00.000Z",
          "wordCount": 1287,
          "title": "On Expectations and Fun",
          "imageUrl": null
        },
        {
          "id": "https://hypirion.com/musings/duckey",
          "author": null,
          "description": "I've wanted to get my Moonlander keyboard's duck key to print the duck emoji for a long time. Here's how I did it!",
          "link": "https://hypirion.com/musings/duckey",
          "publishedOn": "2022-10-27T20:50:00.000Z",
          "wordCount": 2359,
          "title": "Teaching DucKey to Quack 🦆",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "(think)",
      "feedUrl": "https://batsov.com/atom.xml",
      "siteUrl": "https://batsov.com/",
      "articles": [
        {
          "id": "https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/",
          "author": null,
          "description": "While learning OCaml I’ve noticed one curious feature - it has two types of string literals. The first type are the common and quite familiar “double-quoted string literals” (or perhaps simply “string literals”?):",
          "link": "https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/",
          "publishedOn": "2023-04-20T13:23:00.000Z",
          "wordCount": 1042,
          "title": "Learning OCaml: Quoted String Literals",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/",
          "author": null,
          "description": "You might have noticed one change introduced with Bundler 2.3 - it now requires you to run the version of Bundler that’s specified in your Gemfile.lock.1 This means that occasionally you might see something like this: https://bundler.io/blog/2022/01/23/bundler-v2-3.html &#8617;",
          "link": "https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/",
          "publishedOn": "2023-04-09T16:29:00.000Z",
          "wordCount": 474,
          "title": "Updating the Bundler Version Specified in Gemfile.lock",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/04/09/blog-comments-are-back/",
          "author": null,
          "description": "This is going to be one super short post.",
          "link": "https://batsov.com/articles/2023/04/09/blog-comments-are-back/",
          "publishedOn": "2023-04-09T15:57:00.000Z",
          "wordCount": 435,
          "title": "Blog Comments are Back",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/",
          "author": null,
          "description": "Ruby programmers are commonly called Rubyists. Python programmers are often called Pythonistas. Lisp programmers are widely known as Lispers. Clojure programmers are sometimes called Clojurians.",
          "link": "https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/",
          "publishedOn": "2023-03-20T08:02:00.000Z",
          "wordCount": 584,
          "title": "How are OCaml Programmers Called?",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/01/08/2022-the-year-in-review/",
          "author": null,
          "description": "Another year is behind us and it’s time for the obligatory “year in review” blog post. I’ve been feeling a bit lazy, that’s why I’m getting to writing it a bit of a delay, but you’ll forgive me.",
          "link": "https://batsov.com/articles/2023/01/08/2022-the-year-in-review/",
          "publishedOn": "2023-01-08T14:21:00.000Z",
          "wordCount": 1256,
          "title": "2022: The Year in Review",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/20/bozhidar-is-on-mastodon/",
          "author": null,
          "description": "Twitter these days is all about drama related to… Twitter (Elon Musk). That really pains me, given that as long as it has existed Twitter has been the only social network that I’ve truly enjoyed using.",
          "link": "https://batsov.com/articles/2022/12/20/bozhidar-is-on-mastodon/",
          "publishedOn": "2022-12-20T18:21:00.000Z",
          "wordCount": 603,
          "title": "Bozhidar is on Mastodon",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/15/topic-specific-rss-feeds/",
          "author": null,
          "description": "Someone complained earlier today that my Pixel 6A article was picked up by Planet Emacslife. While I wasn’t involved in adding my blog there and I never promised to write exclusively about Emacs, this is a good opportunity to remind people my blog has several topic-specific RSS feeds about:",
          "link": "https://batsov.com/articles/2022/12/15/topic-specific-rss-feeds/",
          "publishedOn": "2022-12-15T10:48:00.000Z",
          "wordCount": 402,
          "title": "Topic-specific RSS Feeds",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/15/back-to-android-my-take-on-the-pixel-6a/",
          "author": null,
          "description": "A couple of weeks ago I made a spectacular and quite unexpected return to Android, after a long period of being exclusively in Apple’s mobile devices ecosystem. My last Android phone was the Sony Xperia Arc, which I bought way back in 2011. Afterwards I got an iPhone 5(S?) in 2012/2013 and never looked back.",
          "link": "https://batsov.com/articles/2022/12/15/back-to-android-my-take-on-the-pixel-6a/",
          "publishedOn": "2022-12-15T07:42:00.000Z",
          "wordCount": 1911,
          "title": "Back to Android: My Take on the Pixel 6A",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/11/git-tip-find-the-top-contributors/",
          "author": null,
          "description": "From time to time it’s useful to know who are main authors of some piece of a project. Admittedly most of the time I want to check who are the top contributors to some Git repository I’d use a web interface for this (e.g. GitHub). Probably because I never bothered to remember the magic incantations to do this with the git command-line interface and probably because statistics often look better when you have a have richer UI toolkit to render them. That being said, today I was reminded how easy it is to cover the basics with the command-line. If we want a list of the top 10 contributors (in terms of commits) we can get it like this:1 All examples use CIDER’s repository. &#8617;",
          "link": "https://batsov.com/articles/2022/12/11/git-tip-find-the-top-contributors/",
          "publishedOn": "2022-12-11T17:38:00.000Z",
          "wordCount": 676,
          "title": "Git Tip: Find the Top Contributors",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/08/what-s-the-term-for-a-filename-without-its-extension/",
          "author": null,
          "description": "Today someone asked in OCaml’s Discord “How do you call a variable that refers to a filename without its extension?”. I always thought there was no specific term for this and I always named such variables filename-sans-extension (or similar), but it turns out I was wrong. It’s never too late to learning something new! But first a bit of (subjective) terminology:",
          "link": "https://batsov.com/articles/2022/12/08/what-s-the-term-for-a-filename-without-its-extension/",
          "publishedOn": "2022-12-08T14:40:00.000Z",
          "wordCount": 562,
          "title": "What’s the Term for a Filename Without Its Extension?",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        }
      ]
    },
    {
      "title": "Lambda/Sierra",
      "feedUrl": "https://www.lambdasierra.com/feed.xml",
      "siteUrl": "https://www.lambdasierra.com/",
      "articles": [
        {
          "id": "urn:uuid:a8d0b690-8938-4743-902a-c6978ba7ef0c",
          "author": null,
          "description": "A plea to technical writers: Please stop inventing abbreviations and acronyms without defining them.",
          "link": "https://www.lambdasierra.com/2023/abbreviating/",
          "publishedOn": "2023-06-03T18:30:00.000Z",
          "wordCount": 800,
          "title": "Stop Abbreviating!",
          "imageUrl": "https://www.lambdasierra/2023/img/flowchart.svg"
        },
        {
          "id": "urn:uuid:417d13a1-0e74-48b4-93da-715fbe03736e",
          "author": null,
          "description": "Social media killed comments. What's a lonely blogger to do?",
          "link": "https://www.lambdasierra.com/2023/building/comments",
          "publishedOn": "2023-05-20T20:00:00.000Z",
          "wordCount": 395,
          "title": "One-Way Comments?",
          "imageUrl": "https://www.lambdasierra/2023/building/img/stephen-phillips-hostreviews-co-uk--zRNvl3EUdw-unsplash.jpg"
        },
        {
          "id": "urn:uuid:ba04a467-ff41-43b3-907d-2810c12af8bb",
          "author": null,
          "description": "My experience as a backend programmer trying to write my own CSS by hand",
          "link": "https://www.lambdasierra.com/2023/building/css",
          "publishedOn": "2023-05-16T22:00:00.000Z",
          "wordCount": 537,
          "title": "(Re-)Learning CSS as a Backend Dev",
          "imageUrl": "https://www.lambdasierra.com/2023/building/img/csstoot.png"
        },
        {
          "id": "urn:uuid:f9aaf15d-37c1-4a8e-bab7-9ccd0b60d12c",
          "author": null,
          "description": "On starting a new blog, abandoning the stability of WordPress for the creative freedom of do-it-yourself.",
          "link": "https://www.lambdasierra.com/2023/building/",
          "publishedOn": "2023-04-13T22:00:42.000Z",
          "wordCount": 742,
          "title": "Building Foundations",
          "imageUrl": "https://www.lambdasierra.com/2023/building/img/digitalme.gif"
        },
        {
          "id": "urn:uuid:5960d9ab-f082-4b72-b3a0-7753d56d2008",
          "author": null,
          "description": "AWS API docs from the Cognitect AWS Client library as Emacs Org Mode",
          "link": "https://www.lambdasierra.com/2023/aws-org/",
          "publishedOn": "2023-03-12T22:30:00.000Z",
          "wordCount": 619,
          "title": "AWS API in Org Mode with Clojure",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Squid's Blog",
      "feedUrl": "http://gigasquidsoftware.com/atom.xml",
      "siteUrl": "http://gigasquid.github.io/atom.xml",
      "articles": [
        {
          "id": "http://gigasquid.github.io/blog/2023/07/02/ciphers-with-vector-symbolic-architectures/",
          "author": null,
          "description": "A secret message inside a 10,000 hyperdimensional vector\nWe’ve seen in previous posts how we can encode data structures using Vector Symbolic Architectures in Clojure. This is an exploration of how we can use this to develop a cipher to transmit a secret message between two parties.\nA Hyperdimensional Cipher\nUsually, we would develop a dictionary/ cleanup memory of randomly chosen hyperdimensional vectors to represent each symbol. We could do this, but then sharing the dictionary as our key to be able to decode messages would be big. Instead, we could share a single hyperdimensional vector and then use the protect/ rotation operator to create a dictionary of the alphabet and some numbers to order the letters. Think of this as the initial seed symbol and the rest being defined as n+1.\n\n\n\n1\n…",
          "link": "http://gigasquid.github.io/blog/2023/07/02/ciphers-with-vector-symbolic-architectures/",
          "publishedOn": "2023-07-02T16:31:00.000Z",
          "wordCount": 915,
          "title": "Ciphers With Vector Symbolic Architectures",
          "imageUrl": null
        },
        {
          "id": "http://gigasquid.github.io/blog/2022/12/31/vector-symbolic-architectures-in-clojure/",
          "author": null,
          "description": "generated with Stable Diffusion\nBefore diving into the details of what Vector Symbolic Architectures are and what it means to implement Clojure data structures in them, I’d like to start with some of my motivation in this space.\nSmall AI for More Personal Enjoyment\nOver the last few years, I’ve spent time learning, exploring, and contributing to open source deep learning. It continues to amaze me with its rapid movement and achievements at scale. However, the scale is really too big and too slow for me to enjoy it anymore.\nBetween work and family, I don’t have a lot of free time. When I do get a few precious hours to do some coding just for me, I want it it to be small enough for me to fire up and play with it in a REPL on my local laptop and get a result back in under two minutes.\nI also …",
          "link": "http://gigasquid.github.io/blog/2022/12/31/vector-symbolic-architectures-in-clojure/",
          "publishedOn": "2022-12-31T20:41:00.000Z",
          "wordCount": 2104,
          "title": "Vector Symbolic Architectures in Clojure",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Eval / Apply is pure magic",
      "feedUrl": "https://www.evalapply.org/index.xml",
      "siteUrl": "https://www.evalapply.org/",
      "articles": [
        {
          "id": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-midway-refactor/",
          "author": null,
          "description": "Or the one in which we confront our elisp n00bishness and try to be better at using it. And we learn new habits to understand our Emacs better. Better late than never.",
          "link": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-midway-refactor/index.html",
          "publishedOn": "2023-07-23T00:00:00.000Z",
          "wordCount": 1762,
          "title": "Emerging from dotemacs bankruptcy the hard way: the midway refactor",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-packages/",
          "author": null,
          "description": "Elpa, Melpa, git repo. Vendor package straight from source. It compiled? Fetch some more! Elpa, Melpa, git repo. In more adult terms, we learn to use use-package to fetch, install, initialise, configure useful packages that enhance our Emacs experience.",
          "link": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-packages/index.html",
          "publishedOn": "2023-07-06T00:00:00.000Z",
          "wordCount": 1538,
          "title": "Emerging from dotemacs bankruptcy the hard way: package management",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-init-begins/",
          "author": null,
          "description": "The first action must, of course, be to colour the bikeshed and set some decent defaults.",
          "link": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy-init-begins/index.html",
          "publishedOn": "2023-07-04T00:00:00.000Z",
          "wordCount": 711,
          "title": "Emerging from dotemacs bankruptcy the hard way: init begins",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy/",
          "author": null,
          "description": "Or, finally biting the bullet to redesigning my developerly and writerly experience, from the ground up, with Emacs.",
          "link": "https://www.evalapply.org/posts/emerging-from-dotemacs-bankruptcy/index.html",
          "publishedOn": "2023-06-29T00:00:00.000Z",
          "wordCount": 550,
          "title": "Emerging from dotemacs bankruptcy the hard way: Prelude",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/what-have-you-been-curious-about/",
          "author": null,
          "description": "Arguably a more interesting, revealing, and kinder question than \"What are you curious about?\"",
          "link": "https://www.evalapply.org/posts/what-have-you-been-curious-about/index.html",
          "publishedOn": "2023-06-21T00:00:00.000Z",
          "wordCount": 506,
          "title": "What have you been curious about?",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/software-demos/",
          "author": null,
          "description": "Making a software demo is a form of deliberate, serious play. An act that feeds our curiosity, inventiveness, and drive. It enlivens. It enriches. It entertains. And as we asymptotically approach the A.G.I. that's just around the corner, the capacity for deliberate, serious play will remain distinctively, deeply, deliciously human. Career software people like yours truly may please take note!",
          "link": "https://www.evalapply.org/posts/software-demos/index.html",
          "publishedOn": "2023-06-04T00:00:00.000Z",
          "wordCount": 1574,
          "title": "Software demos as deliberate acts of serious play",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/cold-restart-total-outage/",
          "author": null,
          "description": "\"What are folks’ views on systems so large where cold-starting the whole system is almost impossible?\"... — M'colleague, Shivam, In A Slackroom Next Door.",
          "link": "https://www.evalapply.org/posts/cold-restart-total-outage/index.html",
          "publishedOn": "2023-04-07T00:00:00.000Z",
          "wordCount": 1171,
          "title": "Cold restart whole system after total outage",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/bad-matrix/",
          "author": null,
          "description": "A while ago, someone in the Recurse Center nerdiverse decided we needed a \"Bad Print\". They made one. Things escalated. Bad Matrix happened.",
          "link": "https://www.evalapply.org/posts/bad-matrix/index.html",
          "publishedOn": "2023-02-14T00:00:00.000Z",
          "wordCount": 772,
          "title": "Bad Matrix",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/tools-for-thought/",
          "author": null,
          "description": "Trying out a classification for \"Tools for Thought\" as a means of augmenting the human intellect, hot on the heels of recent community conversations about ChatGPT, CoPilot, Stable Diffusion etc...",
          "link": "https://www.evalapply.org/posts/tools-for-thought/index.html",
          "publishedOn": "2023-01-19T00:00:00.000Z",
          "wordCount": 1126,
          "title": "Riff: Classifying Tools for Thought",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/animate-text-art-javascript/",
          "author": null,
          "description": "It is with no small thanks to MDN, StackOverflow, Firefox's support for countless open tabs, JavaScript's support for first-class functions, and first-class supportive colleagues, I learned it is possible for a web front end novice to program \"text art animations\". Whatever that is even. Because I thoroughly enjoyed doing just that for Hanukkah of Data 2022. Here's how it went down.",
          "link": "https://www.evalapply.org/posts/animate-text-art-javascript/index.html",
          "publishedOn": "2023-01-16T00:00:00.000Z",
          "wordCount": 3580,
          "title": "Animating Text Art in JavaScript",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/clojure-mars-rover/",
          "author": null,
          "description": "Here I illustrate how Clojurists (including Yours Truly) like to solve problems and model things using hammocks, pure functions, and the \"it's just data\" ideology. Also, while the *problem* focuses on \"design in the small\" of application logic, many ideas in the *solution* can—and do—scale all the way to \"design in the large\" of whole systems.",
          "link": "https://www.evalapply.org/posts/clojure-mars-rover/index.html",
          "publishedOn": "2022-10-19T00:00:00.000Z",
          "wordCount": 3430,
          "title": "A Clojure view of \"Mars Rover\"",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Ian Henry",
      "feedUrl": "https://ianthehenry.com/feed.xml",
      "siteUrl": "https://ianthehenry.com/",
      "articles": [
        {
          "id": "https://ianthehenry.com/posts/fibonacci/",
          "author": null,
          "description": "When you think about the Fibonacci sequence, you probably imagine a swirling vortex of oscillating points stretching outwards to infinity:\n\n\n\nOkay, no, obviously you don’t. Yet.\nWhen you think about the Fibonacci sequence, you probably flush with a latent rage when you remember that it is, more often than not, the way that we introduce the concept of “recursive functions” to new programmers, in some sort of cruel hazing intended to make it harder for them to ever appreciate how recursion can help them write better programs. Sometimes we even add memoization, and call it “dynamic programming,” in order to impress upon them that even the most trivial problems deserve complex, inefficient solutions.\nEr, okay, you probably don’t think about the Fibonacci sequence much at all. It doesn’t, you k…",
          "link": "https://ianthehenry.com/posts/fibonacci/",
          "publishedOn": "2023-07-30T00:00:00.000Z",
          "wordCount": 5215,
          "title": "The Fibonacci Matrix",
          "imageUrl": "https://ianthehenry.com/posts/fibonacci/hero.png"
        },
        {
          "id": "https://ianthehenry.com/posts/my-kind-of-repl/",
          "author": null,
          "description": "I want to tell you about an idea that has had a huge influence on the way that I write software. And I mean that in the literal sense: it’s changed the way that I write software; it’s re-shaped my development workflow.\nThe idea is this: you can write programs that modify themselves.\nAnd I don’t mean macros or metaprogramming or anything fancy like that. I mean that you can write programs that edit their own source code. Like, the files themselves. The actual text files on disk that have your source code in them.\nThat’s not the whole idea, though. There’s more to it: you write programs that can edit themselves, and then you use that as your REPL.\nInstead of typing something into a prompt and hitting enter and seeing the output on stdout, you type something into a file and hit some editor ke…",
          "link": "https://ianthehenry.com/posts/my-kind-of-repl/",
          "publishedOn": "2023-07-05T00:00:00.000Z",
          "wordCount": 5535,
          "title": "My Kind of REPL",
          "imageUrl": "https://ianthehenry.com/posts/my-kind-of-repl/hero.png"
        },
        {
          "id": "https://ianthehenry.com/posts/generalized-macros/",
          "author": null,
          "description": "I’ve been writing a lot of Janet lately, and I’ve been especially enjoying my time with the macro system.\nJanet macros are Common Lisp-flavored unhygienic gensym-style macros. They are extremely powerful, and very easy to write, but they can be pretty tricky to get right. It’s easy to make mistakes that lead to unwanted variable capture, or to write macros that only work if they’re expanded in particular contexts, and it can be pretty difficult to detect these problems ahead of time.\nSo people have spent a lot of time thinking about ways to write macros more safely – sometimes at the cost of expressiveness or simplicity – and almost all recent languages use some sort of hygienic macro system that defaults to doing the right thing.\nBut as far as I know, no one has approached macro systems f…",
          "link": "https://ianthehenry.com/posts/generalized-macros/",
          "publishedOn": "2023-04-18T00:00:00.000Z",
          "wordCount": 4908,
          "title": "Generalized Macros",
          "imageUrl": "https://ianthehenry.com/checkerboard.png"
        },
        {
          "id": "https://ianthehenry.com/posts/why-janet/",
          "author": null,
          "description": "I never thought it could happen to me. I mean, parentheses? In this day and age? But for the past couple years, my go-to programming language for fun side projects has been a little Lisp dialect called Janet.\n(print \"hey janet\")\n\nI like Janet so much that I wrote an entire book about it, and put it on The Internet for free, in the hopes of attracting more Janetors to the language.\nI think you should read it, but I know that you don’t believe me, so I’m going to try to convince you. Here’s my attempt at a sales pitch: here is why you – you of all people – should give Janet a chance.\nJanet is simple\nJanet is an imperative language with first-class functions, a single namespace for identifiers, and lexical block scoping. The core of the language is very small, consisting of only eight instruc…",
          "link": "https://ianthehenry.com/posts/why-janet/",
          "publishedOn": "2023-04-12T00:00:00.000Z",
          "wordCount": 1631,
          "title": "Why Janet?",
          "imageUrl": "https://ianthehenry.com/checkerboard.png"
        },
        {
          "id": "https://ianthehenry.com/posts/janet-for-mortals/",
          "author": null,
          "description": "I wrote a book.\nIt’s called Janet for Mortals, and it’s free, and it’s on the internet, and you can read it right now.\nAnd you should read it right now, instead of reading this blog post, because this blog post is not very interesting if you haven’t read the book. Heck, this blog post is not very interesting even if you have read the book. This blog post is a thinly-veiled promotion for my book to slip into my newsletter and RSS feed, with just enough additional content to pad it out to the length of a real post.\nThe book is about Janet, a programming language that I have written about before. I’ve been using Janet a lot lately, and I’ve been having a lot of fun with it, and I think that more people should know about it so that they can have fun with it too. People like you.\nI’m not really…",
          "link": "https://ianthehenry.com/posts/janet-for-mortals/",
          "publishedOn": "2023-04-04T00:00:00.000Z",
          "wordCount": 3432,
          "title": "Janet for Mortals",
          "imageUrl": "https://ianthehenry.com/checkerboard.png"
        }
      ]
    },
    {
      "title": "Applied Language musings",
      "feedUrl": "https://applied-langua.ge/posts/feed.rss",
      "siteUrl": "https://applied-langua.ge/posts/",
      "articles": [
        {
          "id": "https://zenodo.org/record/7816398",
          "author": null,
          "description": "The design and implementation of a non-moving parallel generational garbage collector for SBCL.",
          "link": "https://zenodo.org/record/7816398",
          "publishedOn": "2023-08-03T00:31:42.980Z",
          "wordCount": 705,
          "title": "Parallel garbage collection for SBCL",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/omrn-compiler.html",
          "author": null,
          "description": "A pile of regular expression derivatives, myths about Ediware, SIMD instruction selection and using the Common Lisp compiler as a backend for a regular expression compiler.",
          "link": "https://applied-langua.ge/posts/omrn-compiler.html",
          "publishedOn": "2023-08-03T00:31:42.134Z",
          "wordCount": 3092,
          "title": "The one-more-re-nightmare compiler",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/the-poverty-of-post-open-source.html",
          "author": null,
          "description": "Post-open source falls short on what improvements it was supposed to make. It prefigures a boring future, mostly because it carries on productivist logic, and makes programming even more of a difficult and esoteric tool. Capitalism isn't the only problem threatening peer production; it is rather threatened by more general principles, which even radicals can believe.",
          "link": "https://applied-langua.ge/posts/the-poverty-of-post-open-source.html",
          "publishedOn": "2023-08-03T00:31:42.122Z",
          "wordCount": 4249,
          "title": "The poverty of \"post-open\" source",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html",
          "author": null,
          "description": "When \"simple\" programming languages aren't.",
          "link": "https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html",
          "publishedOn": "2023-08-03T00:31:42.111Z",
          "wordCount": 7301,
          "title": "I don't want to go to Chel-C",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/lisp-curse-redemption-arc.html",
          "author": null,
          "description": "Pondering marketing strategies, and how we aren't supposed to be productive in Common Lisp.",
          "link": "https://applied-langua.ge/posts/lisp-curse-redemption-arc.html",
          "publishedOn": "2023-08-03T00:31:42.104Z",
          "wordCount": 3276,
          "title": "The Lisp Curse Redemption Arc",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/zero-feet.html",
          "author": null,
          "description": "A systems language is a collection of things that don't fit into a modular language. There shouldn't be one.",
          "link": "https://applied-langua.ge/posts/zero-feet.html",
          "publishedOn": "2023-08-03T00:31:41.797Z",
          "wordCount": 2014,
          "title": "Zero Feet: a proposal for a systems-free Lisp",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/the-next-700-virtual-machines.html",
          "author": null,
          "description": "Virtual machine will eat themselves, by being similar enough that most can subsume each other. This can be furthered by making it easier to target abstract machines, and using object capabilities to allow cohabitation of languages and incremental extension to languages.",
          "link": "https://applied-langua.ge/posts/the-next-700-virtual-machines.html",
          "publishedOn": "2023-08-03T00:31:41.794Z",
          "wordCount": 4640,
          "title": "The next 700 virtual machines",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "The Scientific Coder",
      "feedUrl": "https://scientificcoder.com/rss.xml",
      "siteUrl": "https://scientificcoder.com",
      "articles": [
        {
          "id": "https://scientificcoder.com/user-defined-show-method-in-julia",
          "author": "Matthijs Cox",
          "description": "I often find myself looking for a way to write custom display methods for Julia types on the REPL. Time to write it down in a short pragmatic blog post, for you and my future self.\nWhat's the issue? When exploring on the Julia REPL or in notebooks, you display your own custom type, then it doesn't look always look the most informative. Let's say you have some type:\nstruct MyType\n    some_number::Float64\n    some_dict::Dict\nend\n\nYou can quickly make an object and display it.\njulia> obj = MyType(4.0, Dict(:x => 5))\nMyType(4.0, Dict(:x => 5))\n\nOkay... Julia basically shows the constructor of the object. I would like to see the field names, or maybe other information. Sometimes I want to see statistical properties for example, instead of the raw data.\nAs an alternative, to quickly see the fiel…",
          "link": "https://scientificcoder.com/user-defined-show-method-in-julia",
          "publishedOn": "2023-07-18T13:24:13.000Z",
          "wordCount": 4343,
          "title": "User-defined Show Method in Julia",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1689686215391%2F469dd124-564a-4ccf-a118-c1c9f885f6b6.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/juliacon-local-eindhoven-2023",
          "author": "Matthijs Cox",
          "description": "I am very happy to announce that I am an organizer of the first city-level JuliaCon conference. This will be a one-day event in Eindhoven on December 1st, organized together with the PyData Eindhoven conference on November 30th (the day before).\nThe website is live: https://juliacon.org/local/eindhoven2023/. You can submit proposals, book early-bird tickets and consider joining as a volunteer.\nWe named it \"JuliaCon Local\" to avoid any confusion with the yearly Global JuliaCon, which is typically also associated with a city name. The date is also positioned in the winter, to be out of sync with the summer schedule of the Global JuliaCon conferences. People who could not attend the Global JuliaCon now have another opportunity to meet like-minded Julians and computational scientists in the industry and academia.\nMy apologies if I notify you via multiple channels, including my blog, but we are really excited about growing our scientific computing community in the area. Please consider sharing the news with your network. Of course everyone on the planet is welcome to join our conference! Hopefully we are paving the path to more city-level JuliaCon conferences.",
          "link": "https://scientificcoder.com/juliacon-local-eindhoven-2023",
          "publishedOn": "2023-07-11T07:23:12.000Z",
          "wordCount": 1879,
          "title": "JuliaCon Local Eindhoven 2023",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1689059863447%2Ff5218ac5-7cf2-4036-bbd4-b6f01ff19866.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/how-to-deploy-algorithms-anywhere",
          "author": "Matthijs Cox",
          "description": "Let's say you are an incredible scientific programmer. You've got some pretty math, machine learning model or scientific computing code. And you want to give it to other users. Maybe even turn it into a real product and make a profit from your work. How do you \"deploy\" that piece of code? Most scientists do not think much about this problem at all, but it can have a great influence on how you should develop your code.\nBasically, we need to take what you developed, turn it into something which can be given to the user, so they can install and use it in their computing environment. What to provide depends entirely on the environment of the user. So you'll first need to understand that: the so called \"production environment\", the environment in which your \"product\" or service will operate.\n\nT…",
          "link": "https://scientificcoder.com/how-to-deploy-algorithms-anywhere",
          "publishedOn": "2023-07-09T12:41:35.000Z",
          "wordCount": 12199,
          "title": "How to deploy algorithms anywhere?",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1688895403637%2Fca806aa8-49ad-41dd-ab25-b3ba2db8ffe6.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/fruity-composable-design-patterns-in-julia",
          "author": "Matthijs Cox",
          "description": "A design pattern is a repeatable solution to a common coding problem. Design patterns are not something beginner programmers typically think about a lot (that includes most scientists), they are probably focused on making their code work. At least that's what I did when I was a young programmer. At the other extreme such patterns can become a religion for people, where everything has to be a design pattern, or else the code is not considered good enough. However, people who make this mistake are not senior programmers either in my opinion. Senior programmers look for a balance between pure abstraction and simplicity (and many other requirements).\nThe Julia community has a special standing on design patterns: people don't really like them. In general the Julia community believes that design…",
          "link": "https://scientificcoder.com/fruity-composable-design-patterns-in-julia",
          "publishedOn": "2023-06-23T12:18:08.000Z",
          "wordCount": 9166,
          "title": "Fruity Composable Design Patterns in Julia",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1687522411556%2Fc781ad27-554c-48bd-b6fc-f42d5f629591.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/software-testing-for-scientists",
          "author": "Matthijs Cox",
          "description": "I am currently reading the book \"Software Engineering for Science.\" It is one giant complaint about how scientists are terrible at writing maintainable code for themselves. I won't go into all the pain, but I do recognize that pain deeply and have written about it elsewhere. Right now I am reading this book hoping to find solutions. So, what's the proposed solution? The book doesn't provide a simple answer, but one recurring topic is \"testing, testing, TESTING!\" So, let's talk about testing!\nWhy don't scientists test their code? Well, it turns out that most scientists do not have a software engineering background, yet they find themselves writing code and software for their work. Alternatively, they may collaborate heavily with software engineers, either in academia or in the industry. If …",
          "link": "https://scientificcoder.com/software-testing-for-scientists",
          "publishedOn": "2023-06-11T12:35:26.000Z",
          "wordCount": 11612,
          "title": "Software Testing for Scientists",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1685970744744%2F3005ed53-27a0-4856-92d6-26ece2b8fe52.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/the-nebulous-mysteries-of-scientific-coding",
          "author": "Matthijs Cox",
          "description": "There is a concept in meta-rationality called nebulosity. I will look up the definition later, but in my own words nebulosity means the following:\nNebulosity: a concept or problem is ill-defined. You cannot describe it perfectly. The boundaries of the concept are unclear.\nNebulosity drives rational people crazy, its worse than NP-hard. Rational people need well defined problems. Even if you can prove that the problem cannot be solved, at least the problem itself should be known. But is this always possible?\nYou may have a problem that you can barely describe to yourself. You may feel some shape of it, intuitively in your mind, but you cannot explain it perfectly. You notice that it is especially difficult to explain the problem to people unknown to the domain around the problem. There is o…",
          "link": "https://scientificcoder.com/the-nebulous-mysteries-of-scientific-coding",
          "publishedOn": "2023-06-03T11:56:48.000Z",
          "wordCount": 8033,
          "title": "The Nebulous Mysteries of Scientific Coding",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1685191473723%2F77306972-8aa3-41d0-85f4-9efef520f341.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/scientific-software-institutes",
          "author": "Matthijs Cox",
          "description": "Have you ever gone through life completely oblivious to something? I recently experienced that sensation when I stumbled upon an entire ecosystem of institutions, only learning about them after starting this blog. These organizations are dedicated to promoting better scientific software, which aligns with the mission of my blog. I wanted to know what's going on, so let's have a look at what's out there.\nI noticed the names of the fields of \"scientific software\" vary a little, but I consider all of these roughly equivalent:\nScientific Software\nResearch Software Engineering (RSE)\nScientific Computing\nNumerical Computing\nYes, there are differences between them, but all of them involve turning scientific knowledge into algorithms and software, and writing software to do scientific research or …",
          "link": "https://scientificcoder.com/scientific-software-institutes",
          "publishedOn": "2023-05-31T12:34:28.000Z",
          "wordCount": 5466,
          "title": "Scientific Software Institutes",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1682844193827%2F1b0a1c9d-fb03-4a75-9ca0-d3cbcb52d52b.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments",
          "author": "Matthijs Cox",
          "description": "Author commentary: I am starting a \"clean code\" blog series with simple tips that you can integrate into your workflow. I often write long, complicated articles that try to teach a lot at once. This is an attempt to chop things up in bite-sized chunks. Note that the Clean Code books by Robert Martin are great, you should read them if you have time! If not, you can follow these short articles :)\nIf you've written a lot of scripts and shared some of those scripts with colleagues or others, then you probably encountered the problem that the code doesn't always work on their device, or produces different results. When this happens, people may quickly lose trust in your results and begin to ignore your work entirely. So making code reproducible is extremely important! Even if you are a scientis…",
          "link": "https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments",
          "publishedOn": "2023-05-24T12:03:44.000Z",
          "wordCount": 6416,
          "title": "Clean Code Tips for Scientists #1 - Reproducible Environments",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1684413997401%2F753bc424-1698-4e8a-a951-cc7727a09e68.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development",
          "author": "Matthijs Cox",
          "description": "Three years ago, we decided to embrace the Julia programming language to solve the two language problem at our organization. We want our scientists to join forces with software engineers so that they can work on the same problems together. In our journey, I could have used more books or blogs to guide us on the following topics:\nHow to build and deploy software products with the Julia language?\nHow to create the seeds for an effective scientific software ecosystem?\nThis article is here to help you with the second topic, but I warn you that we had to figure out 1 and 2 at the same time. I intend to write more blog posts about the Julia productization aspects. Yet in the long term, I am betting on the ecosystem to radically improve our organization, so I consider that more important to blog …",
          "link": "https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development",
          "publishedOn": "2023-05-17T12:29:08.000Z",
          "wordCount": 15684,
          "title": "Building a Scalable Inner-Source Ecosystem For Collaborative Development",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1684239844476%2F70964039-8d34-410b-8507-79bfd01dcbc0.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration",
          "author": "Matthijs Cox",
          "description": "In this tutorial we demonstrate how to call Julia libraries with multiple threads from C++. With the introduction of Julia 1.9 in May 2023, the runtime can dynamically \"adopt\" external threads, enabling the integration of Julia libraries into multi-threaded codebases written in other languages, such as C++. This article is written in collaboration with Evangelos Paradas, the maestro of algorithm deployment at ASML. Evangelos has been responsible for heavily testing and debugging this multi-threading feature. I humbly repeated the final results after his many trial-and-error attempts and summarized everything for you in this article.\nJulia in production\nJulia is a general-purpose language designed for scientific and numerical computing, striking a balance between speed and simplicity. The a…",
          "link": "https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration",
          "publishedOn": "2023-05-11T14:10:09.000Z",
          "wordCount": 10600,
          "title": "Extreme Multi-Threading: C++ and Julia 1.9 Integration",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683635341431%2F5562e663-f9ea-4cec-a0a8-e6c9da7578ef.jpeg%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks",
          "author": "Matthijs Cox",
          "description": "Scientific programming involves writing code to solve scientific problems. This can range from simulating complex physical phenomena to analyzing large datasets. While such software is incredibly important, it can be challenging for scientists to learn all the required software development skills. However, by gradually adding specific tricks into your workflow, you can enhance your coding efficiency and effectiveness.\nSoftware skills are important for everyone these days, including scientists. I see certain common risks if you do not spend effort on your code quality:\nIncorrect code leads to incorrect results, which means you may have to redo work or even risk damaging your reputation.\nUnreproducible code means others, including your future self, cannot verify your work, nor built on top o…",
          "link": "https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks",
          "publishedOn": "2023-05-10T09:46:17.000Z",
          "wordCount": 5393,
          "title": "Mastering Scientific Programming: Practical Tips and Tricks",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683568993032%2Ff57416c5-3a85-4420-9074-0559b752625b.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/how-to-solve-the-two-language-problem",
          "author": "Matthijs Cox",
          "description": "My professional obsession is solving the Two Culture Problem. How can scientists optimally join forces with software engineers and their principles, so that we can work on the same problems together? How to accelerate the cycle from idea to product? The Two Culture Problem requires a solution to the related Two Language Problem, which has a technical nature. A solution to the technical problem does not guarantee a solution to the organizational problem, but when it comes to engineering cultures you first need to prove the technical solution before you can even begin to tackle the social implications. I have a strong opinion on the best technical solution, but let's review all our options.\n\nAs far as I can tell, we have the following alternatives:\nAccept the status quo: use a slow and a fas…",
          "link": "https://scientificcoder.com/how-to-solve-the-two-language-problem",
          "publishedOn": "2023-05-08T07:41:53.000Z",
          "wordCount": 18423,
          "title": "How to solve the two language problem?",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683112298365%2Fe6ad9ad6-a363-45cc-a04f-a6f38510bf2f.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned",
          "author": "Matthijs Cox",
          "description": "How do you become a great scientific coder? To understand this, I want to ask others about their journey and share their lessons with you. This post is a collaboration with Keith Myerscough, a mathematical consultant and senior engineer, who helped me with setting up our internal Julia language ecosystem.\nMatthijs asked me to write a guest post about what skills are needed to become a great scientific coder. He asked me because I assisted a team of scientists in adopting Julia for their research and development work. I am keen to help: I empathize with people who come up with great ideas but have a hard time wrapping these up into something that can be turned into a product. Even under the assumption that code will be extensively improved upon by others with more software knowledge, that f…",
          "link": "https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned",
          "publishedOn": "2023-05-04T09:43:36.000Z",
          "wordCount": 6814,
          "title": "Production-ready code for scientists:  3 lessons learned",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683010031069%2Fa33212ab-1534-4842-92cd-a94b4e89785c.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/automate-your-code-quality-in-julia",
          "author": "Matthijs Cox",
          "description": "Code quality is a topic in Julia that I believe deserves more attention from both users and developers. The Julia language originated in academia and focused heavily on helping scientists write better code, which is going great and deserves much praise! However, to onboard more software engineers and professional organizations we're going to have to invest even further into code quality and automated code quality tools and other methods such as used in the field of \"quality assurance\". In this article I'll explore the current state in the Julia ecosystem.\nAt our workplace we have investigated the following tools and practices. I'll start from generic practices and then move on to more advanced tools.\nPackage structure\nUnit testing with Pkg.jl\nAutomated testing and Continuous Integration (C…",
          "link": "https://scientificcoder.com/automate-your-code-quality-in-julia",
          "publishedOn": "2023-04-26T07:47:00.000Z",
          "wordCount": 12740,
          "title": "Automate Your Code Quality In Julia",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1682430557530%2F69f045a8-635c-4ec6-b836-dbdcf7f0dd23.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/the-art-of-multiple-dispatch",
          "author": "Matthijs Cox",
          "description": "I love thinking visually by drawing doodles and schematics for my work. It's one of my favorite things to do, next to coding. When working with the Julia language, one visualization I enjoy is seeing the type space of a method that you are dispatching on. Normally I do this in my mind's eye, but let me clarify this by drawing some actual figures.\nTo start with the basics; Julia has functions and methods. A function is simply the name, like push! or read . Methods are specific definitions of a function, for certain types of arguments. Take for example push!(s::Set, x) or read(io::IO) . From an object-oriented perspective you could say that methods are instances of functions.\n\nFor any given method you can consider the dispatching as slicing a part of the entire possible type space of that gi…",
          "link": "https://scientificcoder.com/the-art-of-multiple-dispatch",
          "publishedOn": "2023-04-20T09:01:49.000Z",
          "wordCount": 5881,
          "title": "The Art of Multiple Dispatch",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1681976569505%2Fe92f2398-d079-449e-ac6a-4b194fe226ac.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/my-target-audience",
          "author": "Matthijs Cox",
          "description": "What kind of people do I have in mind while writing this blog? People who share my professional mission of course! What is that mission you ask? Let me elaborate.\nFrom Research to Engineering\nI am a scientist who danced with startups and moved into industry. I've spend years doing research, and years doing software product development. During those years I have gotten slightly frustrated with the process of moving ideas from research to production, primarily in my favorite field of scientific computing.\nThe typical problem is that the time from research to production can be long, often spanning multiple years per project, and the process can be error prone. Some common smaller issues I see arising in many of our projects:\nUnreproducible, unexplainable scripts or notebooks in research\nEffor…",
          "link": "https://scientificcoder.com/my-target-audience",
          "publishedOn": "2023-04-18T11:46:15.000Z",
          "wordCount": 6124,
          "title": "My Target Audience",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1681818346405%2Fb3103eb1-9008-42ce-a071-5c9a927b4ce0.png%3Fw%3D1200%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/why-this-blog",
          "author": "Matthijs Cox",
          "description": "My goal in life is to follow my curiosity and help others with the knowledge I uncover. A solid way to help people is to reflect on the last years and think about what would have helped your past self. In my case, I have been busy trying to develop and deploy numerical computing applications with the Julia language. One thing that I found lacking was good material on how to do numerical computing professionally in the industry, something I learned is sometimes called \"scientific software engineering\". A book or blog about large-scale development and deployment into production systems would have helped me tremendously. I had to learn most things the hard way through trial and error.\nSince what I need doesn't exist, we will have to make it exist! That's this blog!\nI have been blogging about …",
          "link": "https://scientificcoder.com/why-this-blog",
          "publishedOn": "2023-04-16T17:27:18.000Z",
          "wordCount": 4362,
          "title": "Why this blog?",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1681655524424%2F8208e14f-0765-4eb2-a301-4d9470f26e45.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        }
      ]
    },
    {
      "title": "妖怪世捨て人",
      "feedUrl": "https://tymoon.eu/api/reader/atom",
      "siteUrl": "https://reader.tymoon.eu/",
      "articles": [
        {
          "id": "https://reader.tymoon.eu/article/430",
          "author": null,
          "description": "I don't like sleeping. I like the idea of sleep, but the practise of it seems all too often fraught with issues for me. I do consider myself fortunate that I don't suffer from any major sleeping disabilities like insomnia, but my quality of sleep is nevertheless far from ideal, despite adhering to a rather strict and regular sleeping schedule.\nI frequently grind my teeth during sleep, and so have started wearing a denture during the night. The denture makes things permanently uncomfortable, and I honestly don't know if it's the major cause of me grinding my teeth at this point. I definitely wouldn't be surprised at all if it exacerbates the problem. I don't know why I grind my teeth, though I figure that since most of the time I can't remember my dreams at all, and when I do, they're usual…",
          "link": "https://reader.tymoon.eu/article/430",
          "publishedOn": "2023-07-22T08:59:01.000Z",
          "wordCount": 2083,
          "title": "Die Toteninsel - Confession 91",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2537"
        },
        {
          "id": "https://reader.tymoon.eu/article/429",
          "author": null,
          "description": "Hello everyone. It's been a while since the last update. I apologise for the silence, things have slipped out of habit a little bit, and besides there's just been a lot of work on things that aren't easy to talk about. I'm still stuck in the R&D phase for the next game, and probably will continue to be there for a few more months before I can properly enter pre-production.\nI've really needed some space away from Kandria for a while, too. I did still release patches in the meantime to fix some egregious problems and bring the source back up to date with the latest changes in the Trial engine. The final DLC update with official modding support is still in the works, but given how little response there's been to the level editor update I'm not making it a big priority.\nThe financials for Kand…",
          "link": "https://reader.tymoon.eu/article/429",
          "publishedOn": "2023-06-13T15:23:27.000Z",
          "wordCount": 638,
          "title": "A status update on Kandria, Shirakumo, and me",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2438"
        },
        {
          "id": "https://reader.tymoon.eu/article/428",
          "author": null,
          "description": "Kandriaの日本語アップデートはリリースです！\n(私の日本語はまだまだですから、すみません)\n私のゲームは日本語でリリースのは夢ですからうれしい！Mimirin(@mioda833)さんはKandriaの日本語バーシオンを作ってありがとう。素晴らしい仕事をできた。\n今からSteamとItch.ioとKandria.comでアップデーとをダウンロードできる。",
          "link": "https://reader.tymoon.eu/article/428",
          "publishedOn": "2023-04-12T12:55:57.000Z",
          "wordCount": 57,
          "title": "Kandriaの日本語アップデートはリリースです！",
          "imageUrl": null
        },
        {
          "id": "https://reader.tymoon.eu/article/427",
          "author": null,
          "description": "Another month gone by. There's no major updates this month, since we just had the level editor release last month. However, there is a somewhat major update coming out next week!\nYou may have guessed from the title, but we're adding Japanese localisation to the game! It'll release on Wednesday, 12th of April. As someone that's been trying to learn Japanese for a long time, this is another step in the development that I've been looking forward to very much.\n\nI'm also really glad that we can release this already, so it'll be well out by the time I visit Tokyo Game Show in September!\nOther news\nWith the level editor and the beginning of the modding support already in place, I've taken a bit of a step back from Kandria development for a bit, and instead focused on working on a lot of other stuff that's been way overdue, like moving and upgrading our servers, taking care of my mental health, and starting work on pre-pre-production for the next game.\nHowever, Kandria development is not yet done. The second and final major update with an official modding API is still coming. I don't have a release date for that yet, so I hope you remain patient!\nIn the meantime, my paper for the European Lisp Symposium in Amsterdam was accepted, so I will be presenting Kandria there. The paper is quite technical, but if you're interested in Common Lisp, it might be worth a read. And if you're going to be in Amsterdam, let me know. I'd be happy to chat!\nThat's it for now\nA rather short update this month, but if you're interested in the details of the pre-pre-production process, come on hang out in the Shirakumo channel with the rest of us! We're discussing all the improvements to Trial there.",
          "link": "https://reader.tymoon.eu/article/427",
          "publishedOn": "2023-04-03T10:48:00.000Z",
          "wordCount": 347,
          "title": "次は…何？ - April Kandria Update",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZM09BPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/425",
          "author": null,
          "description": "The first major update for Kandria is now live on all platforms! It includes the level editor, a modding system, some new sample levels, and bugfixes!\nLevel Editor\nThe level editor received a big overhaul and is now a lot more accessible. There's also official documentation now to help get you started and explain all the tools and shortcuts available. If you want to dig in, just update your game and navigate to Mod Manager > Create Mod, which should place you directly into the editor in a new world of your own!\nSharing Mods\nYou can play levels made by others and download them directly from within the game. To browse existing levels, simply go to Mod Manager > Discover. From there you can select and install mods. Once installed, you can play their world under the Worlds tab.\nWe've provided …",
          "link": "https://reader.tymoon.eu/article/425",
          "publishedOn": "2023-03-08T13:47:42.000Z",
          "wordCount": 539,
          "title": "Level Editor Update is Live!",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2379"
        },
        {
          "id": "https://reader.tymoon.eu/article/424",
          "author": null,
          "description": "Let's get the important news out of the way: the next major update for Kandria will launch on Wednesday, March 8th, at 15:00 CET. The update will include a number of improvements, new features, more content, and a community event!\nLevel Editing\nThe biggest part of the update is, no doubt, the polished level editor. The editor has always been a part of Kandria since release, but now it's nicely polished and much easier to use!\n\nI've also included documentation to make it much easier for you to get a handle on how the editor works and how to get started with using it. I'm very excited to see what people can come up with!\nAnd yes, the entire Kandria world was created in this editor, so it is fully capable of creating some very complex levels!\nPartial Modding Support\nBut, the editor itself is …",
          "link": "https://reader.tymoon.eu/article/424",
          "publishedOn": "2023-03-01T13:56:17.000Z",
          "wordCount": 565,
          "title": "Next Kandria Update on March 8th!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZMk1nPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/423",
          "author": null,
          "description": "It's already been a month since Kandria released! Woah, time sure flies these days, huh?\nKandria Launch\nWell, in case you missed the launch, the game is now officially available on Steam, Itch, and directly on our Website.\nThe reviews we've gotten have been very positive, both from press, on Steam, and on the streams I've caught! I'm really happy that people have been enjoying the game, and am very thankful for all of the support and well wishes.\nThe first two weeks after launch were spent furiously fixing things, with a patch being released almost every day. Things have calmed down a lot since, and while there's a few polish things left over that we know about, overall the game is now very stable, and even got the official Steam Deck Verified rating!\nBut, the work isn't done yet.\nUpcoming…",
          "link": "https://reader.tymoon.eu/article/423",
          "publishedOn": "2023-02-07T12:35:49.000Z",
          "wordCount": 515,
          "title": "Building the Future - February Kandria Update",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2293"
        },
        {
          "id": "https://reader.tymoon.eu/article/422",
          "author": null,
          "description": "Kandria is now finally available for purchase and play!\nI recommend buying it on Steam, as the algorithm there will help us bring the game in front of more people, as well. However, if that isn't a possibility for you, there's also options on Itch.io and through Xsolla on our webpage:\n\nSteam\n\nItch.io\n\nXsolla\n\nI am also live on Steam, Twitch, and YouTube right now, to celebrate the launch! Come on and hang out in the chat: https://stream.shinmera.com\nI hope you all enjoy the game, and thank you very much for sticking with us for all this time!",
          "link": "https://reader.tymoon.eu/article/422",
          "publishedOn": "2023-01-11T14:02:43.000Z",
          "wordCount": 149,
          "title": "Kandria is now out!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZME1RPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/421",
          "author": null,
          "description": "​Kandria launches tomorrow, on Wednesday the 11th, at 15:00 CET / 9:00 EST!\nThere'll be a launch stream for the occasion as well. It'll be live on Twitch! I'll be happy to answer any questions you may have about the game, and hope to see you there!​\nLast opportunity to wishlist the game, too: https://kandria.com/steam",
          "link": "https://reader.tymoon.eu/article/421",
          "publishedOn": "2023-01-10T13:08:18.000Z",
          "wordCount": 112,
          "title": "Kandria launches tomorrow!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZek9BPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/420",
          "author": null,
          "description": "In case you missed the yearly update last week: Kandria will release in one week from today, on January 11th, 15:00 CET / 09:00 EST. I hope you're as excited to play it as we are to finally get it into your hands!\nPlease remember to wishlist it on Steam to make sure you don't miss it!",
          "link": "https://reader.tymoon.eu/article/420",
          "publishedOn": "2023-01-04T13:30:21.000Z",
          "wordCount": 117,
          "title": "Kandria releases in one week on January 11!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZek5RPT0="
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}
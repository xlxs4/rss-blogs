{
  "sources": [
    {
      "title": "Stochastic Lifestyle",
      "feedUrl": "http://www.stochasticlifestyle.com/feed/",
      "siteUrl": "https://www.stochasticlifestyle.com/",
      "articles": [
        {
          "id": "https://www.stochasticlifestyle.com/?p=1705",
          "author": "Christopher Rackauckas",
          "description": "Part of the COMPUTATIONAL ABSTRACTIONS FOR PROBABILISTIC AND DIFFERENTIABLE PROGRAMMING WORKSHOP\nAbstract: Many probabilistic programming languages (PPLs) attempt to integrate with equation solvers (differential equations, nonlinear equations, partial differential equations, etc.) from the inside, i.e. the developers of the PPLs like Stan provide differential equation solver choices as part of the suite. However, as equation solvers are an entire discipline to themselves with many active development communities and subfields, this places an immense burden on PPL developers to keep up with the changing landscape of tens of thousands of independent researchers. In this talk we will explore how Julia PPLs such as Turing.jl support of equation solvers from the outside, i.e. how the tools of differentiable programming allows equation solver libraries to be compatible with PPLs  ... READ MORE\nThe post Integrating equation solvers with probabilistic programming through differentiable programming appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/integrating-equation-solvers-with-probabilistic-programming-through-differentiable-programming/",
          "publishedOn": "2022-11-24T01:04:59.000Z",
          "wordCount": 1244,
          "title": "Integrating equation solvers with probabilistic programming through differentiable programming",
          "imageUrl": "//www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG"
        },
        {
          "id": "http://www.stochasticlifestyle.com/?p=1681",
          "author": "Christopher Rackauckas",
          "description": "Automatic differentiation of a “solver” is a subject with many details for doing it in the most  effective form. For this reason, there are a lot of talks and courses that go into lots of depth on the topic. I recently gave a talk on some of the latest stuff in differentiable simulation with the American Statistical Association, and have some detailed notes on such adjoint derivations as part of the 18.337 Parallel Computing and Scientific Machine Learning graduate course at MIT. And there are entire organizations like my SciML Open Source Software Organization which work day-in and day-out on the development of new differentiable solvers.\nI’ll give a brief summary of all my materials here below.\nContinuous vs Discrete Differentiation of Solvers\nAD of a solver can be done in essentially two different ways: either directly performing automatic  ... READ MORE\nThe post Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better? appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/direct-automatic-differentiation-of-solvers-vs-analytical-adjoints-which-is-better/",
          "publishedOn": "2022-10-11T07:09:53.000Z",
          "wordCount": 3134,
          "title": "Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better?",
          "imageUrl": "http://www.stochasticlifestyle.com/wp-content/uploads/2022/10/Capture7.png"
        },
        {
          "id": "https://www.stochasticlifestyle.com/?p=1670",
          "author": "Christopher Rackauckas",
          "description": "Is differentiable programming actually necessary, or can you just train the neural network in isolation against data and then stick the trained neural network into the simulation? We looked at this problem in detail in our new manuscript titled Capturing missing physics in climate model parameterizations using neural differential equations.\nThe goal of this project is to understand temperature mixing in large eddy simulations, essentially columns of water in the ocean. I.e., can we take a “true” 3D Navier-Stokes and use that to build very quick and accurate models for how heat flows up and down in the water?\n\nThis isn’t a new problem: climate scientists  ... READ MORE\nThe post Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately? appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/is-differentiable-programming-actually-necessary-cant-you-just-train-separately/",
          "publishedOn": "2022-10-04T07:38:56.000Z",
          "wordCount": 1510,
          "title": "Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately?",
          "imageUrl": "http://www.stochasticlifestyle.com/wp-content/uploads/2022/10/Screenshot-2022-10-03-192913.png"
        }
      ]
    },
    {
      "title": "Andrej Karpathy blog",
      "feedUrl": "http://karpathy.github.io/feed.xml",
      "siteUrl": "http://karpathy.github.io/",
      "articles": []
    },
    {
      "title": "Mosè Giordano",
      "feedUrl": "https://giordano.github.io/blog/feed.xml",
      "siteUrl": "http://giordano.github.io",
      "articles": []
    },
    {
      "title": "Shuhei Kadowaki&#39;s homepage",
      "feedUrl": "https://aviatesk.github.io/feed.xml",
      "siteUrl": "https://aviatesk.github.io/",
      "articles": []
    },
    {
      "title": "Mike Innes’s Blog",
      "feedUrl": "https://mikeinnes.io/feed.xml",
      "siteUrl": "/",
      "articles": [
        {
          "id": "https://mikeinnes.io/2023/02/18/bing.html",
          "author": null,
          "description": "Conversations with ChatGPT, a recently released chatbot, reportedly cost its inventors at OpenAI a few cents each. By Internet standards this is shockingly expensive. Though it’s touted as the future of the search engine, any company scaling the technology up to the world’s 10 billion or so daily queries will face suffocating costs. The milestone for Artificial Intelligence may be that it’s now about as expensive as the real thing: Amazon’s mechanical turk service (which Jeff Bezos called “artificial artificial intelligence”) also pays its human labourers a few cents per question-response task.",
          "link": "https://mikeinnes.io/2023/02/18/bing.html",
          "publishedOn": "2023-02-18T00:00:00.000Z",
          "wordCount": 1301,
          "title": "Deus Ex Bing",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Tom Kwong's Infinite Loop",
      "feedUrl": "https://ahsmart.com/feed.xml",
      "siteUrl": "https://ahsmart.com/",
      "articles": []
    },
    {
      "title": "JuliaLang - The Julia programming language",
      "feedUrl": "https://julialang.org/feed.xml",
      "siteUrl": "https://julialang.org/",
      "articles": [
        {
          "id": "https://julialang.org/blog/2023/04/julia-1.9-highlights/",
          "author": null,
          "description": "Highlights of the Julia 1.9 release.\nRead more",
          "link": "https://julialang.org/blog/2023/04/julia-1.9-highlights/",
          "publishedOn": "2023-05-19T00:00:00.000Z",
          "wordCount": 3447,
          "title": "Julia 1.9 Highlights",
          "imageUrl": "/assets/images/julia-open-graph.png"
        },
        {
          "id": "https://julialang.org/blog/2022/08/julia-1.8-highlights/",
          "author": null,
          "description": "Highlights of the Julia 1.8 release.\nRead more",
          "link": "https://julialang.org/blog/2022/08/julia-1.8-highlights/",
          "publishedOn": "2022-08-18T00:00:00.000Z",
          "wordCount": 2763,
          "title": "Julia 1.8 Highlights",
          "imageUrl": "/assets/images/julia-open-graph.png"
        },
        {
          "id": "https://julialang.org/blog/2022/08/juliacon-highlights-2022/",
          "author": null,
          "description": "JuliaCon 2022 Highlights\nRead more",
          "link": "https://julialang.org/blog/2022/08/juliacon-highlights-2022/",
          "publishedOn": "2022-08-10T00:00:00.000Z",
          "wordCount": 1104,
          "title": "JuliaCon 2022 Highlights",
          "imageUrl": "https://user-images.githubusercontent.com/35577566/183544010-09691b83-9fc6-4b49-b835-d9a8e691e112.png"
        }
      ]
    },
    {
      "title": "Ted Kaminski",
      "feedUrl": "https://www.tedinski.com/feed.xml",
      "siteUrl": "http://www.tedinski.com/",
      "articles": []
    },
    {
      "title": "Invenia Blog",
      "feedUrl": "https://invenia.github.io/blog/feed.xml",
      "siteUrl": "https://invenia.github.io/blog/",
      "articles": []
    },
    {
      "title": "Two-Bit History",
      "feedUrl": "https://twobithistory.org/feed.xml",
      "siteUrl": "https://twobithistory.org/",
      "articles": []
    },
    {
      "title": "programming (and other) musings",
      "feedUrl": "https://jao.io/blog/rss.xml",
      "siteUrl": "https://jao.io/blog/",
      "articles": [
        {
          "id": "https://jao.io/blog/in-no-particular-order.html",
          "author": null,
          "description": "Interesting bits elsewhere:\n\n\n\nThe influence of Self\n10 quick Mastodon tips\nWriting with LaTeX\nTrying out Mathstodon\nOlder entries\n\n\n\nTags: sundry",
          "link": "https://jao.io/blog/in-no-particular-order.html",
          "publishedOn": "2022-11-21T05:05:00.000Z",
          "wordCount": 61,
          "title": "in no particular order",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/the-cambridge-centenary-ulysess.html",
          "author": null,
          "description": "Physically, this book is obnoxious: huge, wasted margins frame a reproduction\nof the original text that painstakingly tries to look as shabby as it was,\nincluding faded letters and all its typos, and its size and weight border on\nthe unmanageable.  Ah, but the contents is really good: on the one hand\nthere's of course Joyce's text itself (after twenty years since the last time,\nmy English, with the help of the annotations, was closer to be up to the task,\nand enjoy it even when it wasn't), and next to it the essays introducing every\nchapter, which i found (with an exception or two) very informative and,\nsometimes, even illuminating.  I was also delighted to confirm that the\nparallels with Homer's work are a strecht to say the least: i quickly read The\nOdyssey in preparation and found it, again, boring at best and disheartening\nin its depiction of the society of the time (not that Joyce's Dublin was\nwithout its blemishes, but you hopefully get my point).\n\n\n\nSo, just get an electronic version and enjoy!\n\nTags: books",
          "link": "https://jao.io/blog/the-cambridge-centenary-ulysess.html",
          "publishedOn": "2022-10-30T01:50:00.000Z",
          "wordCount": 219,
          "title": "the cambridge centenary ulysess",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/visual-differential-geometry-and-forms.html",
          "author": null,
          "description": "This is a beautiful book.  Crystal-clear and insightful explanations, with the\nright amount of historical background and quite original outlook (without\ngoing overboard).  I can only echo what other quoted reviewers have said: i\nwish i had had this book when i was studying these matters in earnest, i'm\npretty sure i've understood some fine points for the first time only now!  I'd\nalso perhaps make an exception on the last part (or act, as Needham calls\nthem) on differential forms, which feels at times a bit rushed and in need of\nsome editing, and it'd had been wonderful if the manufacture of the book were\nup to its contents: most images and photographs look really, really cheap, and\nthere are more typos than granted, which is a pity (as to other figures,\nthey're decent, although it must be said that Needham is not Penrose, but then\nwho is?).\n\nTags: books",
          "link": "https://jao.io/blog/visual-differential-geometry-and-forms.html",
          "publishedOn": "2022-10-30T00:30:00.000Z",
          "wordCount": 193,
          "title": "visual differential geometry and forms",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html",
          "author": null,
          "description": "I've just released a new version of consult-recoll, which implements a couple\nof features that i am really liking, namely, grouping of search results by\nmime type:\n\n\n\n\n\n\n\n\n\nand inline snippets:\n\n\n\n\n\n\n\n\n\nHappy searches!\n\n\n\nTags: emacs programming",
          "link": "https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html",
          "publishedOn": "2022-08-04T17:29:00.000Z",
          "wordCount": 79,
          "title": "inline snippets and grouping in consult-recoll",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "wingolog",
      "feedUrl": "https://wingolog.org/feed/atom",
      "siteUrl": "https://wingolog.org/",
      "articles": [
        {
          "id": "https://wingolog.org/archives/2023/05/20/approaching-cps-soup",
          "author": null,
          "description": "Good evening, hackers.  Today's missive is more of a massive, in the\nsense that it's another presentation transcript-alike; these things always\ntranslate to many vertical pixels.\nIn my defense, I hardly ever give a\npresentation twice, so not only do I miss out on the usual\nper-presentation cost amortization and on the incremental improvements\nof repetition, the more dire error is that whatever message I might have\ncan only ever reach a subset of those that it might interest; here at\nleast I can be more or less sure that if the presentation would interest\nsomeone, that they will find it.\nSo for the time being I will try to\nshare presentations here, in the spirit of, well, why the hell not.\nLast week I gave a training talk to  collaborators on the intermediate\nrepresentation used by 's compi…",
          "link": "https://wingolog.org/archives/2023/05/20/approaching-cps-soup",
          "publishedOn": "2023-05-20T07:10:03.000Z",
          "wordCount": 4976,
          "title": "approaching cps soup",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/05/02/structure-and-interpretation-of-ark",
          "author": null,
          "description": "Hello, dear readers!  Today's article describes Ark, a new\nJavaScript-based mobile development platform.  If you haven't read them\nyet, you might want to start by having a look at my past articles on\n,\n,\n,\nand\n;\nhaving a common understanding of the design space will help us\nunderstand where Ark is similar and where it differs.CapacitorReact\nNativeNativeScriptFlutter\nIf I had to bet, I would guess that you have not heard of Ark.  (I\ncertainly hadn't either, when commissioned to do this research series.)\nTo a first approximation, Ark—or rather, what I am calling Ark; I don't\nactually know the name for the whole architecture—is a loosely\nFlutter-like UI library implemented on top of a dialect of JavaScript,\nwith build-time compilation to bytecode (like Hermes) but also with\nsupport for just-i…",
          "link": "https://wingolog.org/archives/2023/05/02/structure-and-interpretation-of-ark",
          "publishedOn": "2023-05-02T09:13:41.000Z",
          "wordCount": 4130,
          "title": "structure and interpretation of ark",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/26/structure-and-interpretation-of-flutter",
          "author": null,
          "description": "Good day, gentle hackfolk.  Like an\n fiddler I would\nappear to be deep in the groove, playing endless variations on a theme,\nin this case mobile application frameworks.  But one can only recognize\nnovelty in relation to the familiar, and today's note is a departure: we\nare going to look at , a UI toolkit based\nnot on JavaScript but on the  language.old-timeFlutterDart\nWhere to start, even?  The problem is big enough that I'll\napproach it from three different angles: from the past, from the top,\nand from the bottom.\nWith the other frameworks we looked at, we didn't have to say much about\ntheir use of JavaScript.  JavaScript is an obvious choice, in 2023 at\nleast: it is ubiquitous, has high quality implementations, and as a\nlanguage it is quite OK and progressively getting better.  Up to now…",
          "link": "https://wingolog.org/archives/2023/04/26/structure-and-interpretation-of-flutter",
          "publishedOn": "2023-04-26T13:50:01.000Z",
          "wordCount": 3108,
          "title": "structure and interpretation of flutter",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/24/structure-and-interpretation-of-nativescript",
          "author": null,
          "description": "Greetings, hackers tall and hackers small!\nWe're only a few articles in to this series on mobile application development frameworks, but I feel like we are already well into our journey.  We started our trip through the design space with a look at \n,\nwhich defines its user interface in terms of the web platform, and only\ncalls out to iOS or Android native features as needed.  We proceeded\non to ,\nwhich moves closer to native by rendering to platform-provided UI\nwidgets, layering a cross-platform development interface on top.Ionic /\nCapacitorReact\nNative\nToday's article takes an in-depth look at , whose point in the design space is further on the road towards\nthe platform, unabashedly embracing the specificities of the API\navailable on iOS and Android, exposing these interfaces directly to …",
          "link": "https://wingolog.org/archives/2023/04/24/structure-and-interpretation-of-nativescript",
          "publishedOn": "2023-04-24T09:10:58.000Z",
          "wordCount": 2627,
          "title": "structure and interpretation of nativescript",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/21/structure-and-interpretation-of-react-native",
          "author": null,
          "description": "Hey hey!  Today's missive continues exploring the space of JavaScript\nand mobile application development.\nYesterday we looked into , giving a brief\nstructural overview of what Capacitor apps look like under the hood and\nhow this translates to three aspects of performance: startup latency, jank,\nand peak performance.  Today we'll apply that same approach to another\npopular development framework, .Ionic / CapacitorReact Native\nI don't know about you, but I find that there is so much marketing smoke\nand lights around the whole phenomenon that is React and React Native\nthat sometimes it's hard to see what's actually there.  This is\ncompounded by the fact that the programming paradigm espoused by React\n(and its \"native\" cousin that we are looking at here) is so effective at\nenabling JavaScript …",
          "link": "https://wingolog.org/archives/2023/04/21/structure-and-interpretation-of-react-native",
          "publishedOn": "2023-04-21T08:20:17.000Z",
          "wordCount": 2919,
          "title": "structure and interpretation of react native",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/20/structure-and-interpretation-of-capacitor-programs",
          "author": null,
          "description": "Good day, hackers!  Today's note is a bit of a departure from compilers\ninternals.  A client at work recently asked me to look into\ncross-platform mobile application development and is happy for the\nresults to be shared publically.  This, then, is the first in a series\nof articles.\nI'll be starting by taking a look at\n/,\n,\n,\n/, and then a\nmystery guest.  This article will set the stage and then look into\nIonic/Capacitor.IonicCapacitorReact NativeNativeScriptFlutterDart\nThe angle I am taking is, if you were designing a new mobile operating\nsystem that uses JavaScript as its native application development\nlanguage, what would it mean to adopt one of these as your primary app\ndevelopment toolkit?  It's a broad question but I hope we can come up\nwith some useful conclusions.\nI'm going to appro…",
          "link": "https://wingolog.org/archives/2023/04/20/structure-and-interpretation-of-capacitor-programs",
          "publishedOn": "2023-04-20T10:20:32.000Z",
          "wordCount": 2496,
          "title": "structure and interpretation of capacitor programs",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/04/18/sticking-point",
          "author": null,
          "description": "Good evening, gentle readers.  A brief note tonight, on a sticky place.\nSee, I have too many projects right now.\nIn and of itself this is not so much of a problem as a condition. I know\nmy limits; I keep myself from burning out by shedding load, and there is\na kind of priority list of which projects keep adequate service levels.\nFirst come the tiny humans that are in my care who need their butts\nwiped and bodies translated to and from school or daycare and who --\nwell you know the old Hegelian trope, that the dialectic crank of\nhistory doesn't turn itself, that it takes actions from people to\nsynthesize the thesis and the antithesis, and that even History itself\nisn't always monotonic; in the same way, bedtime is a reality,\nthere are the material conditions of sleepiness and\nyou're-gonna-b…",
          "link": "https://wingolog.org/archives/2023/04/18/sticking-point",
          "publishedOn": "2023-04-18T20:23:49.000Z",
          "wordCount": 751,
          "title": "sticking point",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us",
          "author": null,
          "description": "Good day, comrades!\nToday I'd like to share the good news that WebAssembly is finally coming\nfor the rest of us weirdos.\nThis is a transcript-alike of a talk that I gave last week at , a gathering in Berlin of\npeople that are using \"technologies beyond the mainstream\" to get things\ndone: Haskell, Clojure, Elixir, and so on.  PDF slides , and I'll link the video too when it becomes available.BOB\n2023here\nWebAssembly: what even is it?  Not a programming language that\nyou would write software in, but rather a compilation target: a sort of\nassembly language, if you will.\nIf you look at what the characteristics of WebAssembly are as an\nabstract machine, to me there are two main areas in which it is an\nadvance over the alternatives.\nFirstly it's \"close to the metal\" -- if you compile for example…",
          "link": "https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us",
          "publishedOn": "2023-03-20T09:06:42.000Z",
          "wordCount": 5427,
          "title": "a world to win: webassembly for the rest of us",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/03/10/pre-initialization-of-garbage-collected-webassembly-heaps",
          "author": null,
          "description": "Hey comrades, I just had an idea that I won't be able to work on in the\nnext couple months and wanted to release it into the wild.  They say if\nyou love your ideas, you should let them go and see if they come back to\nyou, right?  In that spirit I abandon this idea to the woods.\nBasically the idea is , but for modules\nthat store their data on the GC-managed heap instead of just in linear\nmemory.Wizer-like pre-initialization of WebAssembly\nmodules\nSay you have a WebAssembly module with .\nIt might look like this:GC\ntypes\nYou define some struct and array types, there are some global variables,\nand some functions to actually do the work.  (There are probably also\ntables and other things but I am simplifying.)\nIf you consider the object graph of an instantiated module, you will\nhave some set of …",
          "link": "https://wingolog.org/archives/2023/03/10/pre-initialization-of-garbage-collected-webassembly-heaps",
          "publishedOn": "2023-03-10T09:20:33.000Z",
          "wordCount": 1422,
          "title": "pre-initialization of garbage-collected webassembly heaps",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum",
          "author": null,
          "description": "Friends, you might have noted, but over the last year or so I really\ncaught the GC bug.  Today's post sums up that year, in the form of a\ntalk I gave yesterday at FOSDEM.  It's long!  If you prefer video, you\ncan have a look instead to the .at the FOSDEM event\npage\nSo the context for the whole effort is that Guile has this part of its\nimplementation which is in C.  It also exposes a lot of that\nimplementation to users as an API.\nSo what contraints does this kind of API impose on the garbage\ncollector?\nLet's start by considering the simple  call above.  In a\ngarbage-collected environment, the GC is responsible for reclaiming\nunused memory.  How does the GC know that the result of a \ncall is in use?consscm_cons\nGenerally speaking there are two main strategies for automatic memory\nmanagement.…",
          "link": "https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum",
          "publishedOn": "2023-02-07T13:14:37.000Z",
          "wordCount": 6720,
          "title": "whippet: towards a new local maximum",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Planet Lisp",
      "feedUrl": "http://planet.lisp.org/rss20.xml",
      "siteUrl": "http://planet.lisp.org/",
      "articles": [
        {
          "id": "https://lisp-journey.gitlab.io/blog/pretty-gui-in-common-lisp-with-nodgui-tk-themes/",
          "author": null,
          "description": "Do you think Tcl/Tk GUIs are doomed to look outdated?\n\nFear not!\n\n\n\n\n\n\n\n\nA treeview widget:\n\n\nThe official example of Forest Light:\n\nThe ttkthemes gallery\nPlus, Tk itself has a little choice of built-in themes:\n\nWe can use these themes with nodgui, the Ltk fork.\nIn June of 2020, @cage added a little function to load a .tcl file:\n(defun eval-tcl-file (file-path)\n  \"This function will feed the TCL interpreter with the contents\n   of the file `path'.\n   Please, as this function will load  and execute a script, ensure to\n   load files only from trusted sources otherwise severe security problem\n   may arise.\"\n  (assert (stringp file-path))\n  (format-wish \"source {~a}\" file-path))\n\nAs a consequence, we can load a .tcl script that defines a theme, and use it. Themes generally consist of a .tcl script and a directory of png or gif images (when images are not defined in-line).\nConsidering we cloned the ttkthemes repo locally:\n  (with-nodgui ()\n    (eval-tcl-file \"ttkthemes/ttkthemes/png/yaru/yaru.tcl\")\n    (use-theme \"yaru\")\n\nand that’s all there is to it.\nFor now, some themes are not supported. Scalable themes are not\nsupported, the .gif based themes of ttkthemes won’t load (the “scid”\nand “smog” themes in ttkthemes, the Sun Valley\ntheme didn’t\nwork). This could change when tksvg lands in Debian (or maybe, if\nyou install it yourself? I didn’t try), or with the next release of\nTcl/Tk that will include SVG support (read\n#13).\nFrankly, that was a great news of the day. Yes, I think some themes\nare pleasant to the eyes! This makes me want to use little Tk UIs here\nand there.\nHere’s the code for the little media player of the screenshots. It is based on Peter Lane’s extensive examples.\nKuddos to @cage o/",
          "link": "https://lisp-journey.gitlab.io/blog/pretty-gui-in-common-lisp-with-nodgui-tk-themes/",
          "publishedOn": "2023-05-26T22:22:04.000Z",
          "wordCount": 732,
          "title": "vindarel: Pretty GUI in Common Lisp with nodgui's Tk themes",
          "imageUrl": "/images/default.png"
        },
        {
          "id": "https://lisp-journey.gitlab.io/blog/i18n-in-my-lisp-web-app-with-djula-templates-and-gettext/",
          "author": null,
          "description": "I finally added translations to my Lisp web app \\o/\n\nI wanted to do it with gettext and Djula templates. There seemed to\nbe some support for this, but it turned out... not\nstraightforward. After two failed attempts, I decided to offer a\nlittle 90 USD bounty for the task (I announced it on the project’s\nissues and on Discord, watch them out for future bounties ;) ).\n@fstamour took the challenge and is\nthe person I’ll be eternally grateful for :D He kindly set up\neverything, answered my questions and traced down annoying bugs. BTW,\nI recommend you have a look at his ongoing\nbreeze project (towards refactoring tools for CL) and\nlocal-gitlab.\nMany thanks go as usual to @mmontone for incorporating changes to Djula after our feedback. Here’s Djula documentation:\nhttps://mmontone.github.io/djula/…",
          "link": "https://lisp-journey.gitlab.io/blog/i18n-in-my-lisp-web-app-with-djula-templates-and-gettext/",
          "publishedOn": "2023-05-08T12:01:34.000Z",
          "wordCount": 2311,
          "title": "vindarel: i18n in my Lisp web app with Djula templates and gettext",
          "imageUrl": "/images/default.png"
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/05/04/a-horrible-solution/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "Yesterday I wrote an article describing one of the ways traditional Lisp macros can be unhygienic even when they appear to be hygienic. Here’s a horrible solution to that.\nThe problem I described is that the expansion of a macro can refer to the values (usually the function values) of names, which the user of the macro can bind, causing the macro to fail. So, given a function\n(defun call-with-foo (thunk)\n  ...\n  (funcall thunk))\nThen the macro layer on top of it\n(defmacro with-foo (&body forms)\n  `(call-with-foo (lambda () ,@forms)))\nis not hygienic so long as local functions named call-with-foo are allowed:\n(flet ((call-with-foo (...) ...))\n  (with-foo ...))\nThe sensible solution to this is to say, just as the standard does about symbols in the CL package that you are not allowed to do that.\nHere’s another solution:\n(defmacro with-foo (&body forms)\n  `(funcall (symbol-function 'call-with-foo) (lambda () ,@forms)))\nThis is robust against anything short of top-level redefinition of call-with-foo. And you can be mostly robust even against that:\n(defmacro with-foo (&body forms)\n  `(funcall (load-time-value (symbol-function 'call-with-foo))\n            (lambda () ,@forms)))\nThis still isn’t safe against really malignant users, since the load time of the macro’s definition and its uses are not the same. But it’s probably fairly good.\nI hope I never feel I have to use techniques like this.",
          "link": "https://www.tfeb.org/fragments/2023/05/04/a-horrible-solution/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-05-04T11:33:41.000Z",
          "wordCount": 244,
          "title": "Tim Bradshaw: A horrible solution",
          "imageUrl": null
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/05/03/two-sides-to-hygiene/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "It’s tempting to think that by being sufficiently careful about names bound by traditional Lisp macros you can write macros which are hygienic. This is not true: it’s much harder than that.\nHygienic macros\nI do not fully understand all the problems which Scheme-style hygienic macros try to solve, and the implementation of the solutions is usually sufficiently difficult to understand that I have always been put off doing so, especially as the details of the implementation in Racket, the Scheme-related language I use most, seems to change every few years. I’m happy enough that I am mostly competent to write the macros I need in Racket, without understanding the details of the implementation.\nTraditional Lisp macros are, to me, far more appealing because they work in such an explicit and simp…",
          "link": "https://www.tfeb.org/fragments/2023/05/03/two-sides-to-hygiene/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-05-03T11:28:09.000Z",
          "wordCount": 1815,
          "title": "Tim Bradshaw: Two sides to hygiene",
          "imageUrl": null
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/05/02/nirvana/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "An article constructed from several emails from my friend Zyni, reproduced with her permission. Note that Zyni’s first language is not English.\nMany people have tried to answer what is so special about Lisp by talking about many things.\nSuch as interactive development, a thing common now to many languages of course, and if you use Racket with DrRacket not in fact how development usually works there at all. Are we to cast Racket into the outer darkness?1\nSuch as CLOS, a thing specific to Common Lisp: can you not achieve Lisp enlightenment unless you program in Common Lisp? Was Lisp enlightmenent impossible before CLOS existed? What stupid ideas. Could you implement CLOS in a language which was not Lisp? Certainly you could.\nSuch as the CL condition system: a thing also specific to Common Li…",
          "link": "https://www.tfeb.org/fragments/2023/05/02/nirvana/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-05-02T13:16:58.000Z",
          "wordCount": 1376,
          "title": "Tim Bradshaw: Nirvana",
          "imageUrl": null
        },
        {
          "id": "https://lisp-journey.gitlab.io/blog/how-to-parse-command-line-arguments-in-common-lisp/",
          "author": null,
          "description": "In 2018, I wrote a blog post and the Cookbook page on how to build Common Lisp binaries, and how to parse command-line arguments with the unix-opts library.\nBut since then, new libraries were created an they are pretty good! They are simpler to use, and have much more features. I had a good experience with Clingon: its usage is clear, its documentation is very good, it is very flexible (it has hooks and generic functions waiting to have an :around method) and @dnaeon is not at his first great CL project.\nYou might give adopt a look, or maybe defmain though I felt a little something was missing.\nSo I updated the guide to use Clingon. Let’s go.\n=> This article is best read on the Common Lisp Cookbook where it will receive updates.\nAs a reminder to this often-asked question, my SBCL standalon…",
          "link": "https://lisp-journey.gitlab.io/blog/how-to-parse-command-line-arguments-in-common-lisp/",
          "publishedOn": "2023-04-19T09:44:56.000Z",
          "wordCount": 2002,
          "title": "vindarel: How to parse command line arguments in Common Lisp (bis)",
          "imageUrl": "/images/default.png"
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/04/18/something-unclear-in-the-common-lisp-standard/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "There is what I think is a confusion as to bound declarations in the Common Lisp standard. I may be wrong about this, but I think I’m correct.\nBound and free declarations\nDeclarations in Common Lisp can be either bound or free:\na bound declaration appears at the head of a binding form and applies to a variable or function binding made by that form;\na free declaration is any declaration which is not bound.\n\n\nThere are declarations which do not apply to bindings, such as optimize: these are always free.\nExamples of bound and free declarations\nIn the form\n(let ((x 1))\n  (declare (type integer x))\n  ...)\nthe declaration is bound and applies to the binding of x. In the form\n(let ((/x/ 1))\n  (declare (special /x/)\n           (optimize (speed 3)))\n  ...)\nthe special declaration is bound and appli…",
          "link": "https://www.tfeb.org/fragments/2023/04/18/something-unclear-in-the-common-lisp-standard/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-04-18T09:53:46.000Z",
          "wordCount": 846,
          "title": "Tim Bradshaw: Something unclear in the Common Lisp standard",
          "imageUrl": null
        },
        {
          "id": "https://reader.tymoon.eu/article/427",
          "author": null,
          "description": "Another month gone by. There's no major updates this month, since we just had the level editor release last month. However, there is a somewhat major update coming out next week!\nYou may have guessed from the title, but we're adding Japanese localisation to the game! It'll release on Wednesday, 12th of April. As someone that's been trying to learn Japanese for a long time, this is another step in the development that I've been looking forward to very much.\n\nI'm also really glad that we can release this already, so it'll be well out by the time I visit Tokyo Game Show in September!\nOther news\nWith the level editor and the beginning of the modding support already in place, I've taken a bit of a step back from Kandria development for a bit, and instead focused on working on a lot of other stuff that's been way overdue, like moving and upgrading our servers, taking care of my mental health, and starting work on pre-pre-production for the next game.\nHowever, Kandria development is not yet done. The second and final major update with an official modding API is still coming. I don't have a release date for that yet, so I hope you remain patient!\nIn the meantime, my paper for the European Lisp Symposium in Amsterdam was accepted, so I will be presenting Kandria there. The paper is quite technical, but if you're interested in Common Lisp, it might be worth a read. And if you're going to be in Amsterdam, let me know. I'd be happy to chat!\nThat's it for now\nA rather short update this month, but if you're interested in the details of the pre-pre-production process, come on hang out in the Shirakumo channel with the rest of us! We're discussing all the improvements to Trial there.",
          "link": "https://reader.tymoon.eu/article/427",
          "publishedOn": "2023-04-03T10:48:00.000Z",
          "wordCount": 347,
          "title": "Nicolas Hafner: &#27425;&#12399;...&#20309;&#65311; - April Kandria Update",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZM09BPT0="
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/03/26/measuring-some-tree-traversing-functions/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "In a previous article my friend Zyni wrote some variations on a list-flattening function, some of which were ‘recursive’ and some of which ‘iterative’, managing the stack explicitly. We thought it would be interesting to see what the performance differences were, both for this function and a more useful variant which searches a tree rather than flattening it.\nWhat we measured\nThe code we used is here1. We measured four variations of each of two functions.\nList flattening\nAll these functions use collecting to build their results forwards. They live in flatten-variants.lisp.\nflatten/implicit-stack works in the obvious recursive way, with an implicit stack. This uses iterate to express the local recursive function.\nflatten/explicit-stack uses an explicit stack (called agenda in the code) repr…",
          "link": "https://www.tfeb.org/fragments/2023/03/26/measuring-some-tree-traversing-functions/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-03-26T09:25:50.000Z",
          "wordCount": 1537,
          "title": "Tim Bradshaw: Measuring some tree-traversing functions",
          "imageUrl": null
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/03/25/the-absurdity-of-stacks/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "Very often people regard the stack as a scarce, expensive resource, while the heap is plentiful and very cheap. This is absurd: the stack is memory, the heap is also memory. Deforming programs so they are ‘iterative’ in order that they do not run out of the stack we imagine to be so costly is ridiculous: if you have a program which is inherently recursive, let it be recursive.\nIn a previous article my friend Zyni wrote some variations on a list-flattening function1, some of which were ‘recursive’ and some of which ‘iterative’. Of course, the ones which claim to be iterative are, in fact, recursive: any procedure which traverses a recursively-defined data structure such as a tree of conses is necessarily recursive. The ‘iterative’ versions just use an explicitly-maintained stack rather than…",
          "link": "https://www.tfeb.org/fragments/2023/03/25/the-absurdity-of-stacks/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-03-25T10:57:19.000Z",
          "wordCount": 523,
          "title": "Tim Bradshaw: The absurdity of stacks",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Polymatheia",
      "feedUrl": "https://hypirion.com/rss/all",
      "siteUrl": "https://hypirion.com",
      "articles": [
        {
          "id": "https://hypirion.com/musings/graphql-and-type-systems",
          "author": null,
          "description": "Like Go, GraphQL isn't at the forefront of type theory. Let's look at what I miss and whether it would be sensible to add them to the specification.",
          "link": "https://hypirion.com/musings/graphql-and-type-systems",
          "publishedOn": "2023-05-28T15:45:00.000Z",
          "wordCount": 2152,
          "title": "GraphQL and Type Systems",
          "imageUrl": null
        },
        {
          "id": "https://hypirion.com/musings/on-expectations-and-fun",
          "author": null,
          "description": "A blog usually has its style and shape, and your visitors expects that to continue on. But what do you do if you both want to keep that expectation while also making posts in a completely diferent style?",
          "link": "https://hypirion.com/musings/on-expectations-and-fun",
          "publishedOn": "2022-12-26T14:30:00.000Z",
          "wordCount": 1287,
          "title": "On Expectations and Fun",
          "imageUrl": null
        },
        {
          "id": "https://hypirion.com/musings/duckey",
          "author": null,
          "description": "I've wanted to get my Moonlander keyboard's duck key to print the duck emoji for a long time. Here's how I did it!",
          "link": "https://hypirion.com/musings/duckey",
          "publishedOn": "2022-10-27T20:50:00.000Z",
          "wordCount": 2359,
          "title": "Teaching DucKey to Quack 🦆",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "(think)",
      "feedUrl": "https://batsov.com/atom.xml",
      "siteUrl": "https://batsov.com/",
      "articles": [
        {
          "id": "https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/",
          "author": null,
          "description": "While learning OCaml I’ve noticed one curious feature - it has two types of string literals. The first type are the common and quite familiar “double-quoted string literals” (or perhaps simply “string literals”?):",
          "link": "https://batsov.com/articles/2023/04/20/learning-ocaml-quoted-string-literals/",
          "publishedOn": "2023-04-20T13:23:00.000Z",
          "wordCount": 1042,
          "title": "Learning OCaml: Quoted String Literals",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/",
          "author": null,
          "description": "You might have noticed one change introduced with Bundler 2.3 - it now requires you to run the version of Bundler that’s specified in your Gemfile.lock.1 This means that occasionally you might see something like this: https://bundler.io/blog/2022/01/23/bundler-v2-3.html &#8617;",
          "link": "https://batsov.com/articles/2023/04/09/updating-the-bundler-version-specified-in-gemfile-lock/",
          "publishedOn": "2023-04-09T16:29:00.000Z",
          "wordCount": 474,
          "title": "Updating the Bundler Version Specified in Gemfile.lock",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/04/09/blog-comments-are-back/",
          "author": null,
          "description": "This is going to be one super short post.",
          "link": "https://batsov.com/articles/2023/04/09/blog-comments-are-back/",
          "publishedOn": "2023-04-09T15:57:00.000Z",
          "wordCount": 435,
          "title": "Blog Comments are Back",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/",
          "author": null,
          "description": "Ruby programmers are commonly called Rubyists. Python programmers are often called Pythonistas. Lisp programmers are widely known as Lispers. Clojure programmers are sometimes called Clojurians.",
          "link": "https://batsov.com/articles/2023/03/20/how-are-ocaml-programmers-called/",
          "publishedOn": "2023-03-20T08:02:00.000Z",
          "wordCount": 584,
          "title": "How are OCaml Programmers Called?",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2023/01/08/2022-the-year-in-review/",
          "author": null,
          "description": "Another year is behind us and it’s time for the obligatory “year in review” blog post. I’ve been feeling a bit lazy, that’s why I’m getting to writing it a bit of a delay, but you’ll forgive me.",
          "link": "https://batsov.com/articles/2023/01/08/2022-the-year-in-review/",
          "publishedOn": "2023-01-08T14:21:00.000Z",
          "wordCount": 1256,
          "title": "2022: The Year in Review",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/20/bozhidar-is-on-mastodon/",
          "author": null,
          "description": "Twitter these days is all about drama related to… Twitter (Elon Musk). That really pains me, given that as long as it has existed Twitter has been the only social network that I’ve truly enjoyed using.",
          "link": "https://batsov.com/articles/2022/12/20/bozhidar-is-on-mastodon/",
          "publishedOn": "2022-12-20T18:21:00.000Z",
          "wordCount": 603,
          "title": "Bozhidar is on Mastodon",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/15/topic-specific-rss-feeds/",
          "author": null,
          "description": "Someone complained earlier today that my Pixel 6A article was picked up by Planet Emacslife. While I wasn’t involved in adding my blog there and I never promised to write exclusively about Emacs, this is a good opportunity to remind people my blog has several topic-specific RSS feeds about:",
          "link": "https://batsov.com/articles/2022/12/15/topic-specific-rss-feeds/",
          "publishedOn": "2022-12-15T10:48:00.000Z",
          "wordCount": 402,
          "title": "Topic-specific RSS Feeds",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/15/back-to-android-my-take-on-the-pixel-6a/",
          "author": null,
          "description": "A couple of weeks ago I made a spectacular and quite unexpected return to Android, after a long period of being exclusively in Apple’s mobile devices ecosystem. My last Android phone was the Sony Xperia Arc, which I bought way back in 2011. Afterwards I got an iPhone 5(S?) in 2012/2013 and never looked back.",
          "link": "https://batsov.com/articles/2022/12/15/back-to-android-my-take-on-the-pixel-6a/",
          "publishedOn": "2022-12-15T07:42:00.000Z",
          "wordCount": 1911,
          "title": "Back to Android: My Take on the Pixel 6A",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/11/git-tip-find-the-top-contributors/",
          "author": null,
          "description": "From time to time it’s useful to know who are main authors of some piece of a project. Admittedly most of the time I want to check who are the top contributors to some Git repository I’d use a web interface for this (e.g. GitHub). Probably because I never bothered to remember the magic incantations to do this with the git command-line interface and probably because statistics often look better when you have a have richer UI toolkit to render them. That being said, today I was reminded how easy it is to cover the basics with the command-line. If we want a list of the top 10 contributors (in terms of commits) we can get it like this:1 All examples use CIDER’s repository. &#8617;",
          "link": "https://batsov.com/articles/2022/12/11/git-tip-find-the-top-contributors/",
          "publishedOn": "2022-12-11T17:38:00.000Z",
          "wordCount": 676,
          "title": "Git Tip: Find the Top Contributors",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        },
        {
          "id": "https://batsov.com/articles/2022/12/08/what-s-the-term-for-a-filename-without-its-extension/",
          "author": null,
          "description": "Today someone asked in OCaml’s Discord “How do you call a variable that refers to a filename without its extension?”. I always thought there was no specific term for this and I always named such variables filename-sans-extension (or similar), but it turns out I was wrong. It’s never too late to learning something new! But first a bit of (subjective) terminology:",
          "link": "https://batsov.com/articles/2022/12/08/what-s-the-term-for-a-filename-without-its-extension/",
          "publishedOn": "2022-12-08T14:40:00.000Z",
          "wordCount": 562,
          "title": "What’s the Term for a Filename Without Its Extension?",
          "imageUrl": "https://batsov.com/assets/images/bozhidar_avatar.jpg"
        }
      ]
    },
    {
      "title": "Lambda/Sierra",
      "feedUrl": "https://www.lambdasierra.com/feed.xml",
      "siteUrl": "https://www.lambdasierra.com/",
      "articles": [
        {
          "id": "urn:uuid:417d13a1-0e74-48b4-93da-715fbe03736e",
          "author": null,
          "description": "Social media killed comments. What's a lonely blogger to do?",
          "link": "https://www.lambdasierra.com/2023/building/comments",
          "publishedOn": "2023-05-20T20:00:00.000Z",
          "wordCount": 392,
          "title": "One-Way Comments?",
          "imageUrl": "https://www.lambdasierra/2023/building/img/stephen-phillips-hostreviews-co-uk--zRNvl3EUdw-unsplash.jpg"
        },
        {
          "id": "urn:uuid:ba04a467-ff41-43b3-907d-2810c12af8bb",
          "author": null,
          "description": "My experience as a backend programmer trying to write my own CSS by hand",
          "link": "https://www.lambdasierra.com/2023/building/css",
          "publishedOn": "2023-05-16T22:00:00.000Z",
          "wordCount": 537,
          "title": "(Re-)Learning CSS as a Backend Dev",
          "imageUrl": "https://www.lambdasierra.com/2023/building/img/csstoot.png"
        },
        {
          "id": "urn:uuid:f9aaf15d-37c1-4a8e-bab7-9ccd0b60d12c",
          "author": null,
          "description": "On starting a new blog, abandoning the stability of WordPress for the creative freedom of do-it-yourself.",
          "link": "https://www.lambdasierra.com/2023/building/",
          "publishedOn": "2023-04-13T22:00:42.000Z",
          "wordCount": 722,
          "title": "Building Foundations",
          "imageUrl": null
        },
        {
          "id": "urn:uuid:5960d9ab-f082-4b72-b3a0-7753d56d2008",
          "author": null,
          "description": "AWS API docs from the Cognitect AWS Client library as Emacs Org Mode",
          "link": "https://www.lambdasierra.com/2023/aws-org/",
          "publishedOn": "2023-03-12T22:30:00.000Z",
          "wordCount": 619,
          "title": "AWS API in Org Mode with Clojure",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Squid's Blog",
      "feedUrl": "http://gigasquidsoftware.com/atom.xml",
      "siteUrl": "http://gigasquid.github.io/atom.xml",
      "articles": [
        {
          "id": "http://gigasquid.github.io/blog/2022/12/31/vector-symbolic-architectures-in-clojure/",
          "author": null,
          "description": "generated with Stable Diffusion\nBefore diving into the details of what Vector Symbolic Architectures are and what it means to implement Clojure data structures in them, I’d like to start with some of my motivation in this space.\nSmall AI for More Personal Enjoyment\nOver the last few years, I’ve spent time learning, exploring, and contributing to open source deep learning. It continues to amaze me with its rapid movement and achievements at scale. However, the scale is really too big and too slow for me to enjoy it anymore.\nBetween work and family, I don’t have a lot of free time. When I do get a few precious hours to do some coding just for me, I want it it to be small enough for me to fire up and play with it in a REPL on my local laptop and get a result back in under two minutes.\nI also …",
          "link": "http://gigasquid.github.io/blog/2022/12/31/vector-symbolic-architectures-in-clojure/",
          "publishedOn": "2022-12-31T20:41:00.000Z",
          "wordCount": 2097,
          "title": "Vector Symbolic Architectures in Clojure",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Eval / Apply is pure magic",
      "feedUrl": "https://www.evalapply.org/index.xml",
      "siteUrl": "https://www.evalapply.org/",
      "articles": [
        {
          "id": "https://www.evalapply.org/posts/cold-restart-total-outage/",
          "author": null,
          "description": "\"What are folks’ views on systems so large where cold-starting the whole system is almost impossible?\"... — M'colleague In A Slackroom Next Door.",
          "link": "https://www.evalapply.org/posts/cold-restart-total-outage/index.html",
          "publishedOn": "2023-04-07T00:00:00.000Z",
          "wordCount": 1155,
          "title": "Cold restart whole system after total outage",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/bad-matrix/",
          "author": null,
          "description": "A while ago, someone in the Recurse Center nerdiverse decided we needed a \"Bad Print\". They made one. Things escalated. Bad Matrix happened.",
          "link": "https://www.evalapply.org/posts/bad-matrix/index.html",
          "publishedOn": "2023-02-14T00:00:00.000Z",
          "wordCount": 770,
          "title": "Bad Matrix",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/tools-for-thought/",
          "author": null,
          "description": "Trying out a classification for \"Tools for Thought\" as a means of augmenting the human intellect, hot on the heels of recent community conversations about ChatGPT, CoPilot, Stable Diffusion etc...",
          "link": "https://www.evalapply.org/posts/tools-for-thought/index.html",
          "publishedOn": "2023-01-19T00:00:00.000Z",
          "wordCount": 1124,
          "title": "Riff: Classifying Tools for Thought",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/animate-text-art-javascript/",
          "author": null,
          "description": "It is with no small thanks to MDN, StackOverflow, Firefox's support for countless open tabs, JavaScript's support for first-class functions, and first-class supportive colleagues, I learned it is possible for a web front end novice to program \"text art animations\". Whatever that is even. Because I thoroughly enjoyed doing just that for Hanukkah of Data 2022. Here's how it went down.",
          "link": "https://www.evalapply.org/posts/animate-text-art-javascript/index.html",
          "publishedOn": "2023-01-16T00:00:00.000Z",
          "wordCount": 3578,
          "title": "Animating Text Art in JavaScript",
          "imageUrl": null
        },
        {
          "id": "https://www.evalapply.org/posts/clojure-mars-rover/",
          "author": null,
          "description": "Here I illustrate how Clojurists (including Yours Truly) like to solve problems and model things using hammocks, pure functions, and the \"it's just data\" ideology. Also, while the *problem* focuses on \"design in the small\" of application logic, many ideas in the *solution* can—and do—scale all the way to \"design in the large\" of whole systems.",
          "link": "https://www.evalapply.org/posts/clojure-mars-rover/index.html",
          "publishedOn": "2022-10-19T00:00:00.000Z",
          "wordCount": 3428,
          "title": "A Clojure view of \"Mars Rover\"",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Ian Henry",
      "feedUrl": "https://ianthehenry.com/feed.xml",
      "siteUrl": "https://ianthehenry.com/",
      "articles": [
        {
          "id": "https://ianthehenry.com/posts/generalized-macros/",
          "author": null,
          "description": "I’ve been writing a lot of Janet lately, and I’ve been especially enjoying my time with the macro system.\nJanet macros are Common Lisp-flavored unhygienic gensym-style macros. They are extremely powerful, and very easy to write, but they can be pretty tricky to get right. It’s easy to make mistakes that lead to unwanted variable capture, or to write macros that only work if they’re expanded in particular contexts, and it can be pretty difficult to detect these problems ahead of time.\nSo people have spent a lot of time thinking about ways to write macros more safely – sometimes at the cost of expressiveness or simplicity – and almost all recent languages use some sort of hygienic macro system that defaults to doing the right thing.\nBut as far as I know, no one has approached macro systems f…",
          "link": "https://ianthehenry.com/posts/generalized-macros/",
          "publishedOn": "2023-04-18T00:00:00.000Z",
          "wordCount": 4902,
          "title": "Generalized Macros",
          "imageUrl": "https://ianthehenry.com/checkerboard.png"
        },
        {
          "id": "https://ianthehenry.com/posts/why-janet/",
          "author": null,
          "description": "I never thought it could happen to me. I mean, parentheses? In this day and age? But for the past couple years, my go-to programming language for fun side projects has been a little Lisp dialect called Janet.\n(print \"hey janet\")\n\nI like Janet so much that I wrote an entire book about it, and put it on The Internet for free, in the hopes of attracting more Janetors to the language.\nI think you should read it, but I know that you don’t believe me, so I’m going to try to convince you. Here’s my attempt at a sales pitch: here is why you – you of all people – should give Janet a chance.\nJanet is simple\nJanet is an imperative language with first-class functions, a single namespace for identifiers, and lexical block scoping. The core of the language is very small, consisting of only eight instruc…",
          "link": "https://ianthehenry.com/posts/why-janet/",
          "publishedOn": "2023-04-12T00:00:00.000Z",
          "wordCount": 1631,
          "title": "Why Janet?",
          "imageUrl": "https://ianthehenry.com/checkerboard.png"
        },
        {
          "id": "https://ianthehenry.com/posts/janet-for-mortals/",
          "author": null,
          "description": "I wrote a book.\nIt’s called Janet for Mortals, and it’s free, and it’s on the internet, and you can read it right now.\nAnd you should read it right now, instead of reading this blog post, because this blog post is not very interesting if you haven’t read the book. Heck, this blog post is not very interesting even if you have read the book. This blog post is a thinly-veiled promotion for my book to slip into my newsletter and RSS feed, with just enough additional content to pad it out to the length of a real post.\nThe book is about Janet, a programming language that I have written about before. I’ve been using Janet a lot lately, and I’ve been having a lot of fun with it, and I think that more people should know about it so that they can have fun with it too. People like you.\nI’m not really…",
          "link": "https://ianthehenry.com/posts/janet-for-mortals/",
          "publishedOn": "2023-04-04T00:00:00.000Z",
          "wordCount": 3432,
          "title": "Janet for Mortals",
          "imageUrl": "https://ianthehenry.com/checkerboard.png"
        }
      ]
    },
    {
      "title": "Applied Language musings",
      "feedUrl": "https://applied-langua.ge/posts/feed.rss",
      "siteUrl": "https://applied-langua.ge/posts/",
      "articles": [
        {
          "id": "https://zenodo.org/record/7816398",
          "author": null,
          "description": "The design and implementation of a non-moving parallel generational garbage collector for SBCL.",
          "link": "https://zenodo.org/record/7816398",
          "publishedOn": "2023-05-29T00:29:11.110Z",
          "wordCount": 702,
          "title": "Parallel garbage collection for SBCL",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/the-poverty-of-post-open-source.html",
          "author": null,
          "description": "Post-open source falls short on what improvements it was supposed to make. It prefigures a boring future, mostly because it carries on productivist logic, and makes programming even more of a difficult and esoteric tool. Capitalism isn't the only problem threatening peer production; it is rather threatened by more general principles, which even radicals can believe.",
          "link": "https://applied-langua.ge/posts/the-poverty-of-post-open-source.html",
          "publishedOn": "2023-05-29T00:29:10.040Z",
          "wordCount": 4249,
          "title": "The poverty of \"post-open\" source",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/omrn-compiler.html",
          "author": null,
          "description": "A pile of regular expression derivatives, myths about Ediware, SIMD instruction selection and using the Common Lisp compiler as a backend for a regular expression compiler.",
          "link": "https://applied-langua.ge/posts/omrn-compiler.html",
          "publishedOn": "2023-05-29T00:29:10.025Z",
          "wordCount": 3092,
          "title": "The one-more-re-nightmare compiler",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/lisp-curse-redemption-arc.html",
          "author": null,
          "description": "Pondering marketing strategies, and how we aren't supposed to be productive in Common Lisp.",
          "link": "https://applied-langua.ge/posts/lisp-curse-redemption-arc.html",
          "publishedOn": "2023-05-29T00:29:10.014Z",
          "wordCount": 3276,
          "title": "The Lisp Curse Redemption Arc",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html",
          "author": null,
          "description": "When \"simple\" programming languages aren't.",
          "link": "https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html",
          "publishedOn": "2023-05-29T00:29:10.011Z",
          "wordCount": 7301,
          "title": "I don't want to go to Chel-C",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/zero-feet.html",
          "author": null,
          "description": "A systems language is a collection of things that don't fit into a modular language. There shouldn't be one.",
          "link": "https://applied-langua.ge/posts/zero-feet.html",
          "publishedOn": "2023-05-29T00:29:09.896Z",
          "wordCount": 2014,
          "title": "Zero Feet: a proposal for a systems-free Lisp",
          "imageUrl": null
        },
        {
          "id": "https://applied-langua.ge/posts/the-next-700-virtual-machines.html",
          "author": null,
          "description": "Virtual machine will eat themselves, by being similar enough that most can subsume each other. This can be furthered by making it easier to target abstract machines, and using object capabilities to allow cohabitation of languages and incremental extension to languages.",
          "link": "https://applied-langua.ge/posts/the-next-700-virtual-machines.html",
          "publishedOn": "2023-05-29T00:29:09.849Z",
          "wordCount": 4640,
          "title": "The next 700 virtual machines",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "The Scientific Coder",
      "feedUrl": "https://scientificcoder.com/rss.xml",
      "siteUrl": "https://scientificcoder.com",
      "articles": [
        {
          "id": "https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments",
          "author": "Matthijs Cox",
          "description": "Author commentary: I am starting a \"clean code\" blog series with simple tips that you can integrate into your workflow. I often write long, complicated articles that try to teach a lot at once. This is an attempt to chop things up in bite-sized chunks. Note that the Clean Code books by Robert Martin are great, you should read them if you have time! If not, you can follow these short articles :)\nIf you've written a lot of scripts and shared some of those scripts with colleagues or others, then you probably encountered the problem that the code doesn't always work on their device, or produces different results. When this happens, people may quickly lose trust in your results and begin to ignore your work entirely. So making code reproducible is extremely important! Even if you are a scientis…",
          "link": "https://scientificcoder.com/clean-code-tips-for-scientists-1-reproducible-environments",
          "publishedOn": "2023-05-24T12:03:44.000Z",
          "wordCount": 7951,
          "title": "Clean Code Tips for Scientists #1 - Reproducible Environments",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1684413997401%2F753bc424-1698-4e8a-a951-cc7727a09e68.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development",
          "author": "Matthijs Cox",
          "description": "Three years ago, we decided to embrace the Julia programming language to solve the two language problem at our organization. We want our scientists to join forces with software engineers so that they can work on the same problems together. In our journey, I could have used more books or blogs to guide us on the following topics:\nHow to build and deploy software products with the Julia language?\nHow to create the seeds for an effective scientific software ecosystem?\nThis article is here to help you with the second topic, but I warn you that we had to figure out 1 and 2 at the same time. I intend to write more blog posts about the Julia productization aspects. Yet in the long term, I am betting on the ecosystem to radically improve our organization, so I consider that more important to blog …",
          "link": "https://scientificcoder.com/building-a-scalable-inner-source-ecosystem-for-collaborative-development",
          "publishedOn": "2023-05-17T12:29:08.000Z",
          "wordCount": 17219,
          "title": "Building a Scalable Inner-Source Ecosystem For Collaborative Development",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1684239844476%2F70964039-8d34-410b-8507-79bfd01dcbc0.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration",
          "author": "Matthijs Cox",
          "description": "In this tutorial we demonstrate how to call Julia libraries with multiple threads from C++. With the introduction of Julia 1.9 in May 2023, the runtime can dynamically \"adopt\" external threads, enabling the integration of Julia libraries into multi-threaded codebases written in other languages, such as C++. This article is written in collaboration with Evangelos Paradas, the maestro of algorithm deployment at ASML. Evangelos has been responsible for heavily testing and debugging this multi-threading feature. I humbly repeated the final results after his many trial-and-error attempts and summarized everything for you in this article.\nJulia in production\nJulia is a general-purpose language designed for scientific and numerical computing, striking a balance between speed and simplicity. The a…",
          "link": "https://scientificcoder.com/extreme-multi-threading-c-and-julia-19-integration",
          "publishedOn": "2023-05-11T14:10:09.000Z",
          "wordCount": 12135,
          "title": "Extreme Multi-Threading: C++ and Julia 1.9 Integration",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683635341431%2F5562e663-f9ea-4cec-a0a8-e6c9da7578ef.jpeg%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks",
          "author": "Matthijs Cox",
          "description": "Scientific programming involves writing code to solve scientific problems. This can range from simulating complex physical phenomena to analyzing large datasets. While such software is incredibly important, it can be challenging for scientists to learn all the required software development skills. However, by gradually adding specific tricks into your workflow, you can enhance your coding efficiency and effectiveness.\nSoftware skills are important for everyone these days, including scientists. I see certain common risks if you do not spend effort on your code quality:\nIncorrect code leads to incorrect results, which means you may have to redo work or even risk damaging your reputation.\nUnreproducible code means others, including your future self, cannot verify your work, nor built on top o…",
          "link": "https://scientificcoder.com/mastering-scientific-programming-practical-tips-and-tricks",
          "publishedOn": "2023-05-10T09:46:17.000Z",
          "wordCount": 6928,
          "title": "Mastering Scientific Programming: Practical Tips and Tricks",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683568993032%2Ff57416c5-3a85-4420-9074-0559b752625b.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/how-to-solve-the-two-language-problem",
          "author": "Matthijs Cox",
          "description": "My professional obsession is solving the Two Culture Problem. How can scientists optimally join forces with software engineers and their principles, so that we can work on the same problems together? How to accelerate the cycle from idea to product? The Two Culture Problem requires a solution to the related Two Language Problem, which has a technical nature. A solution to the technical problem does not guarantee a solution to the organizational problem, but when it comes to engineering cultures you first need to prove the technical solution before you can even begin to tackle the social implications. I have a strong opinion on the best technical solution, but let's review all our options.\n\nAs far as I can tell, we have the following alternatives:\nAccept the status quo: use a slow and a fas…",
          "link": "https://scientificcoder.com/how-to-solve-the-two-language-problem",
          "publishedOn": "2023-05-08T07:41:53.000Z",
          "wordCount": 19958,
          "title": "How to solve the two language problem?",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683112298365%2Fe6ad9ad6-a363-45cc-a04f-a6f38510bf2f.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned",
          "author": "Matthijs Cox",
          "description": "How do you become a great scientific coder? To understand this, I want to ask others about their journey and share their lessons with you. This post is a collaboration with Keith Myerscough, a mathematical consultant and senior engineer, who helped me with setting up our internal Julia language ecosystem.\nMatthijs asked me to write a guest post about what skills are needed to become a great scientific coder. He asked me because I assisted a team of scientists in adopting Julia for their research and development work. I am keen to help: I empathize with people who come up with great ideas but have a hard time wrapping these up into something that can be turned into a product. Even under the assumption that code will be extensively improved upon by others with more software knowledge, that f…",
          "link": "https://scientificcoder.com/production-ready-code-for-scientists-3-lessons-learned",
          "publishedOn": "2023-05-04T09:43:36.000Z",
          "wordCount": 8400,
          "title": "Production-ready code for scientists:  3 lessons learned",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1683010031069%2Fa33212ab-1534-4842-92cd-a94b4e89785c.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/automate-your-code-quality-in-julia",
          "author": "Matthijs Cox",
          "description": "Code quality is a topic in Julia that I believe deserves more attention from both users and developers. The Julia language originated in academia and focused heavily on helping scientists write better code, which is going great and deserves much praise! However, to onboard more software engineers and professional organizations we're going to have to invest even further into code quality and automated code quality tools and other methods such as used in the field of \"quality assurance\". In this article I'll explore the current state in the Julia ecosystem.\nAt our workplace we have investigated the following tools and practices. I'll start from generic practices and then move on to more advanced tools.\nPackage structure\nUnit testing with Pkg.jl\nAutomated testing and Continuous Integration (C…",
          "link": "https://scientificcoder.com/automate-your-code-quality-in-julia",
          "publishedOn": "2023-04-26T07:47:00.000Z",
          "wordCount": 14275,
          "title": "Automate Your Code Quality In Julia",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1682430557530%2F69f045a8-635c-4ec6-b836-dbdcf7f0dd23.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/the-art-of-multiple-dispatch",
          "author": "Matthijs Cox",
          "description": "I love thinking visually by drawing doodles and schematics for my work. It's one of my favorite things to do, next to coding. When working with the Julia language, one visualization I enjoy is seeing the type space of a method that you are dispatching on. Normally I do this in my mind's eye, but let me clarify this by drawing some actual figures.\nTo start with the basics; Julia has functions and methods. A function is simply the name, like push! or read . Methods are specific definitions of a function, for certain types of arguments. Take for example push!(s::Set, x) or read(io::IO) . From an object-oriented perspective you could say that methods are instances of functions.\n\nFor any given method you can consider the dispatching as slicing a part of the entire possible type space of that gi…",
          "link": "https://scientificcoder.com/the-art-of-multiple-dispatch",
          "publishedOn": "2023-04-20T09:01:49.000Z",
          "wordCount": 7467,
          "title": "The Art of Multiple Dispatch",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1681976569505%2Fe92f2398-d079-449e-ac6a-4b194fe226ac.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/my-target-audience",
          "author": "Matthijs Cox",
          "description": "What kind of people do I have in mind while writing this blog? People who share my professional mission of course! What is that mission you ask? Let me elaborate.\nFrom Research to Engineering\nI am a scientist who danced with startups and moved into industry. I've spend years doing research, and years doing software product development. During those years I have gotten slightly frustrated with the process of moving ideas from research to production, primarily in my favorite field of scientific computing.\nThe typical problem is that the time from research to production can be long, often spanning multiple years per project, and the process can be error prone. Some common smaller issues I see arising in many of our projects:\nUnreproducible, unexplainable scripts or notebooks in research\nEffor…",
          "link": "https://scientificcoder.com/my-target-audience",
          "publishedOn": "2023-04-18T11:46:15.000Z",
          "wordCount": 7629,
          "title": "My Target Audience",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1681818346405%2Fb3103eb1-9008-42ce-a071-5c9a927b4ce0.png%3Fw%3D1200%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        },
        {
          "id": "https://scientificcoder.com/why-this-blog",
          "author": "Matthijs Cox",
          "description": "My goal in life is to follow my curiosity and help others with the knowledge I uncover. A solid way to help people is to reflect on the last years and think about what would have helped your past self. In my case, I have been busy trying to develop and deploy numerical computing applications with the Julia language. One thing that I found lacking was good material on how to do numerical computing professionally in the industry, something I learned is sometimes called \"scientific software engineering\". A book or blog about large-scale development and deployment into production systems would have helped me tremendously. I had to learn most things the hard way through trial and error.\nSince what I need doesn't exist, we will have to make it exist! That's this blog!\nI have been blogging about …",
          "link": "https://scientificcoder.com/why-this-blog",
          "publishedOn": "2023-04-16T17:27:18.000Z",
          "wordCount": 5867,
          "title": "Why this blog?",
          "imageUrl": "https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1681655524424%2F8208e14f-0765-4eb2-a301-4d9470f26e45.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng"
        }
      ]
    },
    {
      "title": "妖怪世捨て人",
      "feedUrl": "https://tymoon.eu/api/reader/atom",
      "siteUrl": "https://reader.tymoon.eu/",
      "articles": [
        {
          "id": "https://reader.tymoon.eu/article/428",
          "author": null,
          "description": "Kandriaの日本語アップデートはリリースです！\n(私の日本語はまだまだですから、すみません)\n私のゲームは日本語でリリースのは夢ですからうれしい！Mimirin(@mioda833)さんはKandriaの日本語バーシオンを作ってありがとう。素晴らしい仕事をできた。\n今からSteamとItch.ioとKandria.comでアップデーとをダウンロードできる。",
          "link": "https://reader.tymoon.eu/article/428",
          "publishedOn": "2023-04-12T12:55:57.000Z",
          "wordCount": 41,
          "title": "Kandriaの日本語アップデートはリリースです！",
          "imageUrl": null
        },
        {
          "id": "https://reader.tymoon.eu/article/427",
          "author": null,
          "description": "Another month gone by. There's no major updates this month, since we just had the level editor release last month. However, there is a somewhat major update coming out next week!\nYou may have guessed from the title, but we're adding Japanese localisation to the game! It'll release on Wednesday, 12th of April. As someone that's been trying to learn Japanese for a long time, this is another step in the development that I've been looking forward to very much.\n\nI'm also really glad that we can release this already, so it'll be well out by the time I visit Tokyo Game Show in September!\nOther news\nWith the level editor and the beginning of the modding support already in place, I've taken a bit of a step back from Kandria development for a bit, and instead focused on working on a lot of other stuff that's been way overdue, like moving and upgrading our servers, taking care of my mental health, and starting work on pre-pre-production for the next game.\nHowever, Kandria development is not yet done. The second and final major update with an official modding API is still coming. I don't have a release date for that yet, so I hope you remain patient!\nIn the meantime, my paper for the European Lisp Symposium in Amsterdam was accepted, so I will be presenting Kandria there. The paper is quite technical, but if you're interested in Common Lisp, it might be worth a read. And if you're going to be in Amsterdam, let me know. I'd be happy to chat!\nThat's it for now\nA rather short update this month, but if you're interested in the details of the pre-pre-production process, come on hang out in the Shirakumo channel with the rest of us! We're discussing all the improvements to Trial there.",
          "link": "https://reader.tymoon.eu/article/427",
          "publishedOn": "2023-04-03T10:48:00.000Z",
          "wordCount": 347,
          "title": "次は…何？ - April Kandria Update",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZM09BPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/425",
          "author": null,
          "description": "The first major update for Kandria is now live on all platforms! It includes the level editor, a modding system, some new sample levels, and bugfixes!\nLevel Editor\nThe level editor received a big overhaul and is now a lot more accessible. There's also official documentation now to help get you started and explain all the tools and shortcuts available. If you want to dig in, just update your game and navigate to Mod Manager > Create Mod, which should place you directly into the editor in a new world of your own!\nSharing Mods\nYou can play levels made by others and download them directly from within the game. To browse existing levels, simply go to Mod Manager > Discover. From there you can select and install mods. Once installed, you can play their world under the Worlds tab.\nWe've provided …",
          "link": "https://reader.tymoon.eu/article/425",
          "publishedOn": "2023-03-08T13:47:42.000Z",
          "wordCount": 539,
          "title": "Level Editor Update is Live!",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2379"
        },
        {
          "id": "https://reader.tymoon.eu/article/424",
          "author": null,
          "description": "Let's get the important news out of the way: the next major update for Kandria will launch on Wednesday, March 8th, at 15:00 CET. The update will include a number of improvements, new features, more content, and a community event!\nLevel Editing\nThe biggest part of the update is, no doubt, the polished level editor. The editor has always been a part of Kandria since release, but now it's nicely polished and much easier to use!\n\nI've also included documentation to make it much easier for you to get a handle on how the editor works and how to get started with using it. I'm very excited to see what people can come up with!\nAnd yes, the entire Kandria world was created in this editor, so it is fully capable of creating some very complex levels!\nPartial Modding Support\nBut, the editor itself is …",
          "link": "https://reader.tymoon.eu/article/424",
          "publishedOn": "2023-03-01T13:56:17.000Z",
          "wordCount": 565,
          "title": "Next Kandria Update on March 8th!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZMk1nPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/423",
          "author": null,
          "description": "It's already been a month since Kandria released! Woah, time sure flies these days, huh?\nKandria Launch\nWell, in case you missed the launch, the game is now officially available on Steam, Itch, and directly on our Website.\nThe reviews we've gotten have been very positive, both from press, on Steam, and on the streams I've caught! I'm really happy that people have been enjoying the game, and am very thankful for all of the support and well wishes.\nThe first two weeks after launch were spent furiously fixing things, with a patch being released almost every day. Things have calmed down a lot since, and while there's a few polish things left over that we know about, overall the game is now very stable, and even got the official Steam Deck Verified rating!\nBut, the work isn't done yet.\nUpcoming…",
          "link": "https://reader.tymoon.eu/article/423",
          "publishedOn": "2023-02-07T12:35:49.000Z",
          "wordCount": 515,
          "title": "Building the Future - February Kandria Update",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2293"
        },
        {
          "id": "https://reader.tymoon.eu/article/422",
          "author": null,
          "description": "Kandria is now finally available for purchase and play!\nI recommend buying it on Steam, as the algorithm there will help us bring the game in front of more people, as well. However, if that isn't a possibility for you, there's also options on Itch.io and through Xsolla on our webpage:\n\nSteam\n\nItch.io\n\nXsolla\n\nI am also live on Steam, Twitch, and YouTube right now, to celebrate the launch! Come on and hang out in the chat: https://stream.shinmera.com\nI hope you all enjoy the game, and thank you very much for sticking with us for all this time!",
          "link": "https://reader.tymoon.eu/article/422",
          "publishedOn": "2023-01-11T14:02:43.000Z",
          "wordCount": 149,
          "title": "Kandria is now out!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZME1RPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/421",
          "author": null,
          "description": "​Kandria launches tomorrow, on Wednesday the 11th, at 15:00 CET / 9:00 EST!\nThere'll be a launch stream for the occasion as well. It'll be live on Twitch! I'll be happy to answer any questions you may have about the game, and hope to see you there!​\nLast opportunity to wishlist the game, too: https://kandria.com/steam",
          "link": "https://reader.tymoon.eu/article/421",
          "publishedOn": "2023-01-10T13:08:18.000Z",
          "wordCount": 112,
          "title": "Kandria launches tomorrow!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZek9BPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/420",
          "author": null,
          "description": "In case you missed the yearly update last week: Kandria will release in one week from today, on January 11th, 15:00 CET / 09:00 EST. I hope you're as excited to play it as we are to finally get it into your hands!\nPlease remember to wishlist it on Steam to make sure you don't miss it!",
          "link": "https://reader.tymoon.eu/article/420",
          "publishedOn": "2023-01-04T13:30:21.000Z",
          "wordCount": 117,
          "title": "Kandria releases in one week on January 11!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZek5RPT0="
        },
        {
          "id": "https://reader.tymoon.eu/article/419",
          "author": null,
          "description": "It's that time of the year again! The end of it. And what a year it's been for Kandria. We're now less than two weeks away from the release. Yikes! Or should I say, woah! Well, let's take a moment and look at some of all of the things that happened, before we look at what the future may possibly hold in store for us. At least, if I have anything to say about it.\nHonestly, so many things happened that I barely remember most of them. I had to go back through the monthly reviews to remember all of it. But then again, I've always been rather terrible at remembering things that far back in any chronologically complete manner. I won't be going over stuff in chronological order, either, but instead will touch on a bunch of individual topics. Let's start out with\nConferences\nIn 2022 we were presen…",
          "link": "https://reader.tymoon.eu/article/419",
          "publishedOn": "2022-12-30T21:14:23.000Z",
          "wordCount": 1858,
          "title": "2022 for Kandria in Review",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2327"
        },
        {
          "id": "https://reader.tymoon.eu/article/418",
          "author": null,
          "description": "This is a shorter update, as this month was primarily spent on translation and bugfixing, neither of which we can really tell you much about. If you missed last month's though, please be aware that the game will release on January 11th!\nVarious Things\nThe translation is going slow, as I'm doing it myself and am not used to a good workflow for that. I expect I'll get the hang of it yet though and I've already made pretty significant progress on it.\nOther than that, the achievement icons are done, thanks to Blob! I'm really happy with how they turned out, and it's nice to have some of his high-res art associated with the game.\nFinally, I took two days to develop a new webservice for key distribution, which will allow you to buy the game DRM-free directly on our website once it releases. This…",
          "link": "https://reader.tymoon.eu/article/418",
          "publishedOn": "2022-12-05T13:58:03.000Z",
          "wordCount": 457,
          "title": "Rounding Up - December Kandria Update",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZeU1RPT0="
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}
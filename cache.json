{
  "sources": [
    {
      "title": "Stochastic Lifestyle",
      "feedUrl": "http://www.stochasticlifestyle.com/feed/",
      "siteUrl": "http://www.stochasticlifestyle.com/",
      "articles": [
        {
          "id": "https://www.stochasticlifestyle.com/?p=1705",
          "author": "Christopher Rackauckas",
          "description": "Part of the COMPUTATIONAL ABSTRACTIONS FOR PROBABILISTIC AND DIFFERENTIABLE PROGRAMMING WORKSHOP\nAbstract: Many probabilistic programming languages (PPLs) attempt to integrate with equation solvers (differential equations, nonlinear equations, partial differential equations, etc.) from the inside, i.e. the developers of the PPLs like Stan provide differential equation solver choices as part of the suite. However, as equation solvers are an entire discipline to themselves with many active development communities and subfields, this places an immense burden on PPL developers to keep up with the changing landscape of tens of thousands of independent researchers. In this talk we will explore how Julia PPLs such as Turing.jl support of equation solvers from the outside, i.e. how the tools of differentiable programming allows equation solver libraries to be compatible with PPLs  ... READ MORE\nThe post Integrating equation solvers with probabilistic programming through differentiable programming appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/integrating-equation-solvers-with-probabilistic-programming-through-differentiable-programming/",
          "publishedOn": "2022-11-24T01:04:59.000Z",
          "wordCount": 1244,
          "title": "Integrating equation solvers with probabilistic programming through differentiable programming",
          "imageUrl": "//www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG"
        },
        {
          "id": "http://www.stochasticlifestyle.com/?p=1681",
          "author": "Christopher Rackauckas",
          "description": "Automatic differentiation of a “solver” is a subject with many details for doing it in the most  effective form. For this reason, there are a lot of talks and courses that go into lots of depth on the topic. I recently gave a talk on some of the latest stuff in differentiable simulation with the American Statistical Association, and have some detailed notes on such adjoint derivations as part of the 18.337 Parallel Computing and Scientific Machine Learning graduate course at MIT. And there are entire organizations like my SciML Open Source Software Organization which work day-in and day-out on the development of new differentiable solvers.\nI’ll give a brief summary of all my materials here below.\nContinuous vs Discrete Differentiation of Solvers\nAD of a solver can be done in essentially two different ways: either directly performing automatic  ... READ MORE\nThe post Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better? appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/direct-automatic-differentiation-of-solvers-vs-analytical-adjoints-which-is-better/",
          "publishedOn": "2022-10-11T07:09:53.000Z",
          "wordCount": 3134,
          "title": "Direct Automatic Differentiation of (Differential Equation) Solvers vs Analytical Adjoints: Which is Better?",
          "imageUrl": "http://www.stochasticlifestyle.com/wp-content/uploads/2022/10/Capture7.png"
        },
        {
          "id": "https://www.stochasticlifestyle.com/?p=1670",
          "author": "Christopher Rackauckas",
          "description": "Is differentiable programming actually necessary, or can you just train the neural network in isolation against data and then stick the trained neural network into the simulation? We looked at this problem in detail in our new manuscript titled Capturing missing physics in climate model parameterizations using neural differential equations.\nThe goal of this project is to understand temperature mixing in large eddy simulations, essentially columns of water in the ocean. I.e., can we take a “true” 3D Navier-Stokes and use that to build very quick and accurate models for how heat flows up and down in the water?\n\nThis isn’t a new problem: climate scientists  ... READ MORE\nThe post Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately? appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/is-differentiable-programming-actually-necessary-cant-you-just-train-separately/",
          "publishedOn": "2022-10-04T07:38:56.000Z",
          "wordCount": 1510,
          "title": "Is Differentiable Programming Actually Necessary? Can’t you just train the neural networks separately?",
          "imageUrl": "http://www.stochasticlifestyle.com/wp-content/uploads/2022/10/Screenshot-2022-10-03-192913.png"
        },
        {
          "id": "https://www.stochasticlifestyle.com/?p=1659",
          "author": "Christopher Rackauckas",
          "description": "Abstract: Scientific machine learning (SciML) methods allow for the automatic discovery of mechanistic models by infusing neural network training into the simulation process. In this talk we will start by showcasing some of the ways that SciML is being used, from discovery of extrapolatory epidemic models to nonlinear mixed effects models in pharmacology. From there, we will discuss some of the increasingly advanced computational techniques behind the training process, focusing on the numerical issues involved in handling differentiation of highly stiff and chaotic systems. The viewers will leave with an understanding of how compiler techniques are being infused into the simulation stack to increasingly automate the process of developing mechanistic models\nBio: Dr. Chris Rackauckas is the Director of Scientific Research at Pumas-AI, the Director of  ... READ MORE\nThe post Accurate and Efficient Physics-Informed Learning Through Differentiable Simulation (ASA Seminar Talk) appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/accurate-and-efficient-physics-informed-learning-through-differentiable-simulation-asa-seminar-talk/",
          "publishedOn": "2022-07-14T09:58:09.000Z",
          "wordCount": 1317,
          "title": "Accurate and Efficient Physics-Informed Learning Through Differentiable Simulation (ASA Seminar Talk)",
          "imageUrl": "//www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG"
        },
        {
          "id": "https://www.stochasticlifestyle.com/?p=1655",
          "author": "Christopher Rackauckas",
          "description": "Keynote Address: New Horizons in Modeling and Simulation in Julia\nPresenters: Viral Shah (Julia Computing, CEO and Co-Founder), Chris Rackauckas (Julia Computing, Director of Modeling and Simulation and Christopher Laughman (Mitsubishi Electric Research Laboratories, Principal Member Research Staff)\nAbstract: As modeling has become more ubiquitous, our models keep growing. The time to build models, verify their behavior, and simulate them is increasing exponentially as we seek more precise predictions. How will our tools change to accommodate the future? Julia’s language design has led to new opportunities. The combination of multiple dispatch, staged compilation, and Julia’s composable libraries have made it possible to build a next generation symbolic-numeric framework. Julia’s abstract interpretation framework enables capabilities such as automatic differentiation, automatic surrogate generation, symbolic tracing, uncertainty propagation, and automatic  ... READ MORE\nThe post Keynote: New Horizons in Modeling and Simulation with Julia (Modelica Conference 2021) appeared first on Stochastic Lifestyle.",
          "link": "http://www.stochasticlifestyle.com/keynote-new-horizons-in-modeling-and-simulation-with-julia-modelica-conference-2021/",
          "publishedOn": "2022-06-25T18:11:28.000Z",
          "wordCount": 1221,
          "title": "Keynote: New Horizons in Modeling and Simulation with Julia (Modelica Conference 2021)",
          "imageUrl": "//www.stochasticlifestyle.com/wp-content/themes/chrisrack/style/faviPic2.PNG"
        }
      ]
    },
    {
      "title": "Andrej Karpathy blog",
      "feedUrl": "http://karpathy.github.io/feed.xml",
      "siteUrl": "http://karpathy.github.io/",
      "articles": []
    },
    {
      "title": "Mosè Giordano",
      "feedUrl": "https://giordano.github.io/blog/feed.xml",
      "siteUrl": "http://giordano.github.io",
      "articles": []
    },
    {
      "title": "Shuhei Kadowaki&#39;s homepage",
      "feedUrl": "https://aviatesk.github.io/feed.xml",
      "siteUrl": "https://aviatesk.github.io/",
      "articles": [
        {
          "id": "https://aviatesk.github.io/posts/effects-analysis/index.html",
          "author": null,
          "description": "Quick intro to the new effect analysis of Julia compiler",
          "link": "https://aviatesk.github.io/posts/effects-analysis/index.html",
          "publishedOn": "2022-07-24T00:00:00.000Z",
          "wordCount": 2444,
          "title": "Quick intro to the new effect analysis of Julia compiler",
          "imageUrl": "assets/what_about_the_dead_fish.jpeg"
        }
      ]
    },
    {
      "title": "Mike Innes’s Blog",
      "feedUrl": "https://mikeinnes.io/feed.xml",
      "siteUrl": "/",
      "articles": [
        {
          "id": "https://mikeinnes.io/2023/02/18/bing.html",
          "author": null,
          "description": "Conversations with ChatGPT, a recently released chatbot, reportedly cost its inventors at OpenAI a few cents each. By Internet standards this is shockingly expensive. Though it’s touted as the future of the search engine, any company scaling the technology up to the world’s 10 billion or so daily queries will face suffocating costs. The milestone for Artificial Intelligence may be that it’s now about as expensive as the real thing: Amazon’s mechanical turk service (which Jeff Bezos called “artificial artificial intelligence”) also pays its human labourers a few cents per question-response task.",
          "link": "https://mikeinnes.io/2023/02/18/bing.html",
          "publishedOn": "2023-02-18T00:00:00.000Z",
          "wordCount": 1301,
          "title": "Deus Ex Bing",
          "imageUrl": null
        },
        {
          "id": "https://mikeinnes.io/2022/06/29/clocktower.html",
          "author": null,
          "description": "Three years and two months after it launched on Kickstarter, copies of social deduction game Blood on the Clocktower are finally arriving in the UK. During the long wait eager players have been able to backstab each other using print-and-play copies and the online helper (particularly welcome during lockdowns). But it’s nice to have the real thing in our hands. I’m here to commemorate the occassion with statistics, and in particular to show the ranking system I’m using to see how well my players are doing – just for fun, of course.",
          "link": "https://mikeinnes.io/2022/06/29/clocktower.html",
          "publishedOn": "2022-06-29T00:00:00.000Z",
          "wordCount": 1437,
          "title": "Clocktower IQ",
          "imageUrl": null
        },
        {
          "id": "https://mikeinnes.io/2022/06/24/swap.html",
          "author": null,
          "description": "I just put up a draft paper with a proposal for mixing imperative and functional styles of programming. The gist of it is that we can write code like this:",
          "link": "https://mikeinnes.io/2022/06/24/swap.html",
          "publishedOn": "2022-06-24T00:00:00.000Z",
          "wordCount": 330,
          "title": "Imperative Syntax, Functional Semantics",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Tom Kwong's Infinite Loop",
      "feedUrl": "https://ahsmart.com/feed.xml",
      "siteUrl": "https://ahsmart.com/",
      "articles": []
    },
    {
      "title": "JuliaLang - The Julia programming language",
      "feedUrl": "https://julialang.org/feed.xml",
      "siteUrl": "https://julialang.org/",
      "articles": [
        {
          "id": "https://julialang.org/blog/2022/08/julia-1.8-highlights/",
          "author": null,
          "description": "Highlights of the Julia 1.8 release.\nRead more",
          "link": "https://julialang.org/blog/2022/08/julia-1.8-highlights/",
          "publishedOn": "2022-08-18T00:00:00.000Z",
          "wordCount": 2763,
          "title": "Julia 1.8 Highlights",
          "imageUrl": "/assets/images/julia-open-graph.png"
        },
        {
          "id": "https://julialang.org/blog/2022/08/juliacon-highlights-2022/",
          "author": null,
          "description": "JuliaCon 2022 Highlights\nRead more",
          "link": "https://julialang.org/blog/2022/08/juliacon-highlights-2022/",
          "publishedOn": "2022-08-10T00:00:00.000Z",
          "wordCount": 1104,
          "title": "JuliaCon 2022 Highlights",
          "imageUrl": "https://user-images.githubusercontent.com/35577566/183544010-09691b83-9fc6-4b49-b835-d9a8e691e112.png"
        }
      ]
    },
    {
      "title": "Ted Kaminski",
      "feedUrl": "https://www.tedinski.com/feed.xml",
      "siteUrl": "http://www.tedinski.com/",
      "articles": []
    },
    {
      "title": "Invenia Blog",
      "feedUrl": "https://invenia.github.io/blog/feed.xml",
      "siteUrl": "https://invenia.github.io/blog/",
      "articles": []
    },
    {
      "title": "Two-Bit History",
      "feedUrl": "https://twobithistory.org/feed.xml",
      "siteUrl": "https://twobithistory.org/",
      "articles": []
    },
    {
      "title": "programming (and other) musings",
      "feedUrl": "https://jao.io/blog/rss.xml",
      "siteUrl": "https://jao.io/blog/",
      "articles": [
        {
          "id": "https://jao.io/blog/in-no-particular-order.html",
          "author": null,
          "description": "Interesting bits elsewhere:\n\n\n\nThe influence of Self\n10 quick Mastodon tips\nWriting with LaTeX\nTrying out Mathstodon\nOlder entries\n\n\n\nTags: sundry",
          "link": "https://jao.io/blog/in-no-particular-order.html",
          "publishedOn": "2022-11-21T05:05:00.000Z",
          "wordCount": 61,
          "title": "in no particular order",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/the-cambridge-centenary-ulysess.html",
          "author": null,
          "description": "Physically, this book is obnoxious: huge, wasted margins frame a reproduction\nof the original text that painstakingly tries to look as shabby as it was,\nincluding faded letters and all its typos, and its size and weight border on\nthe unmanageable.  Ah, but the contents is really good: on the one hand\nthere's of course Joyce's text itself (after twenty years since the last time,\nmy English, with the help of the annotations, was closer to be up to the task,\nand enjoy it even when it wasn't), and next to it the essays introducing every\nchapter, which i found (with an exception or two) very informative and,\nsometimes, even illuminating.  I was also delighted to confirm that the\nparallels with Homer's work are a strecht to say the least: i quickly read The\nOdyssey in preparation and found it, again, boring at best and disheartening\nin its depiction of the society of the time (not that Joyce's Dublin was\nwithout its blemishes, but you hopefully get my point).\n\n\n\nSo, just get an electronic version and enjoy!\n\nTags: books",
          "link": "https://jao.io/blog/the-cambridge-centenary-ulysess.html",
          "publishedOn": "2022-10-30T01:50:00.000Z",
          "wordCount": 219,
          "title": "the cambridge centenary ulysess",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/visual-differential-geometry-and-forms.html",
          "author": null,
          "description": "This is a beautiful book.  Crystal-clear and insightful explanations, with the\nright amount of historical background and quite original outlook (without\ngoing overboard).  I can only echo what other quoted reviewers have said: i\nwish i had had this book when i was studying these matters in earnest, i'm\npretty sure i've understood some fine points for the first time only now!  I'd\nalso perhaps make an exception on the last part (or act, as Needham calls\nthem) on differential forms, which feels at times a bit rushed and in need of\nsome editing, and it'd had been wonderful if the manufacture of the book were\nup to its contents: most images and photographs look really, really cheap, and\nthere are more typos than granted, which is a pity (as to other figures,\nthey're decent, although it must be said that Needham is not Penrose, but then\nwho is?).\n\nTags: books",
          "link": "https://jao.io/blog/visual-differential-geometry-and-forms.html",
          "publishedOn": "2022-10-30T00:30:00.000Z",
          "wordCount": 193,
          "title": "visual differential geometry and forms",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html",
          "author": null,
          "description": "I've just released a new version of consult-recoll, which implements a couple\nof features that i am really liking, namely, grouping of search results by\nmime type:\n\n\n\n\n\n\n\n\n\nand inline snippets:\n\n\n\n\n\n\n\n\n\nHappy searches!\n\n\n\nTags: emacs programming",
          "link": "https://jao.io/blog/inline-snippets-and-grouping-in-consult-recoll.html",
          "publishedOn": "2022-08-04T17:29:00.000Z",
          "wordCount": 79,
          "title": "inline snippets and grouping in consult-recoll",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/parisian-lives.html",
          "author": null,
          "description": "A very interesting view of how a biographer started her career in the\nseventies, with two heavy-weights, Beckett and de Beauvoir.  Bair calls the\nbook a bio-memoir, and it's indeed quite deserving of a name of its own for\nits genre.  One learns of the struggle it was not only to be a biographer of\nfamous writers still living (and her fascinating relationship with them) but\nalso to be a successful woman in the seventies.  And there are lots of\ninteresting details about her writing process, and its all too human side.\nVery well written all around, it really whets your appetite: i've already\nordered her Beckett bio!\n\nTags: books",
          "link": "https://jao.io/blog/parisian-lives.html",
          "publishedOn": "2022-07-31T03:42:00.000Z",
          "wordCount": 146,
          "title": "parisian lives",
          "imageUrl": null
        },
        {
          "id": "https://jao.io/blog/consult-recoll-with-live-preview.html",
          "author": null,
          "description": "Lately, i've gravitated towards recoll as a unified search engine for all my\nlocal data, including org and text notes, documents in PDF or similar formats,\nHTML files, and local email. As a result, my little consult-recoll package has\ngone up a few notches up in my list.  i've just released version 0.5,\nfeaturing live previews.\n\n\n\n\n\n\n\n\n\n\n\n\nRecoll is a local search engine that knows how to index a wide variety of file\nformats.  It also offers a sophisticated query language, and, for some\ndocument kinds, snippets of the text of the document that actually match your\nquery: that's always been one of my favourite features, and wanted to bring it\nto emacs.\n\n\n\ni found consult's live previews a very nice venue to bring snippets into\nemacs, via a new version of consult-recoll, and there you go, jus…",
          "link": "https://jao.io/blog/consult-recoll-with-live-preview.html",
          "publishedOn": "2022-07-22T18:08:00.000Z",
          "wordCount": 378,
          "title": "consult recoll with live preview",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "wingolog",
      "feedUrl": "https://wingolog.org/feed/atom",
      "siteUrl": "https://wingolog.org/",
      "articles": [
        {
          "id": "https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us",
          "author": null,
          "description": "Good day, comrades!\nToday I'd like to share the good news that WebAssembly is finally coming\nfor the rest of us weirdos.\nThis is a transcript-alike of a talk that I gave last week at , a gathering in Berlin of\npeople that are using \"technologies beyond the mainstream\" to get things\ndone: Haskell, Clojure, Elixir, and so on.  PDF slides , and I'll link the video too when it becomes available.BOB\n2023here\nWebAssembly: what even is it?  Not a programming language that\nyou would write software in, but rather a compilation target: a sort of\nassembly language, if you will.\nIf you look at what the characteristics of WebAssembly are as an\nabstract machine, to me there are two main areas in which it is an\nadvance over the alternatives.\nFirstly it's \"close to the metal\" -- if you compile for example…",
          "link": "https://wingolog.org/archives/2023/03/20/a-world-to-win-webassembly-for-the-rest-of-us",
          "publishedOn": "2023-03-20T09:06:42.000Z",
          "wordCount": 5427,
          "title": "a world to win: webassembly for the rest of us",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/03/10/pre-initialization-of-garbage-collected-webassembly-heaps",
          "author": null,
          "description": "Hey comrades, I just had an idea that I won't be able to work on in the\nnext couple months and wanted to release it into the wild.  They say if\nyou love your ideas, you should let them go and see if they come back to\nyou, right?  In that spirit I abandon this idea to the woods.\nBasically the idea is , but for modules\nthat store their data on the GC-managed heap instead of just in linear\nmemory.Wizer-like pre-initialization of WebAssembly\nmodules\nSay you have a WebAssembly module with .\nIt might look like this:GC\ntypes\nYou define some struct and array types, there are some global variables,\nand some functions to actually do the work.  (There are probably also\ntables and other things but I am simplifying.)\nIf you consider the object graph of an instantiated module, you will\nhave some set of …",
          "link": "https://wingolog.org/archives/2023/03/10/pre-initialization-of-garbage-collected-webassembly-heaps",
          "publishedOn": "2023-03-10T09:20:33.000Z",
          "wordCount": 1422,
          "title": "pre-initialization of garbage-collected webassembly heaps",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum",
          "author": null,
          "description": "Friends, you might have noted, but over the last year or so I really\ncaught the GC bug.  Today's post sums up that year, in the form of a\ntalk I gave yesterday at FOSDEM.  It's long!  If you prefer video, you\ncan have a look instead to the .at the FOSDEM event\npage\nSo the context for the whole effort is that Guile has this part of its\nimplementation which is in C.  It also exposes a lot of that\nimplementation to users as an API.\nSo what contraints does this kind of API impose on the garbage\ncollector?\nLet's start by considering the simple  call above.  In a\ngarbage-collected environment, the GC is responsible for reclaiming\nunused memory.  How does the GC know that the result of a \ncall is in use?consscm_cons\nGenerally speaking there are two main strategies for automatic memory\nmanagement.…",
          "link": "https://wingolog.org/archives/2023/02/07/whippet-towards-a-new-local-maximum",
          "publishedOn": "2023-02-07T13:14:37.000Z",
          "wordCount": 6720,
          "title": "whippet: towards a new local maximum",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/01/27/three-approaches-to-heap-sizing",
          "author": null,
          "description": "How much memory should a program get?  Tonight, a quick note on sizing\nfor garbage-collected heaps.  There are a few possible answers,\ndepending on what your goals are for the system.\nSometimes you build a system and you want to study it: to identify its\nprincipal components and see how they work together, or to isolate the\neffect of altering a single component.  In that case, what you want is a\nfixed heap size.  You run your program a few times and determine a heap\nsize that is sufficient for your problem, and then in future run the\nprogram with that new fixed heap size.  This allows you to concentrate\non the other components of the system.\nA good approach to choosing the fixed heap size for a program is to\ndetermine the minimum heap size a program can have by bisection, then\nmultiplying …",
          "link": "https://wingolog.org/archives/2023/01/27/three-approaches-to-heap-sizing",
          "publishedOn": "2023-01-27T21:45:03.000Z",
          "wordCount": 1157,
          "title": "three approaches to heap sizing",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2023/01/24/parallel-ephemeron-tracing",
          "author": null,
          "description": "Hello all, and happy new year.  Today's note continues the .series on\nimplementing ephemerons in a garbage\ncollector\nIn our  we\nlooked at a serial algorithm to trace ephemerons.  However, production\ngarbage collectors are parallel: during collection, they trace\nthe object graph using multiple worker threads.  Our problem is to\nextend the ephemeron-tracing algorithm with support for multiple tracing\nthreads, without introducing stalls or serial bottlenecks.last\ndispatch\nRecall that we ended up having to define a table of pending ephemerons:\nThis table holds  ephemerons that have been visited by the\ngraph tracer but whose keys haven't been found yet, as well as a\nsingly-linked list of  ephemerons that are waiting to have\ntheir values traced.  As a global data structure, the pending ephemeron…",
          "link": "https://wingolog.org/archives/2023/01/24/parallel-ephemeron-tracing",
          "publishedOn": "2023-01-24T10:48:49.000Z",
          "wordCount": 1746,
          "title": "parallel ephemeron tracing",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2022/12/15/ephemeral-success",
          "author": null,
          "description": "Good evening, patient hackers :)  Today finishes off my .series on\nimplementing ephemerons in a garbage\ncollector\nLast time, we had a working solution for ephemerons, but it involved\nrecursively visiting any pending ephemerons from within the \nroutine—the bit of a semi-space collector that is called when\ntraversing the object graph and we see an object that we hadn't seen\nyet.  This recursive visit could itself recurse, and so we could\noverflow the control stack.copy\nThe solution, of course, is \"don't do that\": instead of visiting\nrecursively, enqueue the ephemeron for visiting later.  Iterate, don't\nrecurse.  But here we run into a funny problem: how do we add an\nephemeron to a queue or worklist?  It's such a pedestrian question\n(\"just... enqueue it?\") but I think it illustrates some of t…",
          "link": "https://wingolog.org/archives/2022/12/15/ephemeral-success",
          "publishedOn": "2022-12-15T21:21:05.000Z",
          "wordCount": 1872,
          "title": "ephemeral success",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2022/12/12/im-throwing-ephemeron-party-youre-invited",
          "author": null,
          "description": "Good day, hackfolk.  Today's note tries to extend our semi-space\ncollector with support for ephemerons.  Spoiler alert: we fail in a\nsubtle and interesting way.  See if you can spot it before the end :)\nRecall that, as we concluded in ,\na memory manager needs to incorporate ephemerons as a core part of the\ntracing algorithm.  Ephemerons are not macro-expressible in terms of\nobject trace functions.an earlier\narticle\nInstead, to support ephemerons we need to augment our core trace\nroutine.  When we see an ephemeron , we need to check if the key \nis already visited (and therefore live); if so, we trace the value \ndirectly, and we're done.  Otherwise, we add  to a global table of\npending ephemerons , indexed under .  Finally whenever we trace a\nnew object , ephemerons included, we look up  in …",
          "link": "https://wingolog.org/archives/2022/12/12/im-throwing-ephemeron-party-youre-invited",
          "publishedOn": "2022-12-12T14:02:41.000Z",
          "wordCount": 698,
          "title": "i'm throwing ephemeron party & you're invited",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2022/12/11/we-iterate-so-that-you-can-recurse",
          "author": null,
          "description": "Sometimes when you see an elegant algorithm, you think \"looks great, I\njust need it to also do X\".  Perhaps you are able to build X directly\nout of what the algorithm gives you; fantastic.  Or, perhaps you can\nalter the algorithm a bit, and it works just as well while also doing X.\nSometimes, though, you alter the algorithm and things go pear-shaped.\nTonight's little note builds on \nand discusses an worse alternative to the Cheney scanning algorithm.yesterday's semi-space collector\narticle\nTo recall, we had this  function that takes a edge in the\nobject graph, as the address of a field in memory containing a .  If the edge points to an object that was already copied,\n updates it to the forwarded address.  Otherwise it copies the object,\nthus computing the new address, and then updates the …",
          "link": "https://wingolog.org/archives/2022/12/11/we-iterate-so-that-you-can-recurse",
          "publishedOn": "2022-12-11T21:19:20.000Z",
          "wordCount": 1055,
          "title": "we iterate so that you can recurse",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2022/12/10/a-simple-semi-space-collector",
          "author": null,
          "description": "Good day, hackfolk.  Today's article is about semi-space collectors.\nMany of you know what these are, but perhaps not so many have\nseen an annotated implementation, so let's do that.\nJust to recap, the big picture here is that a semi-space collector\ndivides a chunk of memory into two equal halves or spaces, called the\n and the .  Allocation proceeds linearly across\ntospace, from one end to the other.  When the tospace is full, we \nthe spaces: the tospace becomes the fromspace, and the fromspace becomes\nthe tospace.  The collector copies out all live data  the\nfromspace  the tospace (hence the names), starting from some set of\nroot objects.  Once the copy is done, allocation then proceeds in the\nnew tospace.fromspacetospaceflipfromto\nIn practice when you build a GC, it's parameterized in a …",
          "link": "https://wingolog.org/archives/2022/12/10/a-simple-semi-space-collector",
          "publishedOn": "2022-12-10T20:50:28.000Z",
          "wordCount": 1211,
          "title": "a simple semi-space collector",
          "imageUrl": null
        },
        {
          "id": "https://wingolog.org/archives/2022/11/28/are-ephemerons-primitive",
          "author": null,
          "description": "Good evening :)  A quick note, tonight: I've long thought that\n\nare primitive and can't be implemented with mark functions and/or\nfinalizers, but today I think I have a counterexample.ephemerons\nFor context, one of the goals of the  is to replace\n's current use of the .  Of course, changing a\ngarbage collector for a production language runtime is risky, and for Guile one of the mitigation\nstrategies for this work is that the new collector is behind an abstract API\nwhose implementation can be chosen at compile-time, without requiring\nchanges to user code.  That way we can first switch to\nBDW-implementing-the-new-GC-API, then switch the implementation behind\nthat API to something else.GC implementation I have been\nworking on onGuileBoehm-Demers-Weiser (BDW) conservative\ncollector\nAbstracting…",
          "link": "https://wingolog.org/archives/2022/11/28/are-ephemerons-primitive",
          "publishedOn": "2022-11-28T21:11:30.000Z",
          "wordCount": 1315,
          "title": "are ephemerons primitive?",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Planet Lisp",
      "feedUrl": "http://planet.lisp.org/rss20.xml",
      "siteUrl": "http://planet.lisp.org/",
      "articles": [
        {
          "id": "https://reader.tymoon.eu/article/427",
          "author": null,
          "description": "Another month gone by. There's no major updates this month, since we just had the level editor release last month. However, there is a somewhat major update coming out next week!\nYou may have guessed from the title, but we're adding Japanese localisation to the game! It'll release on Wednesday, 12th of April. As someone that's been trying to learn Japanese for a long time, this is another step in the development that I've been looking forward to very much.\n\nI'm also really glad that we can release this already, so it'll be well out by the time I visit Tokyo Game Show in September!\nOther news\nWith the level editor and the beginning of the modding support already in place, I've taken a bit of a step back from Kandria development for a bit, and instead focused on working on a lot of other stuff that's been way overdue, like moving and upgrading our servers, taking care of my mental health, and starting work on pre-pre-production for the next game.\nHowever, Kandria development is not yet done. The second and final major update with an official modding API is still coming. I don't have a release date for that yet, so I hope you remain patient!\nIn the meantime, my paper for the European Lisp Symposium in Amsterdam was accepted, so I will be presenting Kandria there. The paper is quite technical, but if you're interested in Common Lisp, it might be worth a read. And if you're going to be in Amsterdam, let me know. I'd be happy to chat!\nThat's it for now\nA rather short update this month, but if you're interested in the details of the pre-pre-production process, come on hang out in the Shirakumo channel with the rest of us! We're discussing all the improvements to Trial there.",
          "link": "https://reader.tymoon.eu/article/427",
          "publishedOn": "2023-04-03T10:48:00.000Z",
          "wordCount": 347,
          "title": "Nicolas Hafner: &#27425;&#12399;...&#20309;&#65311; - April Kandria Update",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZM09BPT0="
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/03/26/measuring-some-tree-traversing-functions/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "In a previous article my friend Zyni wrote some variations on a list-flattening function, some of which were ‘recursive’ and some of which ‘iterative’, managing the stack explicitly. We thought it would be interesting to see what the performance differences were, both for this function and a more useful variant which searches a tree rather than flattening it.\nWhat we measured\nThe code we used is here1. We measured four variations of each of two functions.\nList flattening\nAll these functions use collecting to build their results forwards. They live in flatten-variants.lisp.\nflatten/implicit-stack works in the obvious recursive way, with an implicit stack. This uses iterate to express the local recursive function.\nflatten/explicit-stack uses an explicit stack (called agenda in the code) repr…",
          "link": "https://www.tfeb.org/fragments/2023/03/26/measuring-some-tree-traversing-functions/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-03-26T09:25:50.000Z",
          "wordCount": 1529,
          "title": "Tim Bradshaw: Measuring some tree-traversing functions",
          "imageUrl": null
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/03/25/the-absurdity-of-stacks/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "Very often people regard the stack as a scarce, expensive resource, while the heap is plentiful and very cheap. This is absurd: the stack is memory, the heap is also memory. Deforming programs so they are ‘iterative’ in order that they do not run out of the stack we imagine to be so costly is ridiculous: if you have a program which is inherently recursive, let it be recursive.\nIn a previous article my friend Zyni wrote some variations on a list-flattening function1, some of which were ‘recursive’ and some of which ‘iterative’. Of course, the ones which claim to be iterative are, in fact, recursive: any procedure which traverses a recursively-defined data structure such as a tree of conses is necessarily recursive. The ‘iterative’ versions just use an explicitly-maintained stack rather than…",
          "link": "https://www.tfeb.org/fragments/2023/03/25/the-absurdity-of-stacks/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-03-25T10:57:19.000Z",
          "wordCount": 523,
          "title": "Tim Bradshaw: The absurdity of stacks",
          "imageUrl": null
        },
        {
          "id": "https://www.n16f.net/blog/counting-lines-with-common-lisp/",
          "author": null,
          "description": "A good line counting program has two features: it only counts non-empty lines\nto get a fair estimate of the size of a project, and it groups line counts by\nfile type to help see immediately which languages are used.\nA long time ago I got frustrated with two well known line counters.\nSloccount spits out multiple strange Perl\nwarnings about locales, and most of the output is a copyright notice and some\nabsurd cost estimations. Cloc has fourteen\nPerl packages as dependencies. Writing a simple line counter is an interesting\nexercise; at the time I was discovering Common Lisp, so I wrote my own\nversion.\nI made a few changes years after years, but most of the code stayed the same.\nI thought it would be interesting to revisit this program and present it part\nby part as a demonstration of how you …",
          "link": "https://www.n16f.net/blog/counting-lines-with-common-lisp/",
          "publishedOn": "2023-03-17T18:00:00.000Z",
          "wordCount": 1709,
          "title": "Nicolas Martyanoff: Counting lines with Common Lisp",
          "imageUrl": null
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/03/13/variations-on-a-theme/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "My friend Zyni wrote a comment to a thread on reddit with some variations on a list-flattening function. We’ve since spent some time thinking about things related to this, which is written up in a following article. Here is her comment so the following article can refer to it. Other than notes at the end the following text is Zyni’s, not mine.\nThe reddit comment by Zyni\nFirst of all we all know that CL does not promise to optimize tail recursion: means that tail recursive program may generate recursive not iterative process. So recursive program in CL even if tail recursive is not safe on data of unknown size, assuming stack is limited.\nBut let us assume as good implementations do that tail recursion is optimized in implementation (no need for general tail calls here but is obvious nice th…",
          "link": "https://www.tfeb.org/fragments/2023/03/13/variations-on-a-theme/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-03-13T12:36:33.000Z",
          "wordCount": 1102,
          "title": "Tim Bradshaw: Variations on a theme",
          "imageUrl": null
        },
        {
          "id": "http://within-parens.blogspot.com/2023/03/the-letv-and-letv-macros.html",
          "author": null,
          "description": "Hello,\nIt has been a long time since I posted something here.  I have been busy with my day job and bogged down in a major rewrite of something (more on this hopefully very soon now (tm)) that is full of rabbit's holes.\nI was able to get out of one of these rabbit's holes with this little hack I cooked up that allows you to, possibly, write more concise code.\nThis little hack introduces two handy Common Lisp\nmacros, LETV and LETV* that allow you to mix\nregular LET and MULTIPLE-VALUE-BIND forms in\na less verbose way.  The amount of indentation needed is also reduced.\n \n\nThe syntax of LETV (or LETV*) is very\n\"loopy\", with a nod to SML/OCaml/F#/Haskell/Julia.  The current syntax\n  is the following:\n    letv     ::= 'LETV' [vars] [IN [body]]\n    letvstar ::= 'LETV*' [vars] [IN [body]]\n\n    var…",
          "link": "http://within-parens.blogspot.com/2023/03/the-letv-and-letv-macros.html",
          "publishedOn": "2023-03-09T20:11:00.000Z",
          "wordCount": 3004,
          "title": "Marco Antoniotti: The LETV and LETV* Macros",
          "imageUrl": null
        },
        {
          "id": "https://reader.tymoon.eu/article/425",
          "author": null,
          "description": "The first major update for Kandria is now live on all platforms! It includes the level editor, a modding system, some new sample levels, and bugfixes!\nLevel Editor\nThe level editor received a big overhaul and is now a lot more accessible. There's also official documentation now to help get you started and explain all the tools and shortcuts available. If you want to dig in, just update your game and navigate to Mod Manager > Create Mod, which should place you directly into the editor in a new world of your own!\nSharing Mods\nYou can play levels made by others and download them directly from within the game. To browse existing levels, simply go to Mod Manager > Discover. From there you can select and install mods. Once installed, you can play their world under the Worlds tab.\nWe've provided …",
          "link": "https://reader.tymoon.eu/article/425",
          "publishedOn": "2023-03-08T13:47:42.000Z",
          "wordCount": 539,
          "title": "Nicolas Hafner: Level Editor Update is Live!",
          "imageUrl": "https://studio.tymoon.eu/api/studio/file?id=2379"
        },
        {
          "id": "https://reader.tymoon.eu/article/424",
          "author": null,
          "description": "Let's get the important news out of the way: the next major update for Kandria will launch on Wednesday, March 8th, at 15:00 CET. The update will include a number of improvements, new features, more content, and a community event!\nLevel Editing\nThe biggest part of the update is, no doubt, the polished level editor. The editor has always been a part of Kandria since release, but now it's nicely polished and much easier to use!\n\nI've also included documentation to make it much easier for you to get a handle on how the editor works and how to get started with using it. I'm very excited to see what people can come up with!\nAnd yes, the entire Kandria world was created in this editor, so it is fully capable of creating some very complex levels!\nPartial Modding Support\nBut, the editor itself is …",
          "link": "https://reader.tymoon.eu/article/424",
          "publishedOn": "2023-03-01T13:56:17.000Z",
          "wordCount": 565,
          "title": "Nicolas Hafner: Next Kandria Update on March 8th!",
          "imageUrl": "https://filebox.tymoon.eu//file/TWpZMk1nPT0="
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/02/27/two-tiny-lisp-evaluators/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "Everyone who has written Lisp has written tiny Lisp evaluators in Lisp: here are two more.\nFollowing two recent articles I wrote on scope and extent in Common Lisp, I thought I would finish with two very tiny evaluators for dynamically and lexically bound variants on a tiny Lisp.\nThe language\nThe tiny Lisp these evaluators interpret is not minimal: it has constructs other than lambda, and even has assignment. But it is pretty small. Other than the binding rules the languages are identical.\nλ & lambda are synonyms and construct procedures, which can take any number of arguments;\nquote quotes its argument;\nif is conditional expression (the else part is optional);\nset! is assignment and mutates a binding.\n\n\nThat is all that exists.\nBoth evaluators understand primitives, which are usually just…",
          "link": "https://www.tfeb.org/fragments/2023/02/27/two-tiny-lisp-evaluators/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-02-27T14:19:38.000Z",
          "wordCount": 1249,
          "title": "Tim Bradshaw: Two tiny Lisp evaluators",
          "imageUrl": null
        },
        {
          "id": "https://www.tfeb.org/fragments/2023/02/27/dynamic-binding-without-special-in-common-lisp/?utm_source=lisp&utm_medium=RSS",
          "author": null,
          "description": "In Common Lisp, dynamic bindings and lexical bindings live in the same namespace. They don’t have to.\nCommon Lisp has two sorts of bindings for variables: lexical binding and dynamic binding. Lexical binding has lexical scope — the binding is available where it is visible in source code — and indefinite extent — the binding is available as long as any code might reference it. Dynamic binding has indefinite scope — the binding is available to any code which runs between when the binding is established and when control leaves the form which established it — and dynamic extent — the binding ceases to exist when control leaves the binding form.\nThese are really two very different things. However CL places both of these kinds of bindings into the same namespace, relying on special declarations …",
          "link": "https://www.tfeb.org/fragments/2023/02/27/dynamic-binding-without-special-in-common-lisp/?utm_source=lisp&utm_medium=RSS",
          "publishedOn": "2023-02-27T09:53:27.000Z",
          "wordCount": 784,
          "title": "Tim Bradshaw: Dynamic binding without special in Common Lisp",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.15.1"
}